(self["webpackChunkmodule_dev_site_ts"] = self["webpackChunkmodule_dev_site_ts"] || []).push([["main"],{

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./controller/baseGrid/baseGridController */ "./src/controller/baseGrid/baseGridController.ts"), __webpack_require__(/*! ./view/baseGrid/baseGridView */ "./src/view/baseGrid/baseGridView.ts"), __webpack_require__(/*! ./model/utils */ "./src/model/utils.ts"), __webpack_require__(/*! ./model/module/moduleManager */ "./src/model/module/moduleManager.ts"), __webpack_require__(/*! ./model/SocketsServer/SocketsConnectionHandler */ "./src/model/SocketsServer/SocketsConnectionHandler.ts"), __webpack_require__(/*! ./model/SocketsServer/connectionChecker */ "./src/model/SocketsServer/connectionChecker.ts"), __webpack_require__(/*! ./model/module/autoSave */ "./src/model/module/autoSave.ts"), __webpack_require__(/*! ./model/view/viewTemplates/popUpView */ "./src/model/view/viewTemplates/popUpView.ts"), __webpack_require__(/*! ./controller/popUpControllers/newProjectController */ "./src/controller/popUpControllers/newProjectController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, baseGridController_1, baseGridView_1, utils_1, moduleManager_1, SocketsConnectionHandler_1, connectionChecker_1, autoSave_1, popUpView_1, newProjectController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var App = /** @class */ (function () {
        function App() {
            this.views = new Map(); // Holds all the active views references.
            this.utils = new utils_1.Utils();
            this.moduleManager = new moduleManager_1.ModuleManager();
            this.sockets = new SocketsConnectionHandler_1.SocketsConnectionHandler();
        }
        App.prototype.start = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var savedModule, newProjectView, popUp;
                return __generator(this, function (_b) {
                    this.configApp();
                    new baseGridController_1.BaseGridController("baseGrid", baseGridView_1.viewBaseGridHtml).setUp();
                    savedModule = (_a = this.moduleManager.getLocalStotrageModule()) !== null && _a !== void 0 ? _a : this.moduleManager.getDefaultModule();
                    if (window.mApp.moduleManager.getLocalStotrageModule() == undefined) {
                        newProjectView = new newProjectController_1.NewProjectController();
                        newProjectView.disableExit();
                        popUp = popUpView_1.PopUpView.showPopUpViewOnBody(newProjectView.id, false);
                    }
                    else {
                        this.moduleManager.loadNewModule(savedModule);
                    }
                    connectionChecker_1.ConnectionChecker.shared.setUp();
                    this.sockets.setUp(this.sockets.getCurrentIp());
                    autoSave_1.AutoSave.shared.start();
                    return [2 /*return*/];
                });
            });
        };
        App.prototype.configApp = function () {
            /*$("body").on("contextmenu", function(e) {
                return false;
            });*/
            /*window.onbeforeunload = function (e) {
                e = e || window.event;
            
                // For IE and Firefox prior to version 4
                if (e) {
                    e.returnValue = 'Sure?';
                }
            
                // For Safari
                return 'Sure?';
            };*/
        };
        App.prototype.getApp = function () {
            return this;
        };
        return App;
    }());
    exports["default"] = App;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/baseGrid/baseGridController.ts":
/*!*******************************************************!*\
  !*** ./src/controller/baseGrid/baseGridController.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/grid */ "./src/model/grid/grid.ts"), __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../../model/grid/gridInterfaces */ "./src/model/grid/gridInterfaces.ts"), __webpack_require__(/*! ../../model/grid/separator/verticalSeparator */ "./src/model/grid/separator/verticalSeparator.ts"), __webpack_require__(/*! ../../model/grid/separator/horizontalSeparator */ "./src/model/grid/separator/horizontalSeparator.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../view/baseGrid/baseGridElementView */ "./src/view/baseGrid/baseGridElementView.ts"), __webpack_require__(/*! ../../view/baseGrid/baseGridSeparatorView */ "./src/view/baseGrid/baseGridSeparatorView.ts"), __webpack_require__(/*! ../leftMenu/leftMenuGridElementController */ "./src/controller/leftMenu/leftMenuGridElementController.ts"), __webpack_require__(/*! ../../view/leftMenu/leftMenuGridElView */ "./src/view/leftMenu/leftMenuGridElView.ts"), __webpack_require__(/*! ../centerView/centerViewGridElementController */ "./src/controller/centerView/centerViewGridElementController.ts"), __webpack_require__(/*! ../../view/centerViews/CenterGridElementControllerView */ "./src/view/centerViews/CenterGridElementControllerView.ts"), __webpack_require__(/*! ../logsView/logsGridController */ "./src/controller/logsView/logsGridController.ts"), __webpack_require__(/*! ../bottomStatusBar/bottomStatusController */ "./src/controller/bottomStatusBar/bottomStatusController.ts"), __webpack_require__(/*! ../navBar/navBar */ "./src/controller/navBar/navBar.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, grid_1, gridElement_1, gridInterfaces_1, verticalSeparator_1, horizontalSeparator_1, insertView_1, baseGridElementView_1, baseGridSeparatorView_1, leftMenuGridElementController_1, leftMenuGridElView_1, centerViewGridElementController_1, CenterGridElementControllerView_1, logsGridController_1, bottomStatusController_1, navBar_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.BaseGridController = void 0;
    grid_1 = __importDefault(grid_1);
    gridElement_1 = __importStar(gridElement_1);
    verticalSeparator_1 = __importDefault(verticalSeparator_1);
    horizontalSeparator_1 = __importDefault(horizontalSeparator_1);
    var BaseGridController = /** @class */ (function (_super) {
        __extends(BaseGridController, _super);
        function BaseGridController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BaseGridController.prototype.setUp = function () {
            var _this = this;
            this.insertInto(new insertView_1.InsertedViewData(undefined, "gridHolder"));
            // create and add all the elements
            var elements = [
                new navBar_1.NavBar('mainNavBar'),
                new leftMenuGridElementController_1.LeftMenuGridElementController('leftMenuGridEl', leftMenuGridElView_1.leftMenuGridElView),
                new verticalSeparator_1.default('VS4', baseGridSeparatorView_1.viewBaseGridVSeparator),
                new verticalSeparator_1.default('VS3', baseGridSeparatorView_1.viewBaseGridHSeparator, false),
                new centerViewGridElementController_1.CenterViewGridElementController('CenterViewGridElementController', CenterGridElementControllerView_1.CenterGridElementControllerView),
                new verticalSeparator_1.default('VS1', baseGridSeparatorView_1.viewBaseGridVSeparator),
                new verticalSeparator_1.default('VS2', baseGridSeparatorView_1.viewBaseGridVSeparator, false),
                new gridElement_1.default('documentation', baseGridElementView_1.viewBaseGridElement),
                new horizontalSeparator_1.default('HS1', baseGridSeparatorView_1.viewBaseGridHSeparator),
                new gridElement_1.GridElementWithView(new logsGridController_1.LogsGridController("logsGridController").id, "bottomLogs", undefined),
                new bottomStatusController_1.BottomStatusController('bottomStatusBar')
            ];
            this.gridElements = elements.map(function (el) {
                // this draws all the elements and ads their ids
                _this.insertNewView(new insertView_1.InsertedViewData(el.id, undefined));
                return el.id;
            });
            this.gridDistribution = [
                ["mainNavBar", "mainNavBar", "mainNavBar", "mainNavBar", "mainNavBar"],
                ["VS3", "VS3", "VS3", "VS3", "VS3"],
                ["leftMenuGridEl", "VS4", "CenterViewGridElementController", "VS2", "documentation"],
                ["leftMenuGridEl", "VS4", "HS1", "VS2", "documentation"],
                ["leftMenuGridEl", "VS4", "bottomLogs", "VS2", "documentation"],
                ["bottomStatusBar", "bottomStatusBar", "bottomStatusBar", "bottomStatusBar", "bottomStatusBar"]
            ];
            this.gridDesing = {
                columns: [new gridInterfaces_1.GridElementDesign("350", "px", true, [{ resize: 40, range: { from: 0, to: 200 } }, { resize: 350, range: { from: 200, to: 350 } }], { min: 40, max: 400 }),
                    new gridInterfaces_1.GridElementDesign("1", "px", false),
                    new gridInterfaces_1.GridElementDesign("auto", "", true, [], { min: 600, max: 99999999 }),
                    new gridInterfaces_1.GridElementDesign("0", "px", false),
                    new gridInterfaces_1.GridElementDesign("0", "px", true, [{ resize: 40, range: { from: 0, to: 200 } }, { resize: 350, range: { from: 200, to: 350 } }], { min: 0, max: 700 })],
                rows: [new gridInterfaces_1.GridElementDesign("50", "px", false),
                    new gridInterfaces_1.GridElementDesign("1", "px", false),
                    new gridInterfaces_1.GridElementDesign("auto", "", true, [], { min: 350, max: 99999999 }),
                    new gridInterfaces_1.GridElementDesign("1", "px", false),
                    new gridInterfaces_1.GridElementDesign("40", "px", true, [{ resize: 40, range: { from: 0, to: 100 } }]),
                    new gridInterfaces_1.GridElementDesign("30", "px", false)]
            };
            this.setDesign(this.gridDesing);
            this.setDistribution(this.gridDistribution);
            return this;
        };
        BaseGridController.prototype.setLogsViewSize = function (size) {
            this.gridDesing.rows[this.gridDesing.rows.length - 2].size = "".concat(size);
            this.setDesign(this.gridDesing);
        };
        return BaseGridController;
    }(grid_1.default));
    exports.BaseGridController = BaseGridController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/bottomStatusBar/bottomStatusController.ts":
/*!******************************************************************!*\
  !*** ./src/controller/bottomStatusBar/bottomStatusController.ts ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../../model/SocketsServer/SocketsConnectionHandler */ "./src/model/SocketsServer/SocketsConnectionHandler.ts"), __webpack_require__(/*! ../../model/view/viewTemplates/popUpView */ "./src/model/view/viewTemplates/popUpView.ts"), __webpack_require__(/*! ../../view/bottomViews/bottomStatusView */ "./src/view/bottomViews/bottomStatusView.ts"), __webpack_require__(/*! ../popUpControllers/connectSocketController */ "./src/controller/popUpControllers/connectSocketController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, gridElement_1, SocketsConnectionHandler_1, popUpView_1, bottomStatusView_1, connectSocketController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.BottomStatusController = void 0;
    gridElement_1 = __importDefault(gridElement_1);
    jquery_1 = __importDefault(jquery_1);
    var BottomStatusController = /** @class */ (function (_super) {
        __extends(BottomStatusController, _super);
        function BottomStatusController(id) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            var _this = _super.call(this, id, bottomStatusView_1.bottomStatusBarView) || this;
            window.mApp.sockets.socketsConnectionInterfaces[_this.id] = _this;
            return _this;
        }
        BottomStatusController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .sockets")).off().on({ click: function (ev) {
                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                    var popUp = popUpView_1.PopUpView.showPopUpViewOnBody(new connectSocketController_1.ConnectSocketController().id);
                } });
            if (window.mApp.sockets.connectionStatus == SocketsConnectionHandler_1.serverConnectionStatus.connected) {
                this.connectionEnabled();
            }
            else {
                this.connectionFailed();
            }
        };
        BottomStatusController.prototype.connectionEnabled = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text("Connected");
            (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", window.mApp.utils.getImageUrl("connected.png"));
        };
        BottomStatusController.prototype.connectionFailed = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text("Disconnected");
            (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", window.mApp.utils.getImageUrl("disconnected.png"));
        };
        BottomStatusController.prototype.finish = function () {
            delete window.mApp.sockets.socketsConnectionInterfaces[this.id];
            _super.prototype.finish.call(this);
        };
        return BottomStatusController;
    }(gridElement_1.default));
    exports.BottomStatusController = BottomStatusController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/centerView/centerViewGridElementController.ts":
/*!**********************************************************************!*\
  !*** ./src/controller/centerView/centerViewGridElementController.ts ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../requestView/requestController */ "./src/controller/requestView/requestController.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../paramsController/paramsController */ "./src/controller/paramsController/paramsController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, gridElement_1, requestController_1, insertView_1, paramsController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.CenterViewGridElementController = void 0;
    gridElement_1 = __importDefault(gridElement_1);
    var CenterViewGridElementController = /** @class */ (function (_super) {
        __extends(CenterViewGridElementController, _super);
        function CenterViewGridElementController(id, html) {
            var _this = _super.call(this, id, html) || this;
            _this.currentModuleDataId = "";
            _this.viewTypes = [
                {
                    pathMatches: ["chapters"],
                    createView: function (modulePartId) {
                        return new requestController_1.RequestController(window.mApp.utils.makeId(15), modulePartId, "<div>hello world</div>");
                    }
                }
            ];
            window.mApp.moduleManager.moduleViewsExecutor[_this.id] = _this;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        CenterViewGridElementController.prototype.viewWasInserted = function () {
            this.setUp();
        };
        CenterViewGridElementController.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            return this;
        };
        CenterViewGridElementController.prototype.moduleLoaded = function () {
            var _a;
            // This will load the current selection as a new view.
            this.modulePartWasSelected((_a = window.mApp.moduleManager.getModuleOptions()["selected"]) !== null && _a !== void 0 ? _a : "");
        };
        CenterViewGridElementController.prototype.moduleDataUpdated = function () {
            // check if the data that has been removed is related to the current view.
            // If so we remove it from the view.
            var _a;
            if (window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId) == undefined) {
                for (var _i = 0, _b = this.insertedViews; _i < _b.length; _i++) {
                    var x = _b[_i];
                    (_a = x.getView()) === null || _a === void 0 ? void 0 : _a.finish();
                }
                return;
            }
        };
        CenterViewGridElementController.prototype.modulePartWasSelected = function (jsonId) {
            // this function will load the current view.
            var _a, _b, _c;
            for (var _i = 0, _d = this.insertedViews; _i < _d.length; _i++) {
                var x = _d[_i];
                (_a = x.getView()) === null || _a === void 0 ? void 0 : _a.finish();
            }
            if (jsonId == "") {
                return;
            }
            this.currentModuleDataId = jsonId;
            //$(`[${this.id}]`).text(this.currentModuleDataId)
            var fixedPath = window.mApp.utils.deepCopy((_c = (_b = window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId)) === null || _b === void 0 ? void 0 : _b.jsonPath) !== null && _c !== void 0 ? _c : []).filter(function (el) {
                if (window.mApp.utils.getNumberFromString(el) == undefined)
                    return el;
            }).join();
            var moduleData = window.mApp.moduleManager.moduleMap.get(jsonId);
            if (moduleData == undefined) {
                return;
            }
            var isRequest = false;
            if (window.mApp.utils.getNumberFromString(moduleData.jsonPath[moduleData.jsonPath.length - 1]) != undefined) {
                isRequest = true;
            }
            var innerView = undefined;
            if (isRequest) {
                innerView = new requestController_1.RequestController(window.mApp.utils.makeId(15), jsonId);
            }
            else {
                innerView = new paramsController_1.ParamsContoller(jsonId);
            }
            this.insertNewView(new insertView_1.InsertedViewData(innerView.id));
            innerView.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
        };
        CenterViewGridElementController.prototype.finish = function () {
            _super.prototype.finish.call(this);
        };
        return CenterViewGridElementController;
    }(gridElement_1.default));
    exports.CenterViewGridElementController = CenterViewGridElementController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/leftMenuData.ts":
/*!*************************************************!*\
  !*** ./src/controller/leftMenu/leftMenuData.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ./menuViewer/moduleView/moduleCollectionViewController */ "./src/controller/leftMenu/menuViewer/moduleView/moduleCollectionViewController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, moduleCollectionViewController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuDataset = void 0;
    view_1 = __importDefault(view_1);
    exports.leftMenuDataset = [
        {
            id: "module",
            selected: true,
            subMenuCell: {
                viewId: "leftSubMenuModule",
                image: "./images/module.png",
                name: "Module"
            },
            subMenuViewer: {
                viewId: "leftMenuModuleView",
                createView: function () {
                    return new moduleCollectionViewController_1.TestViewController("leftMenuModuleView", '<div $id class="left-menu-viewer-view">  </div> ');
                },
            }
        },
        {
            id: "notes",
            selected: false,
            subMenuCell: {
                viewId: "leftMenuSubMenuNotes",
                image: "./images/notes.png",
                name: "Module\nNotes"
            },
            subMenuViewer: {
                viewId: "leftMenuNotesView",
                createView: function () {
                    return new view_1.default("leftMenuNotesView", '<div $id class="left-menu-viewer-view"> $id </div> ');
                },
            }
        },
        {
            id: "quickDocumentation",
            selected: false,
            subMenuCell: {
                viewId: "leftSubMenuquickDocumentation",
                image: "./images/information.png",
                name: "Quick Doc"
            },
            subMenuViewer: {
                viewId: "leftMenuQuickDocView",
                createView: function () {
                    return new view_1.default("leftMenuQuickDocView", '<div $id class="left-menu-viewer-view"> $id </div> ');
                },
            }
        },
        {
            id: "moduleTutorials",
            selected: false,
            subMenuCell: {
                viewId: "leftSubMenuTutorials",
                image: "./images/tutorial.png",
                name: "Module Tutorials"
            },
            subMenuViewer: {
                viewId: "leftMenuModuleTutorials",
                createView: function () {
                    return new view_1.default("leftMenuModuleTutorials", '<div $id class="left-menu-viewer-view"> $id </div> ');
                },
            }
        },
    ];
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/leftMenuGridElementController.ts":
/*!******************************************************************!*\
  !*** ./src/controller/leftMenu/leftMenuGridElementController.ts ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../../model/ResizeObserver/mResizeObserver */ "./src/model/ResizeObserver/mResizeObserver.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../view/leftMenu/subMenu/leftMenuSubMenuView */ "./src/view/leftMenu/subMenu/leftMenuSubMenuView.ts"), __webpack_require__(/*! ./menuViewer/leftMenuMenuViewerController */ "./src/controller/leftMenu/menuViewer/leftMenuMenuViewerController.ts"), __webpack_require__(/*! ./subMenu/leftMenuSubMenuController */ "./src/controller/leftMenu/subMenu/leftMenuSubMenuController.ts"), __webpack_require__(/*! ../../view/leftMenu/leftMenuMenuViewerView */ "./src/view/leftMenu/leftMenuMenuViewerView.ts"), __webpack_require__(/*! ../../view/leftMenu/leftMenuTopView */ "./src/view/leftMenu/leftMenuTopView.ts"), __webpack_require__(/*! ./leftMenuTopController */ "./src/controller/leftMenu/leftMenuTopController.ts"), __webpack_require__(/*! ./leftMenuData */ "./src/controller/leftMenu/leftMenuData.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, gridElement_1, mResizeObserver_1, insertView_1, leftMenuSubMenuView_1, leftMenuMenuViewerController_1, leftMenuSubMenuController_1, leftMenuMenuViewerView_1, leftMenuTopView_1, leftMenuTopController_1, leftMenuData_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuGridElementController = void 0;
    gridElement_1 = __importDefault(gridElement_1);
    mResizeObserver_1 = __importDefault(mResizeObserver_1);
    jquery_1 = __importDefault(jquery_1);
    // ID =  "leftMenuGridEl"
    // HTML = leftMenuGridElementHtml
    var LeftMenuGridElementController = /** @class */ (function (_super) {
        __extends(LeftMenuGridElementController, _super);
        function LeftMenuGridElementController(id, html) {
            var _this = _super.call(this, id, html) || this;
            _this.subMenu = "";
            _this.subMenuViewer = "";
            _this.topView = "";
            _this.leftMenuData = leftMenuData_1.leftMenuDataset;
            return _this;
        }
        LeftMenuGridElementController.prototype.viewWasInserted = function () {
            this.setUp();
        };
        LeftMenuGridElementController.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            var subMenuViewer = new leftMenuMenuViewerController_1.LeftMenuMenuViewerController("leftMenuViewer", leftMenuMenuViewerView_1.leftMenuMenuViewerView);
            subMenuViewer.leftMenuDataInterface = this;
            this.subMenuViewer = subMenuViewer.id;
            var subMenu = new leftMenuSubMenuController_1.LeftMenuSubMenuController("leftMenuSubMenu", leftMenuSubMenuView_1.leftMenuSubMenuView);
            subMenu.leftMenuDataInterface = this;
            this.subMenu = subMenu.id;
            var topView = new leftMenuTopController_1.LeftMenuTopController("leftMenuTop", leftMenuTopView_1.leftMenuTopView);
            this.topView = topView.id;
            this.insertNewView(new insertView_1.InsertedViewData(this.subMenu, undefined));
            this.insertNewView(new insertView_1.InsertedViewData(this.subMenuViewer, undefined));
            this.insertNewView(new insertView_1.InsertedViewData(this.topView, undefined));
            // we set the resizers
            this.mResizeObserver = new mResizeObserver_1.default(new insertView_1.InsertedViewData(this.id, undefined), [{ name: "big", condition: function (newSize) {
                        var mRange = { min: 60, max: 999999 };
                        return newSize.inlineSize >= mRange.min && newSize.inlineSize <= mRange.max;
                    } }, { name: "small", condition: function (newSize) {
                        var mRange = { min: 0, max: 50 };
                        return newSize.inlineSize >= mRange.min && newSize.inlineSize <= mRange.max;
                    } }]);
            this.mResizeObserver.interface = this;
            this.mResizeObserver.triggerManually();
            return this;
        };
        LeftMenuGridElementController.prototype.resizeTriggered = function (condition) {
            var viewerView = window.mApp.views.get(this.subMenuViewer);
            switch (condition.name) {
                case "small":
                    viewerView === null || viewerView === void 0 ? void 0 : viewerView.isHidden(true);
                    (0, jquery_1.default)("[".concat(this.id, "]")).addClass("left-menu-small");
                    (0, jquery_1.default)("[".concat(this.id, "]")).removeClass("left-menu-big");
                    break;
                case "big":
                    viewerView === null || viewerView === void 0 ? void 0 : viewerView.isHidden(false);
                    (0, jquery_1.default)("[".concat(this.id, "]")).removeClass("left-menu-small");
                    (0, jquery_1.default)("[".concat(this.id, "]")).addClass("left-menu-big");
                    break;
            }
            var subMenuView = this.getView(this.subMenu);
            subMenuView.parentResized(condition.name);
        };
        LeftMenuGridElementController.prototype.resizeFinished = function () {
        };
        LeftMenuGridElementController.prototype.getLeftMenuData = function (id) {
            for (var _i = 0, _a = this.leftMenuData; _i < _a.length; _i++) {
                var x = _a[_i];
                if (x.id = id) {
                    return x;
                }
            }
            return undefined;
        };
        LeftMenuGridElementController.prototype.getLeftMenuDataArrray = function () {
            return this.leftMenuData;
        };
        LeftMenuGridElementController.prototype.subMenuSelected = function (selection) {
            var viewer = this.getView(this.subMenuViewer);
            viewer.changeMenuView(selection);
        };
        LeftMenuGridElementController.prototype.finish = function () {
            this.mResizeObserver.finished();
            _super.prototype.finish.call(this);
        };
        return LeftMenuGridElementController;
    }(gridElement_1.default));
    exports.LeftMenuGridElementController = LeftMenuGridElementController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/leftMenuTopController.ts":
/*!**********************************************************!*\
  !*** ./src/controller/leftMenu/leftMenuTopController.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../model/view/viewTemplates/popUpView */ "./src/model/view/viewTemplates/popUpView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ../popUpControllers/newProjectController */ "./src/controller/popUpControllers/newProjectController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, popUpView_1, jquery_1, newProjectController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuTopController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var LeftMenuTopController = /** @class */ (function (_super) {
        __extends(LeftMenuTopController, _super);
        function LeftMenuTopController(id, html) {
            var _this = _super.call(this, id, html) || this;
            window.mApp.moduleManager.moduleViewsExecutor[_this.id] = _this;
            return _this;
        }
        LeftMenuTopController.prototype.viewWasInserted = function () {
            this.setUp();
        };
        LeftMenuTopController.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            console.log("creating shit");
            (0, jquery_1.default)("[".concat(this.id, "] .new-button")).off().on('click', function (ev) {
                ev.preventDefault();
                ev.stopImmediatePropagation();
                var popUp = popUpView_1.PopUpView.showPopUpViewOnBody(new newProjectController_1.NewProjectController().id);
                popUp.clipToParent();
            });
            (0, jquery_1.default)("[".concat(this.id, "] .load-button")).off().on('click', function (ev) { return __awaiter(_this, void 0, void 0, function () {
                var file, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            ev.preventDefault();
                            ev.stopImmediatePropagation();
                            return [4 /*yield*/, this.selectFile("application/json", false)];
                        case 1:
                            file = _c.sent();
                            _b = (_a = window.mApp.moduleManager).loadNewModule;
                            return [4 /*yield*/, file.text()];
                        case 2:
                            _b.apply(_a, [_c.sent()]);
                            return [2 /*return*/];
                    }
                });
            }); });
            (0, jquery_1.default)("[".concat(this.id, "] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions()["projectName"]);
            return this;
        };
        LeftMenuTopController.prototype.selectFile = function (contentType, multiple) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve) {
                            var input = document.createElement('input');
                            input.type = 'file';
                            input.multiple = multiple;
                            input.accept = contentType;
                            input.onchange = function (_) {
                                var files = Array.prototype.slice.call(input.files);
                                if (multiple)
                                    resolve(files);
                                else
                                    resolve(files[0]);
                            };
                            input.click();
                        })];
                });
            });
        };
        LeftMenuTopController.prototype.moduleLoaded = function () {
            // This will load the current selection as a new view.
            this.setUp();
        };
        LeftMenuTopController.prototype.moduleDataUpdated = function () {
        };
        LeftMenuTopController.prototype.moduleProjectNameChanged = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions()["projectName"]);
        };
        ;
        LeftMenuTopController.prototype.finish = function () {
            delete window.mApp.moduleManager.moduleViewsExecutor[this.id];
            (0, jquery_1.default)("[".concat(this.id, "] .new-button")).off();
            (0, jquery_1.default)("[".concat(this.id, "] .load-button")).off();
            _super.prototype.finish.call(this);
        };
        return LeftMenuTopController;
    }(view_1.default));
    exports.LeftMenuTopController = LeftMenuTopController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/menuViewer/leftMenuMenuViewerController.ts":
/*!****************************************************************************!*\
  !*** ./src/controller/leftMenu/menuViewer/leftMenuMenuViewerController.ts ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../model/viewsHolder/viewsHolder */ "./src/model/viewsHolder/viewsHolder.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, insertView_1, view_1, viewsHolder_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuMenuViewerController = void 0;
    view_1 = __importDefault(view_1);
    var LeftMenuMenuViewerController = /** @class */ (function (_super) {
        __extends(LeftMenuMenuViewerController, _super);
        function LeftMenuMenuViewerController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LeftMenuMenuViewerController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            window.mApp.moduleManager.moduleViewsExecutor[this.id] = this;
        };
        LeftMenuMenuViewerController.prototype.setUp = function () {
            var _a;
            _super.prototype.setUp.call(this);
            this.insertedViews.forEach(function (el) {
                var _a;
                (_a = el.getView()) === null || _a === void 0 ? void 0 : _a.finish();
            });
            var data = (_a = this.leftMenuDataInterface) === null || _a === void 0 ? void 0 : _a.getLeftMenuDataArrray();
            if (data != undefined) {
                var viewsArray = data.map(function (el) {
                    return el.subMenuViewer.createView().id;
                });
                var active = "";
                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                    var x = data_1[_i];
                    if (x.selected) {
                        active = x.subMenuViewer.viewId;
                        break;
                    }
                }
                if (active == "" && data.length > 0) {
                    data[0].selected = true;
                    active = data[0].subMenuCell.viewId;
                }
                var viewsHolder = new viewsHolder_1.ViewsHolder("leftMenuViewsHolder", viewsArray, active);
                this.insertNewView(new insertView_1.InsertedViewData(viewsHolder.id));
                viewsHolder.setConstraints({ top: "0px", left: "0px", bottom: "0px", right: "0px" });
            }
            return this;
        };
        LeftMenuMenuViewerController.prototype.changeMenuView = function (data) {
            this.getView("leftMenuViewsHolder").showView(data.subMenuViewer.viewId);
        };
        LeftMenuMenuViewerController.prototype.moduleLoaded = function () {
            this.setUp();
        };
        LeftMenuMenuViewerController.prototype.finish = function () {
            this.leftMenuDataInterface = undefined;
            delete window.mApp.moduleManager.moduleViewsExecutor[this.id];
            _super.prototype.finish.call(this);
        };
        return LeftMenuMenuViewerController;
    }(view_1.default));
    exports.LeftMenuMenuViewerController = LeftMenuMenuViewerController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/menuViewer/moduleView/moduleCollectionViewController.ts":
/*!*****************************************************************************************!*\
  !*** ./src/controller/leftMenu/menuViewer/moduleView/moduleCollectionViewController.ts ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../../model/collectionView/collectionView */ "./src/model/collectionView/collectionView.ts"), __webpack_require__(/*! ../../../../model/collectionView/interfaces */ "./src/model/collectionView/interfaces.ts"), __webpack_require__(/*! ../../../../model/module/moduleDataSection */ "./src/model/module/moduleDataSection.ts"), __webpack_require__(/*! ../../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../../view/leftMenu/menuViewer/module/leftMenuViewerModuleCellView */ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCellView.ts"), __webpack_require__(/*! ../../../../view/leftMenu/menuViewer/module/leftMenuViewerModuleCollectionView */ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCollectionView.ts"), __webpack_require__(/*! ../../../../view/leftMenu/menuViewer/module/leftMenuViewerModuleSectionView */ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleSectionView.ts"), __webpack_require__(/*! ./moduleViewCell */ "./src/controller/leftMenu/menuViewer/moduleView/moduleViewCell.ts"), __webpack_require__(/*! ./moduleViewSectionCell */ "./src/controller/leftMenu/menuViewer/moduleView/moduleViewSectionCell.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionView_1, interfaces_1, moduleDataSection_1, insertView_1, view_1, leftMenuViewerModuleCellView_1, leftMenuViewerModuleCollectionView_1, leftMenuViewerModuleSectionView_1, moduleViewCell_1, moduleViewSectionCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.TestViewController = void 0;
    view_1 = __importDefault(view_1);
    var TestViewController = /** @class */ (function (_super) {
        __extends(TestViewController, _super);
        function TestViewController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TestViewController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        TestViewController.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            var collectionView = new collectionView_1.UICollectionView("collectionViewId", undefined, leftMenuViewerModuleCollectionView_1.leftMenuViewerModuleCollectionView);
            collectionView.dataSourceDelegate = this;
            this.insertNewView(new insertView_1.InsertedViewData(collectionView.id, undefined));
            collectionView.setConstraints({ top: "0px", left: "0px", right: "0px", bottom: "0px" });
            collectionView.reloadData();
            return this;
        };
        TestViewController.prototype.getSectionsNumber = function (cells, current) {
            var total = current;
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                var x = cells_1[_i];
                if (x instanceof moduleDataSection_1.ModuleSectionData) {
                    total = this.getSectionsNumber(x.cells, total);
                    total = total + 1;
                }
            }
            return total;
        };
        TestViewController.prototype.getSectionsArray = function (cells, foundCells) {
            if (foundCells === void 0) { foundCells = []; }
            var totalCells = foundCells;
            for (var _i = 0, cells_2 = cells; _i < cells_2.length; _i++) {
                var x = cells_2[_i];
                if (x instanceof moduleDataSection_1.ModuleSectionData) {
                    +this.getSectionsArray(x.cells, [x]).forEach(function (el) {
                        totalCells.push(el);
                    });
                }
            }
            return totalCells;
        };
        TestViewController.prototype.cvNumberOfItemsInSection = function (cv, section) {
            var cells = this.getSectionsArray(window.mApp.moduleManager.moudleParsed, [])[section].cells;
            if (cells[Math.floor(Math.random() * cells.length)] instanceof moduleDataSection_1.ModuleSectionData) {
                return 0;
            }
            return cells.length;
        };
        TestViewController.prototype.cvNumberOfSections = function (into) {
            console.log(this.getSectionsNumber(window.mApp.moduleManager.moudleParsed, 0));
            return this.getSectionsNumber(window.mApp.moduleManager.moudleParsed, 0);
        };
        TestViewController.prototype.cvCellForItemAt = function (cv, indexPath) {
            var current = this.getSectionsArray(window.mApp.moduleManager.moudleParsed, [])[indexPath.section].cells[indexPath.item];
            var cell = new moduleViewCell_1.LeftMenuModuleViewCell(current.jsonId, leftMenuViewerModuleCellView_1.leftMenuViewerModuleCellView);
            return cell;
        };
        TestViewController.prototype.cvCellForSectionAt = function (cv, sectionCellType, section) {
            var current = this.getSectionsArray(window.mApp.moduleManager.moudleParsed, [])[section];
            if (sectionCellType == interfaces_1.UICollectionViewSectionCellType.header) {
                return new moduleViewSectionCell_1.LeftMenuModuleViewSection(current.jsonId, leftMenuViewerModuleSectionView_1.leftMenuViewerModuleSectionView);
            }
            return undefined;
        };
        TestViewController.prototype.cvDidSelectItem = function (cv, indexPath) {
            console.log(indexPath);
        };
        TestViewController.prototype.cvDidSelectSection = function (cv, section, sectionCellType) {
            console.log(section);
        };
        return TestViewController;
    }(view_1.default));
    exports.TestViewController = TestViewController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/menuViewer/moduleView/moduleViewCell.ts":
/*!*************************************************************************!*\
  !*** ./src/controller/leftMenu/menuViewer/moduleView/moduleViewCell.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../../model/collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! ../../../../model/dropDownMenu/dropDown */ "./src/model/dropDownMenu/dropDown.ts"), __webpack_require__(/*! ../../../../model/dropDownMenu/dropDownCell */ "./src/model/dropDownMenu/dropDownCell.ts"), __webpack_require__(/*! ../../../../model/elementModalView/elementModalView */ "./src/model/elementModalView/elementModalView.ts"), __webpack_require__(/*! ../../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ../../../../view/defaultViews/defaultDropDownCellView */ "./src/view/defaultViews/defaultDropDownCellView.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, dropDown_1, dropDownCell_1, elementModalView_1, insertView_1, jquery_1, defaultDropDownCellView_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuModuleViewCell = void 0;
    jquery_1 = __importDefault(jquery_1);
    var LeftMenuModuleViewCell = /** @class */ (function (_super) {
        __extends(LeftMenuModuleViewCell, _super);
        function LeftMenuModuleViewCell(moduleDataId, html) {
            var _this = _super.call(this, html) || this;
            _this.canRemove = false;
            _this.moduleDataId = moduleDataId;
            return _this;
        }
        LeftMenuModuleViewCell.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        LeftMenuModuleViewCell.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            var data = window.mApp.moduleManager.moduleMap.get(this.moduleDataId);
            var options = data.getOptions();
            (0, jquery_1.default)("[".concat(this.id, "] .cell-holder")).css({ "left": "".concat((data.sections.length - 1) * 15, "px") });
            var position = data.getObjectIndex();
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text("".concat(options["options"]["name"]));
            if (position != undefined) {
                (0, jquery_1.default)("[".concat(this.id, "] .title")).text("".concat(options["options"]["name"], " ").concat(position + 1));
            }
            if (window.mApp.utils.getNumberFromString(data.jsonPath[data.jsonPath.length - 1]) != undefined) {
                this.canRemove = true;
                (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).off().on("click", function (event) {
                    var _a, _b;
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    if (((_b = (_a = data.getSection()) === null || _a === void 0 ? void 0 : _a.cells) !== null && _b !== void 0 ? _b : []).length <= 1) {
                        return;
                    }
                    _this.showAreYouSureToDelete((0, jquery_1.default)("[".concat(_this.id, "]")), function () {
                        var _a;
                        data.finish();
                        (_a = data.getSection()) === null || _a === void 0 ? void 0 : _a.updatePaths();
                        var collectionView = _this.getView(_this.collectionViewId);
                        collectionView.reloadData();
                        window.mApp.moduleManager.moduleDataUpdated();
                    });
                });
            }
            if (!this.canRemove) {
                (0, jquery_1.default)("[".concat(this.id, "] .cell-distr")).css({ "grid-template-columns": "25px auto" });
                (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).css({ "display": "none" });
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", window.mApp.utils.getImageUrl("params.png"));
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", window.mApp.utils.getImageUrl("code.png"));
            }
            (0, jquery_1.default)("[".concat(this.id, "] .click-select")).off().on("click", function (event) {
                event.preventDefault();
                event.stopImmediatePropagation();
                /* let dropDown = new DropDown((index,dropDown) => {
                     dropDown.finish();
                 });
     
                 dropDown.insertInto(new InsertedViewData(undefined,"body"))
     
                 for (var x = 0; x < 5; x++) {
                     dropDown.addCell(new DefaultDropDownCell());
                 }
     
                 let thisFrame = this.getFrame();
                 dropDown.generalSetUp(0,20,ElementModalPos.auto,ElemModalDirection.auto,thisFrame,thisFrame.width)
                 
                 */
                window.mApp.moduleManager.getModuleOptions()["selected"] = data.jsonId;
                var collectionView = _this.getView(_this.collectionViewId);
                var top = collectionView.getScrollTop();
                collectionView.updateCellsWithoutRedrawing();
                window.mApp.views.get("CenterViewGridElementController").modulePartWasSelected(data.jsonId);
                collectionView.setScrollTop(top);
            });
            this.cellWasReloadedWithoutRedrawing();
            return this;
        };
        LeftMenuModuleViewCell.prototype.showAreYouSureToDelete = function (el, completion) {
            var htmlEl = el.get(0);
            if (htmlEl == undefined) {
                return;
            }
            var modal = new dropDown_1.DropDown();
            var dropDownCell = new dropDownCell_1.DefaultDropDownCell("Delete", undefined, undefined, true, defaultDropDownCellView_1.viewDefaultDropDownCell);
            dropDownCell.viewWasInsertedCallback = function (id) {
                (0, jquery_1.default)("[".concat(id, "]")).addClass(["bg-secondary-dark-hover", "pointer", "tc-red"]);
            };
            modal.addCell(dropDownCell, function (index, dropwDown) {
                dropwDown.finish();
                completion();
            });
            modal.insertInto(new insertView_1.InsertedViewData(undefined, "body"));
            modal.setUpWithElement(0, 10, elementModalView_1.ElementModalPos.right, elementModalView_1.ElemModalDirection.bottom, htmlEl, el.outerWidth());
        };
        LeftMenuModuleViewCell.prototype.cellWasReloadedWithoutRedrawing = function () {
            _super.prototype.cellWasReloadedWithoutRedrawing.call(this);
            var data = window.mApp.moduleManager.moduleMap.get(this.moduleDataId);
            var options = data.getOptions();
            if (data.isCellHidden()) {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "height": "0", "display": "none" });
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "height": "2.4rem", "display": "" });
            }
            if (data.jsonId == window.mApp.moduleManager.getModuleOptions()["selected"]) {
                (0, jquery_1.default)("[".concat(this.id, "] .cell-holder")).addClass("selected");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "] .cell-holder")).removeClass("selected");
            }
        };
        LeftMenuModuleViewCell.prototype.finish = function () {
            _super.prototype.finish.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).off();
        };
        return LeftMenuModuleViewCell;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.LeftMenuModuleViewCell = LeftMenuModuleViewCell;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/menuViewer/moduleView/moduleViewSectionCell.ts":
/*!********************************************************************************!*\
  !*** ./src/controller/leftMenu/menuViewer/moduleView/moduleViewSectionCell.ts ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../../model/collectionView/collectionViewSectionCell */ "./src/model/collectionView/collectionViewSectionCell.ts"), __webpack_require__(/*! ../../../../model/module/moduleDataSection */ "./src/model/module/moduleDataSection.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ../../../../model/dropDownMenu/dropDown */ "./src/model/dropDownMenu/dropDown.ts"), __webpack_require__(/*! ../../../../model/dropDownMenu/dropDownCell */ "./src/model/dropDownMenu/dropDownCell.ts"), __webpack_require__(/*! ../../../../view/defaultViews/defaultDropDownCellView */ "./src/view/defaultViews/defaultDropDownCellView.ts"), __webpack_require__(/*! ../../../../model/elementModalView/elementModalView */ "./src/model/elementModalView/elementModalView.ts"), __webpack_require__(/*! ../../../../model/view/insertView */ "./src/model/view/insertView.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewSectionCell_1, moduleDataSection_1, jquery_1, dropDown_1, dropDownCell_1, defaultDropDownCellView_1, elementModalView_1, insertView_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuModuleViewSection = void 0;
    jquery_1 = __importDefault(jquery_1);
    var SectionButtonEnum;
    (function (SectionButtonEnum) {
        SectionButtonEnum["add"] = "Add";
        SectionButtonEnum["del"] = "Del";
        SectionButtonEnum["none"] = "none";
    })(SectionButtonEnum || (SectionButtonEnum = {}));
    var LeftMenuModuleViewSection = /** @class */ (function (_super) {
        __extends(LeftMenuModuleViewSection, _super);
        function LeftMenuModuleViewSection(moduleDataId, html) {
            var _this = _super.call(this, html) || this;
            _this.hasSectionController = true;
            _this.sectionButton = SectionButtonEnum.add;
            _this.moduleDataId = moduleDataId;
            return _this;
        }
        LeftMenuModuleViewSection.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        LeftMenuModuleViewSection.prototype.setUp = function () {
            var _this = this;
            var _a, _b;
            _super.prototype.setUp.call(this);
            var data = window.mApp.moduleManager.moduleMap.get(this.moduleDataId);
            if (data == undefined) {
                return this;
            }
            ;
            (0, jquery_1.default)("[".concat(this.id, "] .cell-holder")).css({ "left": "".concat(data.sections.length * 15, "px") });
            var position = data.getObjectIndex();
            (0, jquery_1.default)("[".concat(this.id, "] .text")).text("".concat((_a = data.options) === null || _a === void 0 ? void 0 : _a.name));
            if (position != undefined) {
                (0, jquery_1.default)("[".concat(this.id, "] .text")).text("".concat((_b = data.options) === null || _b === void 0 ? void 0 : _b.name, " ").concat(position + 1));
            }
            if (!data.canModify && !(window.mApp.utils.deepCopy(data.cells).pop() instanceof moduleDataSection_1.ModuleSectionData)) {
                (0, jquery_1.default)("[".concat(this.id, "] .section-controller")).css({ "display": "none" });
                (0, jquery_1.default)("[".concat(this.id, "] .text")).css({ "left": "0.5rem" });
                this.hasSectionController = false;
            }
            if (window.mApp.utils.getNumberFromString(data.jsonPath[data.jsonPath.length - 1]) != undefined) {
                (0, jquery_1.default)("[".concat(this.id, "] .bh-txt")).text("Del");
                this.sectionButton = SectionButtonEnum.del;
            }
            if (!this.hasSectionController && this.sectionButton == SectionButtonEnum.add) {
                this.sectionButton = SectionButtonEnum.none;
                (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).css({ "display": "none" });
            }
            if (!this.hasSectionController && this.sectionButton == SectionButtonEnum.none) {
                (0, jquery_1.default)("[".concat(this.id, "] .section-distr")).css({ "grid-template-columns": "1fr" });
            }
            this.cellWasReloadedWithoutRedrawing();
            if (!this.hasSectionController) {
                return this;
            }
            (0, jquery_1.default)("[".concat(this.id, "] .title")).off().on('click', function (el) {
                el.preventDefault();
                el.stopImmediatePropagation();
                _this.showHideSection(data);
            });
            (0, jquery_1.default)("[".concat(this.id, "] .section-controller")).off().on('click', function (el) {
                el.preventDefault();
                el.stopImmediatePropagation();
                _this.showHideSection(data);
            });
            (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).off().on('click', function (el) {
                var _a, _b;
                el.preventDefault();
                el.stopImmediatePropagation();
                _this.showHideSection(data, false);
                if (_this.sectionButton == SectionButtonEnum.del) {
                    if (((_b = (_a = data.getSection()) === null || _a === void 0 ? void 0 : _a.cells) !== null && _b !== void 0 ? _b : []).length <= 1) {
                        return;
                    }
                    _this.showAreYouSureToDelete((0, jquery_1.default)("[".concat(_this.id, "]")), function () {
                        var _a;
                        data.finish();
                        (_a = data.getSection()) === null || _a === void 0 ? void 0 : _a.updatePaths();
                        window.mApp.moduleManager.moduleDataUpdated();
                        var collectionView = _this.getView(_this.collectionViewId);
                        collectionView.reloadData();
                    });
                }
                else if (_this.sectionButton == SectionButtonEnum.add) {
                    data.addCell();
                    data.updated();
                    var collectionView = _this.getView(_this.collectionViewId);
                    collectionView.reloadData();
                }
            });
            return this;
        };
        LeftMenuModuleViewSection.prototype.showHideSection = function (data, isClosed) {
            if (isClosed === void 0) { isClosed = undefined; }
            data.hideCells(isClosed !== null && isClosed !== void 0 ? isClosed : !data.getOptions()["cellsHidden"]);
            var collectionView = this.getView(this.collectionViewId);
            collectionView.updateCellsWithoutRedrawing();
        };
        LeftMenuModuleViewSection.prototype.showAreYouSureToDelete = function (el, completion) {
            var htmlEl = el.get(0);
            if (htmlEl == undefined) {
                return;
            }
            var modal = new dropDown_1.DropDown();
            var dropDownCell = new dropDownCell_1.DefaultDropDownCell("Delete", undefined, undefined, true, defaultDropDownCellView_1.viewDefaultDropDownCell);
            dropDownCell.viewWasInsertedCallback = function (id) {
                (0, jquery_1.default)("[".concat(id, "]")).addClass(["bg-secondary-dark-hover", "pointer", "tc-red"]);
            };
            modal.addCell(dropDownCell, function (index, dropwDown) {
                dropwDown.finish();
                completion();
            });
            modal.insertInto(new insertView_1.InsertedViewData(undefined, "body"));
            modal.setUpWithElement(0, 10, elementModalView_1.ElementModalPos.right, elementModalView_1.ElemModalDirection.bottom, htmlEl, el.outerWidth());
        };
        LeftMenuModuleViewSection.prototype.cellWasReloadedWithoutRedrawing = function () {
            _super.prototype.cellWasReloadedWithoutRedrawing.call(this);
            var data = window.mApp.moduleManager.moduleMap.get(this.moduleDataId);
            if (data.getOptions()["cellsHidden"]) {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", "./images/arrow-right.png");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", "./images/arrow-bottom.png");
            }
            if (data.isCellHidden()) {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "height": "0", "display": "none" });
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "height": "2.2rem", "display": "" });
            }
        };
        LeftMenuModuleViewSection.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .title")).off();
            (0, jquery_1.default)("[".concat(this.id, "] .section-controller")).off();
            (0, jquery_1.default)("[".concat(this.id, "] .button-holder")).off();
            _super.prototype.finish.call(this);
        };
        return LeftMenuModuleViewSection;
    }(collectionViewSectionCell_1.UICollectionVievSectionCell));
    exports.LeftMenuModuleViewSection = LeftMenuModuleViewSection;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/subMenu/leftMenuSubMenuCellController.ts":
/*!**************************************************************************!*\
  !*** ./src/controller/leftMenu/subMenu/leftMenuSubMenuCellController.ts ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/view/viewTemplates/selectionView */ "./src/model/view/viewTemplates/selectionView.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, selectionView_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuSubMenuCellController = void 0;
    var LeftMenuSubMenuCellController = /** @class */ (function (_super) {
        __extends(LeftMenuSubMenuCellController, _super);
        function LeftMenuSubMenuCellController(data, isSelected, id, html) {
            var _this = this;
            var newHtml = html;
            if (newHtml != undefined) {
                newHtml = newHtml.replace('$title', data.subMenuCell.name);
                newHtml = newHtml.replace('$imageUrl', data.subMenuCell.image);
            }
            _this = _super.call(this, isSelected, id, newHtml) || this;
            _this.leftDataId = data.id;
            return _this;
        }
        LeftMenuSubMenuCellController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        LeftMenuSubMenuCellController.prototype.setUp = function () {
            return this;
        };
        return LeftMenuSubMenuCellController;
    }(selectionView_1.SelectionView));
    exports.LeftMenuSubMenuCellController = LeftMenuSubMenuCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/leftMenu/subMenu/leftMenuSubMenuController.ts":
/*!**********************************************************************!*\
  !*** ./src/controller/leftMenu/subMenu/leftMenuSubMenuController.ts ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/leftMenu/subMenu/leftMenuSubMenuCellView */ "./src/view/leftMenu/subMenu/leftMenuSubMenuCellView.ts"), __webpack_require__(/*! ./leftMenuSubMenuCellController */ "./src/controller/leftMenu/subMenu/leftMenuSubMenuCellController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, insertView_1, view_1, leftMenuSubMenuCellView_1, leftMenuSubMenuCellController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LeftMenuSubMenuController = void 0;
    view_1 = __importDefault(view_1);
    var LeftMenuSubMenuController = /** @class */ (function (_super) {
        __extends(LeftMenuSubMenuController, _super);
        function LeftMenuSubMenuController() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LeftMenuSubMenuController.prototype.viewWasInserted = function () {
            this.setUp();
        };
        LeftMenuSubMenuController.prototype.setUp = function () {
            this.createCells();
            return this;
        };
        LeftMenuSubMenuController.prototype.createCells = function () {
            var _a;
            var cells = (_a = this.leftMenuDataInterface) === null || _a === void 0 ? void 0 : _a.getLeftMenuDataArrray();
            if (cells == undefined) {
                return;
            }
            for (var x = 0; x < cells.length; x++) {
                var current = cells[x];
                var cell = new leftMenuSubMenuCellController_1.LeftMenuSubMenuCellController(current, current.selected, current.subMenuCell.viewId, leftMenuSubMenuCellView_1.leftMenuSubMenuCellView);
                this.insertNewView(new insertView_1.InsertedViewData(cell.id, "leftMenuSubMenuHolder"));
                cell.selectedInterface = this;
            }
        };
        LeftMenuSubMenuController.prototype.viewWasSelected = function (view) {
            var _a, _b;
            // we set all the other views to false except for the clicked one.
            var cells = (_a = this.leftMenuDataInterface) === null || _a === void 0 ? void 0 : _a.getLeftMenuDataArrray();
            if (cells == undefined) {
                return;
            }
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                var cell = cells_1[_i];
                var mView = this.getView(cell.subMenuCell.viewId);
                cell.selected = false;
                if (cell.subMenuCell.viewId != view) {
                    mView.isSelected(false, false);
                    cell.selected = false;
                }
                else {
                    mView.isSelected(true, false);
                    cell.selected = true;
                    (_b = this.leftMenuDataInterface) === null || _b === void 0 ? void 0 : _b.subMenuSelected(cell);
                }
            }
            this.makeGridHolderBig();
        };
        LeftMenuSubMenuController.prototype.parentResized = function (name) {
            var _a;
            var cells = (_a = this.leftMenuDataInterface) === null || _a === void 0 ? void 0 : _a.getLeftMenuDataArrray();
            if (cells == undefined) {
                return;
            }
            for (var _i = 0, cells_2 = cells; _i < cells_2.length; _i++) {
                var cell = cells_2[_i];
                var view = this.getView(cell.subMenuCell.viewId);
                if (name == "small") {
                    view.isSelectedWasSet(false);
                }
                else {
                    view.isSelected(cell.selected, false);
                }
            }
        };
        LeftMenuSubMenuController.prototype.makeGridHolderBig = function () {
            // Check if the size of the grid holder is either big or small, if its small make it big.
            var gridHolderView = this.getView("leftMenuGridEl");
            var grid = this.getView("baseGrid");
            if (gridHolderView == undefined) {
                return;
            }
            if (gridHolderView.mResizeObserver.currentCondition == "small") {
                grid.gridDesing.columns[0].size = "350";
                grid.setDesign(grid.gridDesing);
            }
        };
        LeftMenuSubMenuController.prototype.finish = function () {
            _super.prototype.finish.call(this);
            this.leftMenuDataInterface = undefined;
        };
        return LeftMenuSubMenuController;
    }(view_1.default));
    exports.LeftMenuSubMenuController = LeftMenuSubMenuController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/logsView/ketsuLogsViewer.ts":
/*!****************************************************!*\
  !*** ./src/controller/logsView/ketsuLogsViewer.ts ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/ResizeObserver/mResizeObserver */ "./src/model/ResizeObserver/mResizeObserver.ts"), __webpack_require__(/*! ../../model/SocketsServer/logsParser */ "./src/model/SocketsServer/logsParser.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../view/bottomViews/KetsuLogsViewerController */ "./src/view/bottomViews/KetsuLogsViewerController.ts"), __webpack_require__(/*! ../../model/settingCells/jsLogsCellController */ "./src/model/settingCells/jsLogsCellController.ts"), __webpack_require__(/*! ../../model/settingCells/logsCellController */ "./src/model/settingCells/logsCellController.ts"), __webpack_require__(/*! ../../model/settingCells/sectionCellController */ "./src/model/settingCells/sectionCellController.ts"), __webpack_require__(/*! ../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, mResizeObserver_1, logsParser_1, insertView_1, view_1, KetsuLogsViewerController_1, jsLogsCellController_1, logsCellController_1, sectionCellController_1, settingsCellController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.KetsuLogsViewerController = void 0;
    mResizeObserver_1 = __importDefault(mResizeObserver_1);
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var KetsuLogsViewerController = /** @class */ (function (_super) {
        __extends(KetsuLogsViewerController, _super);
        function KetsuLogsViewerController(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = KetsuLogsViewerController_1.KetsuLogsViewerView; }
            var _this = _super.call(this, id, html) || this;
            _this.settingsController = "";
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            logsParser_1.LogsParser.shared.logsInterfaces[_this.id] = _this;
            return _this;
        }
        KetsuLogsViewerController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            this.resizeObserver = new mResizeObserver_1.default(new insertView_1.InsertedViewData(this.id, undefined), [{ name: "small", condition: function (newSize) {
                        if (newSize.blockSize <= 41) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    } },
                { name: "big", condition: function (newSize) {
                        if (newSize.blockSize >= 50 && newSize.inlineSize > 100) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    } },
                { name: "closed", condition: function (newSize) {
                        if (newSize.inlineSize <= 100) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    } }]);
            this.resizeObserver.interface = this;
            this.resizeObserver.triggerManually();
            (0, jquery_1.default)("[".concat(this.id, "] .button")).on('click', function (ev) {
                var _a;
                ev.preventDefault();
                ev.stopImmediatePropagation();
                if (_this.currentConditionName == "closed") {
                    (_a = window.mApp.views.get("logsGridController")) === null || _a === void 0 ? void 0 : _a.showKetsuLogs();
                }
                if (_this.currentConditionName == "small") {
                    window.mApp.views.get("baseGrid").setLogsViewSize(400);
                }
                if (_this.currentConditionName == "big") {
                    window.mApp.views.get("baseGrid").setLogsViewSize(40);
                }
            });
            this.setUp();
        };
        KetsuLogsViewerController.prototype.updateButton = function () {
            if (this.currentConditionName == "closed") {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", "./images/arrow-left.png");
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass('closed');
                return;
            }
            if (this.currentConditionName == "small") {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", "./images/arrow-top.png");
            }
            if (this.currentConditionName == "big") {
                (0, jquery_1.default)("[".concat(this.id, "] img")).attr("src", "./images/arrow-bottom.png");
                (0, jquery_1.default)("[".concat(this.id, "]")).removeClass('closed');
            }
        };
        KetsuLogsViewerController.prototype.setUp = function () {
            var _this = this;
            var _a;
            _super.prototype.setUp.call(this);
            this.deleteSubviews();
            var cells = [];
            for (var _i = 0, _b = logsParser_1.LogsParser.shared.logsOrder; _i < _b.length; _i++) {
                var section = _b[_i];
                var logsSection = logsParser_1.LogsParser.shared.logs[section];
                if (logsSection.length > 0) {
                    cells.push(new sectionCellController_1.SectionCellController(logsSection[0].section));
                }
                var _loop_1 = function (log) {
                    var cell = new KetsuLogsCell(log.action, function () {
                        var _a, _b, _c;
                        if (((_a = log.content) !== null && _a !== void 0 ? _a : "") == "") {
                            return;
                        }
                        logsParser_1.LogsParser.shared.logSelected({ sectionId: (_b = log.sectionId) !== null && _b !== void 0 ? _b : "", logId: log.id });
                        var settingsController = _this.getView(_this.settingsController);
                        (_c = settingsController.getCollectionView()) === null || _c === void 0 ? void 0 : _c.updateCellsWithoutRedrawing();
                    }, log.error, log.content != undefined, ((_a = logsParser_1.LogsParser.shared.selectedLog) === null || _a === void 0 ? void 0 : _a.logId) == log.id, log.content != undefined);
                    cell.logId = log.id;
                    cells.push(cell);
                };
                for (var _c = 0, logsSection_1 = logsSection; _c < logsSection_1.length; _c++) {
                    var log = logsSection_1[_c];
                    _loop_1(log);
                }
            }
            if (cells.length == 0) {
                cells.push(new jsLogsCellController_1.JSLogsCellController("Logs are empty.", false));
            }
            var settingsController = new settingsCellController_1.SettingsCellController(cells.map(function (cell) {
                return cell.id;
            }));
            this.settingsController = settingsController.id;
            settingsController.interceptCollectionView = function (cv) {
                cv.style({ "overflow-x": "hidden" });
            };
            this.insertNewView(new insertView_1.InsertedViewData(settingsController.id, undefined));
            (0, jquery_1.default)("[".concat(settingsController.id, "]")).addClass('bg-secondary');
            settingsController.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            return this;
        };
        KetsuLogsViewerController.prototype.logsUpdated = function () {
            this.setUp();
        };
        KetsuLogsViewerController.prototype.logSelected = function () {
        };
        KetsuLogsViewerController.prototype.resizeTriggered = function (condition) {
            this.currentConditionName = condition.name;
            this.updateButton();
        };
        KetsuLogsViewerController.prototype.resizeFinished = function (entry) {
        };
        KetsuLogsViewerController.prototype.observerFinished = function () {
        };
        KetsuLogsViewerController.prototype.finish = function () {
            var _a;
            (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.finished();
            this.resizeObserver = undefined;
            (0, jquery_1.default)("[".concat(this.id, "] .button")).off();
            delete logsParser_1.LogsParser.shared.logsInterfaces[this.id];
            _super.prototype.finish.call(this);
        };
        return KetsuLogsViewerController;
    }(view_1.default));
    exports.KetsuLogsViewerController = KetsuLogsViewerController;
    var KetsuLogsCell = /** @class */ (function (_super) {
        __extends(KetsuLogsCell, _super);
        function KetsuLogsCell() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.logId = "";
            return _this;
        }
        KetsuLogsCell.prototype.cellWasReloadedWithoutRedrawing = function () {
            var _a;
            _super.prototype.cellWasReloadedWithoutRedrawing.call(this);
            if (((_a = logsParser_1.LogsParser.shared.selectedLog) === null || _a === void 0 ? void 0 : _a.logId) == this.logId) {
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass("selected");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).removeClass("selected");
            }
        };
        return KetsuLogsCell;
    }(logsCellController_1.LogsCellController));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/logsView/logsGridController.ts":
/*!*******************************************************!*\
  !*** ./src/controller/logsView/logsGridController.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/grid */ "./src/model/grid/grid.ts"), __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../../model/grid/gridInterfaces */ "./src/model/grid/gridInterfaces.ts"), __webpack_require__(/*! ../../model/grid/separator/verticalSeparator */ "./src/model/grid/separator/verticalSeparator.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../view/baseGrid/baseGridSeparatorView */ "./src/view/baseGrid/baseGridSeparatorView.ts"), __webpack_require__(/*! ../../view/baseGrid/baseGridView */ "./src/view/baseGrid/baseGridView.ts"), __webpack_require__(/*! ./ketsuLogsViewer */ "./src/controller/logsView/ketsuLogsViewer.ts"), __webpack_require__(/*! ./logsViewer/logsViewerHolderController */ "./src/controller/logsView/logsViewer/logsViewerHolderController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, grid_1, gridElement_1, gridInterfaces_1, verticalSeparator_1, insertView_1, baseGridSeparatorView_1, baseGridView_1, ketsuLogsViewer_1, logsViewerHolderController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LogsGridController = void 0;
    grid_1 = __importDefault(grid_1);
    verticalSeparator_1 = __importDefault(verticalSeparator_1);
    var LogsGridController = /** @class */ (function (_super) {
        __extends(LogsGridController, _super);
        function LogsGridController(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = baseGridView_1.viewBaseGridHtml; }
            return _super.call(this, id, html) || this;
        }
        LogsGridController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        LogsGridController.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            // create and add all the elements
            var elements = [
                new gridElement_1.GridElementWithView(new ketsuLogsViewer_1.KetsuLogsViewerController().id, 'rightLogs'),
                new verticalSeparator_1.default('VSBL', baseGridSeparatorView_1.viewBaseGridVSeparator),
                new gridElement_1.GridElementWithView(new logsViewerHolderController_1.LogsViewerHolderController("LogsViewerHolderController").id, 'leftLogs'),
            ];
            this.gridElements = elements.map(function (el) {
                // this draws all the elements and ads their ids
                _this.insertNewView(new insertView_1.InsertedViewData(el.id, undefined));
                return el.id;
            });
            this.gridDistribution = [
                ["leftLogs", "VSBL", "rightLogs"]
            ];
            this.gridDesing = {
                columns: [
                    new gridInterfaces_1.GridElementDesign("auto", "", true, [], { min: 300, max: 99999999 }),
                    new gridInterfaces_1.GridElementDesign("1", "px", false),
                    new gridInterfaces_1.GridElementDesign("350", "px", true, [{ resize: 40, range: { from: 0, to: 150 } }, { resize: 350, range: { from: 150, to: 350 } }], { min: 0, max: 400 })
                ],
                rows: [new gridInterfaces_1.GridElementDesign("1", "fr", false)]
            };
            this.setDesign(this.gridDesing);
            this.setDistribution(this.gridDistribution);
            return this;
        };
        LogsGridController.prototype.showKetsuLogs = function () {
            this.gridDesing.columns[2].size = "350";
            this.setDesign(this.gridDesing);
        };
        return LogsGridController;
    }(grid_1.default));
    exports.LogsGridController = LogsGridController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/logsView/logsViewer/currentLog.ts":
/*!**********************************************************!*\
  !*** ./src/controller/logsView/logsViewer/currentLog.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/SocketsServer/logsParser */ "./src/model/SocketsServer/logsParser.ts"), __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ../../../model/settingCells/jsLogsCellController */ "./src/model/settingCells/jsLogsCellController.ts"), __webpack_require__(/*! ../../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, logsParser_1, insertView_1, view_1, basicHtml_1, jsLogsCellController_1, settingsCellController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.CurrentLog = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var CurrentLog = /** @class */ (function (_super) {
        __extends(CurrentLog, _super);
        function CurrentLog(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, id, html) || this;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            logsParser_1.LogsParser.shared.logsInterfaces[_this.id] = _this;
            return _this;
        }
        CurrentLog.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "]")).addClass("bg-primary");
            this.setUp();
        };
        CurrentLog.prototype.setUp = function () {
            var _a, _b;
            _super.prototype.setUp.call(this);
            this.deleteSubviews();
            var log = logsParser_1.LogsParser.shared.getLog((_a = logsParser_1.LogsParser.shared.selectedLog) !== null && _a !== void 0 ? _a : { logId: "", sectionId: "" });
            var cells = [];
            if (log == undefined) {
                cells.push(new jsLogsCellController_1.JSLogsCellController("No log selected.", false));
            }
            else {
                cells.push(new jsLogsCellController_1.JSLogsCellController((_b = log.content) !== null && _b !== void 0 ? _b : "", log.error));
            }
            var settingsController = new settingsCellController_1.SettingsCellController(cells.map(function (cell) {
                return cell.id;
            }));
            settingsController.interceptCollectionView = function (cv) {
                cv.style({ "overflow-x": "hidden" });
            };
            this.insertNewView(new insertView_1.InsertedViewData(settingsController.id, undefined));
            (0, jquery_1.default)("[".concat(settingsController.id, "]")).addClass('bg-primary');
            settingsController.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            return this;
        };
        CurrentLog.prototype.logsUpdated = function () {
            this.setUp();
        };
        CurrentLog.prototype.logSelected = function () {
            this.setUp();
        };
        CurrentLog.prototype.finish = function () {
            delete logsParser_1.LogsParser.shared.logsInterfaces[this.id];
            _super.prototype.finish.call(this);
        };
        return CurrentLog;
    }(view_1.default));
    exports.CurrentLog = CurrentLog;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/logsView/logsViewer/jsLogs.ts":
/*!******************************************************!*\
  !*** ./src/controller/logsView/logsViewer/jsLogs.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/SocketsServer/logsParser */ "./src/model/SocketsServer/logsParser.ts"), __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ../../../model/settingCells/jsLogsCellController */ "./src/model/settingCells/jsLogsCellController.ts"), __webpack_require__(/*! ../../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, logsParser_1, insertView_1, view_1, basicHtml_1, jsLogsCellController_1, settingsCellController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.JSLogs = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var JSLogs = /** @class */ (function (_super) {
        __extends(JSLogs, _super);
        function JSLogs(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, id, html) || this;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            logsParser_1.LogsParser.shared.logsInterfaces[_this.id] = _this;
            return _this;
        }
        JSLogs.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        JSLogs.prototype.setUp = function () {
            var _a;
            _super.prototype.setUp.call(this);
            this.deleteSubviews();
            var cells = [];
            var lastLogs = logsParser_1.LogsParser.shared.logs[logsParser_1.LogsParser.shared.logsOrder[0]];
            var current = 0;
            for (var _i = 0, _b = lastLogs !== null && lastLogs !== void 0 ? lastLogs : []; _i < _b.length; _i++) {
                var log = _b[_i];
                if (log.action == "Javascript Logs") {
                    current += 1;
                    var parsed = JSON.parse((_a = log.content) !== null && _a !== void 0 ? _a : "[]");
                    if (parsed.length > 0) {
                        cells.push(new jsLogsCellController_1.JSLogsCellController("".concat(current, ". Logs:")));
                    }
                    for (var _c = 0, parsed_1 = parsed; _c < parsed_1.length; _c++) {
                        var jsLog = parsed_1[_c];
                        console.log(jsLog["value"]);
                        if (jsLog["value"] == "" || jsLog["value"] == undefined) {
                            continue;
                        }
                        cells.push(new jsLogsCellController_1.JSLogsCellController(jsLog["value"], jsLog["type"] == "error"));
                    }
                }
            }
            if (cells.length == 0) {
                cells.push(new jsLogsCellController_1.JSLogsCellController("No javascript logs were found.", false));
            }
            var settingsController = new settingsCellController_1.SettingsCellController(cells.map(function (cell) {
                return cell.id;
            }));
            this.collectionView = settingsController.id;
            settingsController.interceptCollectionView = function (cv) {
                cv.style({ "overflow-x": "hidden" });
            };
            this.insertNewView(new insertView_1.InsertedViewData(settingsController.id, undefined));
            (0, jquery_1.default)("[".concat(settingsController.id, "]")).addClass('bg-primary');
            settingsController.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            return this;
        };
        JSLogs.prototype.logsUpdated = function () {
            this.setUp();
            var settingsCV = this.getView(this.collectionView);
            var cv = settingsCV === null || settingsCV === void 0 ? void 0 : settingsCV.getCollectionView();
            console.log(cv);
            cv === null || cv === void 0 ? void 0 : cv.scrollTo({ section: 0, item: settingsCV.cells.length - 1 });
        };
        JSLogs.prototype.logSelected = function () {
        };
        JSLogs.prototype.finish = function () {
            _super.prototype.finish.call(this);
            delete logsParser_1.LogsParser.shared.logsInterfaces[this.id];
        };
        return JSLogs;
    }(view_1.default));
    exports.JSLogs = JSLogs;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/logsView/logsViewer/logsViewerHolderController.ts":
/*!**************************************************************************!*\
  !*** ./src/controller/logsView/logsViewer/logsViewerHolderController.ts ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/menuSelector/ menuSelector */ "./src/model/menuSelector/ menuSelector.ts"), __webpack_require__(/*! ../../../model/menuSelector/menuSelectorLayout */ "./src/model/menuSelector/menuSelectorLayout.ts"), __webpack_require__(/*! ../../../model/SocketsServer/logsParser */ "./src/model/SocketsServer/logsParser.ts"), __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ./currentLog */ "./src/controller/logsView/logsViewer/currentLog.ts"), __webpack_require__(/*! ./jsLogs */ "./src/controller/logsView/logsViewer/jsLogs.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, _menuSelector_1, menuSelectorLayout_1, logsParser_1, insertView_1, view_1, basicHtml_1, currentLog_1, jsLogs_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LogsViewerHolderController = void 0;
    view_1 = __importDefault(view_1);
    var LogsMenuSelectorLayout = /** @class */ (function (_super) {
        __extends(LogsMenuSelectorLayout, _super);
        function LogsMenuSelectorLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LogsMenuSelectorLayout.prototype.styleCellsHolder = function (view) {
            view.style({
                "line-height": "1",
                "box-sizing": "border-box",
                "border-bottom": "1px solid rgba(255,255,255,.1)",
                "padding-left": "0.5rem",
                "background-color": "#262626"
            });
        };
        return LogsMenuSelectorLayout;
    }(menuSelectorLayout_1.MenuSelectorLayout2));
    var LogsViewerHolderController = /** @class */ (function (_super) {
        __extends(LogsViewerHolderController, _super);
        function LogsViewerHolderController(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, id, html) || this;
            logsParser_1.LogsParser.shared.logsInterfaces[_this.id] = _this;
            return _this;
        }
        LogsViewerHolderController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        LogsViewerHolderController.prototype.setUp = function () {
            var _a;
            _super.prototype.setUp.call(this);
            if (this.menuSelector == undefined) {
                (_a = this.getView(this.menuSelector)) === null || _a === void 0 ? void 0 : _a.finish();
            }
            var view1 = new jsLogs_1.JSLogs();
            view1.viewName = "JS Logs";
            var view3 = new currentLog_1.CurrentLog();
            view3.viewName = "Selected Log";
            var menuSelector = new _menuSelector_1.MenuSelctor(window.mApp.utils.makeId(15), [view1.id, view3.id]);
            this.menuSelector = menuSelector.id;
            menuSelector.interface = this;
            menuSelector.layout = new LogsMenuSelectorLayout();
            this.insertNewView(new insertView_1.InsertedViewData(menuSelector.id));
            menuSelector.selectByViewName("JS Logs");
            menuSelector.setConstraints({ top: "0px", right: "0px", left: "0px", bottom: "0px" });
            return this;
        };
        LogsViewerHolderController.prototype.menuSelectorWasSelected = function (viewId) {
            if (this.getSize().height == 40) {
                window.mApp.views.get("baseGrid").setLogsViewSize(400);
            }
        };
        LogsViewerHolderController.prototype.showJSLogs = function () {
            var menu = this.getView(this.menuSelector);
            menu.selectByViewName("JS Logs");
        };
        LogsViewerHolderController.prototype.showCurrentLog = function () {
            var menu = this.getView(this.menuSelector);
            menu.selectByViewName("Selected Log");
        };
        LogsViewerHolderController.prototype.logsUpdated = function () {
        };
        LogsViewerHolderController.prototype.logSelected = function () {
            this.showCurrentLog();
        };
        LogsViewerHolderController.prototype.finish = function () {
            delete logsParser_1.LogsParser.shared.logsInterfaces[this.id];
            _super.prototype.finish.call(this);
        };
        return LogsViewerHolderController;
    }(view_1.default));
    exports.LogsViewerHolderController = LogsViewerHolderController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/navBar/navBar.ts":
/*!*****************************************!*\
  !*** ./src/controller/navBar/navBar.ts ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/grid/gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! ../../view/centerViews/navBar */ "./src/view/centerViews/navBar.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, gridElement_1, navBar_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.NavBar = void 0;
    gridElement_1 = __importDefault(gridElement_1);
    jquery_1 = __importDefault(jquery_1);
    var NavBar = /** @class */ (function (_super) {
        __extends(NavBar, _super);
        function NavBar(id, html) {
            if (html === void 0) { html = navBar_1.navBarView; }
            var _this = _super.call(this, id, html) || this;
            window.mApp.moduleManager.moduleViewsExecutor[_this.id] = _this;
            return _this;
        }
        NavBar.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .save")).off().on('click', function (ev) {
                ev.preventDefault();
                ev.stopImmediatePropagation();
                window.mApp.moduleManager.saveModuleToLocalStorage();
                (0, jquery_1.default)("[".concat(_this.id, "] .save .test-button")).text('Saved ✓');
                setTimeout(function () {
                    (0, jquery_1.default)("[".concat(_this.id, "] .save .test-button")).text('Save');
                }, 1000);
            });
            (0, jquery_1.default)("[".concat(this.id, "] .export")).off().on('click', function (ev) {
                ev.preventDefault();
                ev.stopImmediatePropagation();
                window.mApp.moduleManager.saveModuleToLocalStorage();
                window.mApp.moduleManager.exportModule();
            });
        };
        NavBar.prototype.moduleLoaded = function () {
        };
        NavBar.prototype.moduleProjectNameChanged = function () {
        };
        NavBar.prototype.moduleAutoSaved = function () {
            var _this = this;
            (0, jquery_1.default)("[".concat(this.id, "] .save .test-button")).text('Auto Saved ✓');
            setTimeout(function () {
                (0, jquery_1.default)("[".concat(_this.id, "] .save .test-button")).text('Save');
            }, 1000);
        };
        NavBar.prototype.finish = function () {
            delete window.mApp.moduleManager.moduleViewsExecutor[this.id];
            _super.prototype.finish.call(this);
        };
        return NavBar;
    }(gridElement_1.default));
    exports.NavBar = NavBar;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/paramsController/paramsController.ts":
/*!*************************************************************!*\
  !*** ./src/controller/paramsController/paramsController.ts ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/settingCells/paramEditorCellController */ "./src/model/settingCells/paramEditorCellController.ts"), __webpack_require__(/*! ../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ../routeView/routeViewController */ "./src/controller/routeView/routeViewController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, paramEditorCellController_1, settingsCellController_1, insertView_1, view_1, basicHtml_1, routeViewController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ParamsContoller = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var ParamsContoller = /** @class */ (function (_super) {
        __extends(ParamsContoller, _super);
        function ParamsContoller(jsonId, html) {
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, window.mApp.utils.makeId(), html) || this;
            _this.settingsController = "";
            _this.setInsertDefaultViews();
            _this.jsonId = jsonId;
            return _this;
        }
        ParamsContoller.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        ParamsContoller.prototype.setUp = function () {
            var _a;
            _super.prototype.setUp.call(this);
            var routeView = new routeViewController_1.RouteViewController(window.mApp.utils.makeId(15), this.jsonId);
            this.insertNewView(new insertView_1.InsertedViewData(routeView.id));
            routeView.setConstraints({ top: "0px", right: "0px", left: "0px", height: "40px" });
            var cells = [];
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var object = moduleData === null || moduleData === void 0 ? void 0 : moduleData.getObject();
            var options = window.mApp.moduleManager.getModuleOptions();
            if (object == undefined) {
                return this;
            }
            if ((moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath[0]) == 'moduleInfo') {
                cells.push(new paramEditorCellController_1.ParamEditorCellController("Project Name", undefined, (_a = options["projectName"]) !== null && _a !== void 0 ? _a : "", false, function (value) {
                    options["projectName"] = value;
                    Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach(function (el) {
                        var _a;
                        (_a = el.moduleProjectNameChanged) === null || _a === void 0 ? void 0 : _a.call(el);
                    });
                }, function () {
                }));
            }
            var current = 0;
            var _loop_1 = function (key, value) {
                //console.log(`${key} ${value}`); 
                if (key.includes('moduleCreator')) {
                    return "continue";
                }
                var mValue = undefined;
                console.log(typeof value);
                if (typeof value == 'boolean') {
                    mValue = value;
                }
                if (typeof value == 'string') {
                    mValue = value;
                }
                if (Array.isArray(value)) {
                    var parsedArray = Array.from(value);
                    if (parsedArray.length > 0) {
                        if (typeof parsedArray[0] == 'string') {
                            mValue = parsedArray;
                        }
                    }
                    else {
                        mValue = [];
                    }
                }
                if (typeof value == 'number') {
                    mValue = Number(value);
                }
                if (mValue == undefined) {
                    return "continue";
                }
                cells.push(new paramEditorCellController_1.ParamEditorCellController(key, undefined, mValue, current % 2 != 1, function (value) {
                    object[key] = value;
                }, function () {
                }));
                current += 1;
            };
            for (var _i = 0, _b = Object.entries(object); _i < _b.length; _i++) {
                var _c = _b[_i], key = _c[0], value = _c[1];
                _loop_1(key, value);
            }
            var cellsIds = cells.map(function (el) { return el.id; });
            var settingsController = new settingsCellController_1.SettingsCellController(cellsIds);
            settingsController.interceptCollectionView = function (cv) {
                (0, jquery_1.default)("[".concat(cv.grid.getTag(), "]")).addClass('border-bottom');
            };
            this.settingsController = settingsController.id;
            this.insertNewView(new insertView_1.InsertedViewData(settingsController.id));
            settingsController.setConstraints({ top: "40px", right: "0px", left: "0px", bottom: "0px" });
            return this;
        };
        return ParamsContoller;
    }(view_1.default));
    exports.ParamsContoller = ParamsContoller;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/popUpControllers/connectSocketController.ts":
/*!********************************************************************!*\
  !*** ./src/controller/popUpControllers/connectSocketController.ts ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/SocketsServer/SocketsConnectionHandler */ "./src/model/SocketsServer/SocketsConnectionHandler.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../model/view/viewTemplates/stateManagerController */ "./src/model/view/viewTemplates/stateManagerController.ts"), __webpack_require__(/*! ../../view/popUpViews/ConnectSocketView */ "./src/view/popUpViews/ConnectSocketView.ts"), __webpack_require__(/*! spin.js */ "./node_modules/spin.js/spin.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SocketsConnectionHandler_1, insertView_1, view_1, stateManagerController_1, ConnectSocketView_1, spin_js_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ConnectSocketController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var ConnectSocketController = /** @class */ (function (_super) {
        __extends(ConnectSocketController, _super);
        function ConnectSocketController() {
            var _this = _super.call(this, undefined, ConnectSocketView_1.viewConnectSocket) || this;
            _this.spinnerOptions = {
                lines: 9,
                length: 38,
                width: 17,
                radius: 45,
                scale: 0.1,
                corners: 1,
                speed: 1,
                rotate: 0,
                animation: 'spinner-line-fade-quick',
                direction: 1,
                color: '#ffffff',
                fadeColor: 'transparent',
                top: '50%',
                left: '50%', // Left position relative to parent
            };
            window.mApp.sockets.socketsConnectionInterfaces[_this.id] = _this;
            return _this;
        }
        ConnectSocketController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            var stateManagerCont = new stateManagerController_1.StateManagerController("App Connection", { finished: function () {
                    _this.finish();
                } });
            var el = document.querySelector("[".concat(this.id, "] .loading"));
            if (el != undefined) {
                this.spinner = new spin_js_1.Spinner(this.spinnerOptions).spin(el);
            }
            var ivd = new insertView_1.InsertedViewData(stateManagerCont.id, "$idstatemanager");
            this.insertNewView(ivd);
            stateManagerCont.clipToParent();
            // alksdjfañlksdj
            if (window.mApp.sockets.connectionStatus == SocketsConnectionHandler_1.serverConnectionStatus.connected) {
                this.connectionEnabled();
            }
            else {
                this.connectionFailed();
            }
            (0, jquery_1.default)("[".concat(this.id, "] .loading")).css({ "display": "none" });
            (0, jquery_1.default)("[".concat(this.id, "] .connect-button")).off().on('click', function (ev) {
                var _a;
                ev.preventDefault();
                ev.stopImmediatePropagation();
                var value = "".concat((_a = (0, jquery_1.default)("[".concat(_this.id, "] input")).val()) !== null && _a !== void 0 ? _a : "");
                window.mApp.sockets.setUp(value);
                (0, jquery_1.default)("[".concat(_this.id, "] .elem-padding-wider")).text("Retry");
                (0, jquery_1.default)("[".concat(_this.id, "] .loading")).css({ "display": "" });
            });
            (0, jquery_1.default)("[".concat(this.id, "] input")).val(window.mApp.sockets.getCurrentIp());
        };
        ConnectSocketController.prototype.connectionEnabled = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .loading")).css({ "display": "none" });
            (0, jquery_1.default)("[".concat(this.id, "] .elem-padding-wider")).text("connected");
            (0, jquery_1.default)("[".concat(this.id, "] .status-image")).attr({ "src": window.mApp.utils.getImageUrl("connected.png") });
            (0, jquery_1.default)("[".concat(this.id, "] .status-image")).css({ "filter": "invert(73%) sepia(14%) saturate(1264%) hue-rotate(77deg) brightness(97%) contrast(87%)" });
        };
        ConnectSocketController.prototype.connectionFailed = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .loading")).css({ "display": "none" });
            (0, jquery_1.default)("[".concat(this.id, "] .elem-padding-wider")).text("Connect");
            (0, jquery_1.default)("[".concat(this.id, "] .status-image")).attr({ "src": window.mApp.utils.getImageUrl("disconnected.png") });
            (0, jquery_1.default)("[".concat(this.id, "] .status-image")).css({ "filter": "invert(78%) sepia(45%) saturate(7450%) hue-rotate(321deg) brightness(86%) contrast(102%)" });
        };
        ConnectSocketController.prototype.finish = function () {
            this.spinner.stop();
            delete window.mApp.sockets.socketsConnectionInterfaces[this.id];
            (0, jquery_1.default)("[".concat(this.id, "] .connect-button")).off();
            _super.prototype.finish.call(this);
        };
        return ConnectSocketController;
    }(view_1.default));
    exports.ConnectSocketController = ConnectSocketController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/popUpControllers/newProjectController.ts":
/*!*****************************************************************!*\
  !*** ./src/controller/popUpControllers/newProjectController.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../model/view/viewTemplates/stateManagerController */ "./src/model/view/viewTemplates/stateManagerController.ts"), __webpack_require__(/*! ../../view/popUpViews/newProjectView */ "./src/view/popUpViews/newProjectView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, insertView_1, view_1, stateManagerController_1, newProjectView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.NewProjectController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var NewProjectController = /** @class */ (function (_super) {
        __extends(NewProjectController, _super);
        function NewProjectController(html) {
            if (html === void 0) { html = newProjectView_1.newProjectView; }
            var _this = _super.call(this, window.mApp.utils.makeId(), html) || this;
            _this.canExit = true;
            return _this;
        }
        NewProjectController.prototype.disableExit = function () {
            this.canExit = false;
        };
        NewProjectController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .create-button")).on('click', function () {
                var _a;
                var value = (_a = (0, jquery_1.default)("[".concat(_this.id, "] input")).val()) !== null && _a !== void 0 ? _a : "";
                if (value == "") {
                    return;
                }
                window.mApp.moduleManager.loadNewModule(window.mApp.moduleManager.getDefaultModule(), value);
                _this.finish();
            });
            var stateManagerCont = new stateManagerController_1.StateManagerController("New Project", { finished: function () {
                    _this.finish();
                } });
            if (!this.canExit) {
                stateManagerCont.disableExit();
            }
            var ivd = new insertView_1.InsertedViewData(stateManagerCont.id, "$idstatemanager");
            this.insertNewView(ivd);
            stateManagerCont.clipToParent();
        };
        NewProjectController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .create-button")).off();
            _super.prototype.finish.call(this);
        };
        return NewProjectController;
    }(view_1.default));
    exports.NewProjectController = NewProjectController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/dataRequestController/dataRequestController.ts":
/*!***********************************************************************************!*\
  !*** ./src/controller/requestView/dataRequestController/dataRequestController.ts ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/dropDownMenu/dropDown */ "./src/model/dropDownMenu/dropDown.ts"), __webpack_require__(/*! ../../../model/dropDownMenu/dropDownCell */ "./src/model/dropDownMenu/dropDownCell.ts"), __webpack_require__(/*! ../../../model/elementModalView/elementModalView */ "./src/model/elementModalView/elementModalView.ts"), __webpack_require__(/*! ../../../model/menuSelector/ menuSelector */ "./src/model/menuSelector/ menuSelector.ts"), __webpack_require__(/*! ../../../model/menuSelector/menuSelectorLayout */ "./src/model/menuSelector/menuSelectorLayout.ts"), __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/centerViews/dataRequestControllerView */ "./src/view/centerViews/dataRequestControllerView.ts"), __webpack_require__(/*! ./headersView */ "./src/controller/requestView/dataRequestController/headersView.ts"), __webpack_require__(/*! ./httpBodyView */ "./src/controller/requestView/dataRequestController/httpBodyView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ../../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! ../../../model/settingCells/paramEditorCellController */ "./src/model/settingCells/paramEditorCellController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, dropDown_1, dropDownCell_1, elementModalView_1, _menuSelector_1, menuSelectorLayout_1, insertView_1, view_1, dataRequestControllerView_1, headersView_1, httpBodyView_1, jquery_1, settingsCellController_1, paramEditorCellController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.DataRequestController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var DataRequestController = /** @class */ (function (_super) {
        __extends(DataRequestController, _super);
        function DataRequestController(id, jsonId, html) {
            var _this = _super.call(this, id, html) || this;
            _this.jsonId = "";
            _this.jsonId = jsonId;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        DataRequestController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        DataRequestController.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            //let notification  = new NotificationView({message : `- This is a notification, this notification explains certain importan t stuff about differet things<br>- I dont know what to put on this line but its very important that is long afs.`})
            //this.insertNewView( new InsertedViewData(notification.id, new InsertedViewData(this.id,"$idnotification").getTag() ));
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var moudleObject = moduleData.getObject();
            this.setMethod(moudleObject.request.method);
            (0, jquery_1.default)("[".concat(this.id, "] #requesttype")).off().on('click', function (el) {
                el.preventDefault();
                el.stopImmediatePropagation();
                var modal = new dropDown_1.DropDown();
                var requestMethods = ["GET", "POST", "HEAD", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH"];
                requestMethods.forEach(function (method) {
                    var dropDownCell = new dropDownCell_1.DefaultDropDownCell(method, undefined, undefined, true, dataRequestControllerView_1.viewDropDownRequestType);
                    dropDownCell.viewWasInsertedCallback = function (id) {
                        (0, jquery_1.default)("[".concat(id, "]")).addClass(["bg-t-contrary-hover"]);
                    };
                    modal.addCell(dropDownCell, function (index, dropwDown) {
                        dropwDown.finish();
                        _this.setMethod(method);
                    });
                });
                modal.insertInto(new insertView_1.InsertedViewData(undefined, "body"));
                modal.setUpWithElement(0, 10, elementModalView_1.ElementModalPos.center, elementModalView_1.ElemModalDirection.bottom, el.target, (0, jquery_1.default)(el.target).width());
            });
            (0, jquery_1.default)("[".concat(this.id, "] .request-input")).val(moudleObject.request.url);
            (0, jquery_1.default)("[".concat(this.id, "] .request-input")).off().on("input", function (ev) {
                var _a;
                _this.setUrl((_a = (0, jquery_1.default)("[".concat(_this.id, "] .request-input")).val()) !== null && _a !== void 0 ? _a : "");
            });
            this.setUpSubViews();
            return this;
        };
        DataRequestController.prototype.setUpSubViews = function () {
            var view1 = new headersView_1.HeadersView(this.jsonId);
            view1.viewName = "Headers";
            var view3 = new httpBodyView_1.HttpBodyView(this.jsonId);
            view3.viewName = "Http Body";
            var views = [view1.id, view3.id];
            var search = this.getSearchSettings();
            if (search != undefined) {
                views.push(search);
            }
            var menuSelector = new _menuSelector_1.MenuSelctor(window.mApp.utils.makeId(15), views);
            menuSelector.interface = this;
            menuSelector.layout = new menuSelectorLayout_1.MenuSelectorLayout2();
            this.insertNewView(new insertView_1.InsertedViewData(menuSelector.id));
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var options = moduleData.getOptions();
            menuSelector.selectByViewName(options["openedRequestMenu"]);
            menuSelector.setConstraints({ top: "0px", right: "0px", left: "0px", bottom: "0px" });
        };
        DataRequestController.prototype.getSearchSettings = function () {
            var _a;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var moduleObject = moduleData.getObject();
            if ((moduleObject === null || moduleObject === void 0 ? void 0 : moduleObject.separator) == undefined) {
                return undefined;
            }
            if (moduleData.jsonPath.length < 2) {
                return undefined;
            }
            if (moduleData.jsonPath[0] == "search" && moduleData.jsonPath[1] == '0') {
                var settingsController_1 = new settingsCellController_1.SettingsCellController([
                    new paramEditorCellController_1.ParamEditorCellController("Searched Separator", undefined, (_a = moduleObject["separator"]) !== null && _a !== void 0 ? _a : "", false, function (value) {
                        moduleObject["separator"] = value;
                    }, function () {
                    }).id
                ]);
                settingsController_1.viewName = "Search Parameters";
                settingsController_1.viewWasInsertedCallback = function () {
                    (0, jquery_1.default)("[".concat(settingsController_1.id, "]")).addClass('bg-primary');
                };
                settingsController_1.interceptCollectionView = function (cv) {
                    (0, jquery_1.default)("[".concat(cv.grid.getTag(), "]")).addClass('border-bottom');
                };
                return settingsController_1.id;
            }
            return undefined;
        };
        DataRequestController.prototype.setMethod = function (method) {
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var moudleObject = moduleData.getObject();
            moudleObject.request.method = method;
            (0, jquery_1.default)("[".concat(this.id, "] #requesttype")).text(method.toUpperCase());
        };
        DataRequestController.prototype.setUrl = function (url) {
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var moudleObject = moduleData.getObject();
            moudleObject.request.url = url;
        };
        DataRequestController.prototype.menuSelectorWasSelected = function (viewId) {
            var _a, _b;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var options = moduleData.getOptions();
            options["openedRequestMenu"] = (_b = (_a = this.getView(viewId)) === null || _a === void 0 ? void 0 : _a.viewName) !== null && _b !== void 0 ? _b : "";
        };
        DataRequestController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "] #requesttype")).off();
            (0, jquery_1.default)("[".concat(this.id, "] .request-input")).off();
            _super.prototype.finish.call(this);
        };
        return DataRequestController;
    }(view_1.default));
    exports.DataRequestController = DataRequestController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/dataRequestController/headersView.ts":
/*!*************************************************************************!*\
  !*** ./src/controller/requestView/dataRequestController/headersView.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/centerViews/headersView */ "./src/view/centerViews/headersView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, insertView_1, view_1, headersView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.HeadersView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var HeadersView = /** @class */ (function (_super) {
        __extends(HeadersView, _super);
        function HeadersView(jsonId, html) {
            if (html === void 0) { html = headersView_1.viewHtmlHeaders; }
            var _this = _super.call(this, "headersView".concat(window.mApp.utils.makeId(15)), html) || this;
            _this.headers = new Map();
            _this.jsonId = jsonId;
            _this.headersTable = new insertView_1.InsertedViewData(_this.id, "$idheadersTable");
            return _this;
        }
        HeadersView.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        HeadersView.prototype.fixHeaders = function () {
            var _this = this;
            // in case there is no headers or there is a header between that is empty or that there is no empty header at the end.
            var keys = Array.from(this.headers.keys());
            if (keys.length <= 0 || this.headers == undefined) {
                this.headers.set(window.mApp.utils.makeId(15), { key: "", value: "", moduleCreatorHeaderisActive: true });
            }
            var deleteHeaders = [];
            for (var x = 0; x < keys.length; x++) {
                var headerKey = keys[x];
                var header = this.headers.get(headerKey);
                if (header == undefined) {
                    continue;
                }
                if (x != keys.length - 1 && header.key == "" && header.value == "") {
                    deleteHeaders.push(headerKey);
                }
            }
            deleteHeaders.forEach(function (string) {
                _this.headers.delete(string);
                _this.removeListeners(string);
            });
            keys = Array.from(this.headers.keys());
            var last = this.headers.get(keys[keys.length - 1]);
            if (last == undefined || last.key != "" || last.value != "") {
                this.headers.set(window.mApp.utils.makeId(15), { key: "", value: "", moduleCreatorHeaderisActive: true });
            }
        };
        HeadersView.prototype.drawHeaders = function () {
            var htmlString = "\n            <tr>\n            <td>\n                <div  class=\"key-holder\"> \n                    <div class=\"checkbox-holder\"> \n\n                    <input $id  type='checkbox' class=\"ignore center-absolute checkbox\" checked >\n                    </div>\n                    <div class=\"relative\"> \n                        <input $id class=\"input-header-key header-input\" placeholder=\"Key\">\n                    </div>\n                </div>\n            </td>\n            <td class=\"relative\">\n                <input $id class=\"input-header-value header-input\" placeholder=\"Value\">\n            </td>\n            </tr>\n        ";
            var finalHtml = '<tr> <th> <div class="key-holder"> <div class="checkbox-holder"> </div> <div class="relative elem-padding-equal-wide-only center-v-flex"> Key </div> </div> </th> <th class="elem-padding-equal-wide-only">Value</th> </tr> <tr>';
            var keys = Array.from(this.headers.keys());
            for (var x = 0; x < keys.length; x++) {
                var headerKey = keys[x];
                this.removeListeners(headerKey);
                finalHtml += htmlString.split("$id").join(headerKey);
            }
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(this.headersTable.getTag(), "]")).html(finalHtml);
            for (var x = 0; x < keys.length; x++) {
                var headerKey = keys[x];
                var header = this.headers.get(headerKey);
                if (header == undefined) {
                    continue;
                }
                this.addListenersToInput(headerKey, header);
            }
        };
        HeadersView.prototype.addListenersToInput = function (headerKey, header) {
            var _this = this;
            var _a, _b;
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-key")).val((_a = header === null || header === void 0 ? void 0 : header.key) !== null && _a !== void 0 ? _a : "");
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-value")).val((_b = header === null || header === void 0 ? void 0 : header.value) !== null && _b !== void 0 ? _b : "");
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].checkbox")).prop('checked', header.moduleCreatorHeaderisActive);
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].checkbox")).off().on('click', function (el) {
                header.moduleCreatorHeaderisActive = (0, jquery_1.default)(el.target).is(':checked');
            });
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-key")).off().on('blur', function (el) {
                var _a;
                var selected = _this.headers.get(headerKey);
                if (selected != undefined) {
                    selected.key = (_a = (0, jquery_1.default)(el.target).val()) !== null && _a !== void 0 ? _a : "";
                }
                _this.fixHeaders();
                _this.drawHeaders();
                _this.updateModuleHeaders();
            });
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-value")).off().on('blur', function (el) {
                var _a;
                var selected = _this.headers.get(headerKey);
                if (selected != undefined) {
                    selected.value = (_a = (0, jquery_1.default)(el.target).val()) !== null && _a !== void 0 ? _a : "";
                }
                _this.fixHeaders();
                _this.drawHeaders();
                _this.updateModuleHeaders();
            });
        };
        HeadersView.prototype.removeListeners = function (headerKey) {
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-key")).off();
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].input-header-value")).off();
            (0, jquery_1.default)("[".concat(this.id, "] [").concat(headerKey, "].checkbox")).off();
        };
        HeadersView.prototype.updateModuleHeaders = function () {
            // Sets the headers into the module json.
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            moduleData.getObject().request.headers = Array.from(this.headers.values());
        };
        HeadersView.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            this.style({ "overflow-y": "auto" });
            // GET THE HEADERS
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var headers = moduleData.getObject().request.headers;
            // FIX THE HEADERS IN CASE THERE ARE NONE SO THERE IS ATLEAST ONE.
            headers.forEach(function (header) {
                if (header.moduleCreatorHeaderisActive == undefined) {
                    header.moduleCreatorHeaderisActive = true;
                }
                _this.headers.set(window.mApp.utils.makeId(15), header);
            });
            this.fixHeaders();
            // DRAW THE HEADERS.
            this.drawHeaders();
            this.updateModuleHeaders();
            return this;
        };
        HeadersView.prototype.finish = function () {
            var _this = this;
            var keys = Array.from(this.headers.keys());
            for (var x = 0; x < keys.length; x++) {
                var headerKey = keys[x];
                this.removeListeners(headerKey);
            }
            keys.forEach(function (x) {
                _this.headers.delete(x);
            });
            _super.prototype.finish.call(this);
        };
        return HeadersView;
    }(view_1.default));
    exports.HeadersView = HeadersView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/dataRequestController/httpBodyView.ts":
/*!**************************************************************************!*\
  !*** ./src/controller/requestView/dataRequestController/httpBodyView.ts ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! codemirror */ "./node_modules/codemirror/dist/index.cjs"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.cjs"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, codemirror_1, view_1, view_2, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.HttpBodyView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var HttpBodyView = /** @class */ (function (_super) {
        __extends(HttpBodyView, _super);
        function HttpBodyView(jsonId, id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(15); }
            if (html === void 0) { html = "<div $id> <div class=\"fill-absolute\">  </div> </div>"; }
            var _this = _super.call(this, id, html) || this;
            _this.jsonId = jsonId;
            var moduleData = window.mApp.moduleManager.moduleMap.get(_this.jsonId);
            _this.moduleObject = moduleData.getObject();
            return _this;
        }
        HttpBodyView.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        HttpBodyView.prototype.setUp = function () {
            var _this = this;
            var _a;
            _super.prototype.setUp.call(this);
            this.style({ "overflow-y": "auto" });
            (0, jquery_1.default)("[".concat(this.id, "]")).addClass("bg-primary");
            var myTheme = codemirror_1.EditorView.theme({
                "&": {
                    color: "#E6E6E6",
                    backgroundColor: "transparent"
                },
                ".cm-content": {
                    caretColor: "#E6E6E6",
                    padding: "10px 0 10px 0"
                },
                "&.cm-focused .cm-cursor": {
                    borderLeftColor: "#E6E6E6"
                },
                "&.cm-focused .cm-selectionBackground, ::selection": {
                    backgroundColor: "#3B3B3B"
                },
                ".cm-gutters": {
                    backgroundColor: "transparent",
                    color: "#A7A6A6",
                    border: "none"
                },
                ".cm-activeLine": {
                    backgroundColor: "transparent",
                },
                ".cm-activeLineGutter": {
                    backgroundColor: "transparent",
                }
            }, { dark: true });
            (0, jquery_1.default)("[".concat(this.id, "] .fill-absolute")).addClass("bg-primary");
            this.editorView = new codemirror_1.EditorView({
                extensions: [codemirror_1.basicSetup, myTheme, (0, view_2.placeholder)('Type the httpbody here.'),
                    codemirror_1.EditorView.updateListener.of(function (test) {
                        var string = test.state.doc.toString();
                        if (string == "") {
                            _this.moduleObject.request.httpBody = undefined;
                            return;
                        }
                        _this.moduleObject.request.httpBody = string;
                    })
                ],
                parent: document.querySelector("[".concat(this.id, "] .fill-absolute")),
                doc: (_a = this.moduleObject.request.httpBody) !== null && _a !== void 0 ? _a : "",
            });
            return this;
        };
        HttpBodyView.prototype.finish = function () {
            var _a;
            this.moduleObject = undefined;
            (_a = this.editorView) === null || _a === void 0 ? void 0 : _a.destroy();
            this.editorView = undefined;
            _super.prototype.finish.call(this);
        };
        return HttpBodyView;
    }(view_1.default));
    exports.HttpBodyView = HttpBodyView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/dataRequestController/settingsController.ts":
/*!********************************************************************************!*\
  !*** ./src/controller/requestView/dataRequestController/settingsController.ts ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ../../../model/settingCells/clickCellController */ "./src/model/settingCells/clickCellController.ts"), __webpack_require__(/*! ../../../model/settingCells/settingsCellController */ "./src/model/settingCells/settingsCellController.ts"), __webpack_require__(/*! ../../../model/settingCells/sectionCellController */ "./src/model/settingCells/sectionCellController.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, insertView_1, view_1, basicHtml_1, clickCellController_1, settingsCellController_1, sectionCellController_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.RequestSettingsController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var RequestSettingsController = /** @class */ (function (_super) {
        __extends(RequestSettingsController, _super);
        function RequestSettingsController(jsonId, id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, id, html) || this;
            _this.finished = false;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            _this.jsonId = jsonId;
            window.mApp.moduleManager.moduleViewsExecutor[_this.id] = _this;
            return _this;
        }
        RequestSettingsController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        RequestSettingsController.prototype.setUp = function () {
            var _this = this;
            var _a, _b, _c, _d;
            _super.prototype.setUp.call(this);
            if (this.finished) {
                return this;
            }
            this.deleteSubviews();
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            console.log(moduleData);
            if (moduleData == undefined) {
                return this;
            }
            var moduleObject = moduleData.getObject();
            if (moduleObject == undefined) {
                return this;
            }
            var moduleOptions = moduleData.getOptions();
            var cells = [
                new sectionCellController_1.SectionCellController("Javascript Settings"),
                new clickCellController_1.ClickCellController({ title: "Remove Scripts", message: "Loads the html website without executring the javascript, all the &lt;script&gt; tags become &lt;p&gt; tags. The loading time is faster if its enabled." }, (_b = (_a = moduleObject === null || moduleObject === void 0 ? void 0 : moduleObject.javascriptConfig) === null || _a === void 0 ? void 0 : _a.removeJavascript) !== null && _b !== void 0 ? _b : false, function (selected) {
                    if (selected) {
                        moduleObject.javascriptConfig.loadInWebView = false;
                        //moduleOptions["async"] = false;
                    }
                    moduleObject.javascriptConfig.removeJavascript = selected;
                    _this.setUp();
                    return true;
                }),
                new clickCellController_1.ClickCellController({ title: "Load in WebView", message: "The javascript is injected on the website directly, loading times are slower because the website needs to load, if this option is enabled the *Remove Scripts* options wont work." }, (_d = (_c = moduleObject === null || moduleObject === void 0 ? void 0 : moduleObject.javascriptConfig) === null || _c === void 0 ? void 0 : _c.loadInWebView) !== null && _d !== void 0 ? _d : false, function (selected) {
                    moduleObject.javascriptConfig.loadInWebView = selected;
                    if (selected) {
                        moduleObject.javascriptConfig.removeJavascript = false;
                    }
                    if (!selected) {
                        //moduleOptions["async"] = false;
                    }
                    _this.setUp();
                    return true;
                }),
            ];
            this.getRequestSettings().forEach(function (el) {
                cells.push(el);
            });
            var settingsController = new settingsCellController_1.SettingsCellController(cells.map(function (cell) {
                return cell.id;
            }));
            if (this.finished) {
                settingsController.finish();
                cells.forEach(function (el) { return el.finish(); });
                return this;
            }
            this.insertNewView(new insertView_1.InsertedViewData(settingsController.id, undefined));
            (0, jquery_1.default)("[".concat(settingsController.id, "]")).addClass('bg-primary');
            settingsController.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            return this;
        };
        RequestSettingsController.prototype.getRequestSettings = function () {
            var _this = this;
            var _a, _b;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var moduleOptions = moduleData.getOptions();
            var moduleObject = moduleData.getObject();
            var route = moduleData.jsonPath;
            var requestCells = [new sectionCellController_1.SectionCellController("Request Settings"),
                new clickCellController_1.ClickCellController({ title: "Force Request", message: "Overrides the request data set on the javascript from the previous request to the one you set on this request tab. This option is usefull to do request to static urls." }, (_a = moduleOptions === null || moduleOptions === void 0 ? void 0 : moduleOptions.forceRequest) !== null && _a !== void 0 ? _a : false, function (selected) {
                    moduleOptions["forceRequest"] = selected;
                    return true;
                }),
                new clickCellController_1.ClickCellController({ title: "Async Request", message: "Instead of finishing the request when the website loads, manually finish the request using the code below.<br><br>window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');" }, (_b = moduleOptions === null || moduleOptions === void 0 ? void 0 : moduleOptions.async) !== null && _b !== void 0 ? _b : false, function (selected) {
                    moduleOptions["async"] = selected;
                    if (selected) {
                        //moduleObject.javascriptConfig.loadInWebView = true;
                        //moduleObject.javascriptConfig.removeJavascript = false;
                    }
                    _this.setUp();
                    return true;
                }),
            ];
            if (route[route.length - 1] == '0') {
                return [requestCells[0], requestCells[2]];
            }
            return requestCells;
        };
        RequestSettingsController.prototype.moduleLoaded = function () {
        };
        RequestSettingsController.prototype.moduleDataUpdated = function () {
            this.setUp();
        };
        RequestSettingsController.prototype.finish = function () {
            this.finished = true;
            delete window.mApp.moduleManager.moduleViewsExecutor[this.id];
            _super.prototype.finish.call(this);
        };
        return RequestSettingsController;
    }(view_1.default));
    exports.RequestSettingsController = RequestSettingsController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/jsEditorController/javascriptController.ts":
/*!*******************************************************************************!*\
  !*** ./src/controller/requestView/jsEditorController/javascriptController.ts ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @codemirror/lang-javascript */ "./node_modules/@codemirror/lang-javascript/dist/index.cjs"), __webpack_require__(/*! codemirror */ "./node_modules/codemirror/dist/index.cjs"), __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.cjs"), __webpack_require__(/*! @codemirror/autocomplete */ "./node_modules/@codemirror/autocomplete/dist/index.cjs"), __webpack_require__(/*! @codemirror/commands */ "./node_modules/@codemirror/commands/dist/index.cjs"), __webpack_require__(/*! ../../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../../model/codeMirror/dracula */ "./src/model/codeMirror/dracula.ts"), __webpack_require__(/*! ../../../view/centerViews/javascriptControllerView */ "./src/view/centerViews/javascriptControllerView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, lang_javascript_1, codemirror_1, view_1, autocomplete_1, commands_1, insertView_1, view_2, dracula_1, javascriptControllerView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.JavascriptController = void 0;
    view_2 = __importDefault(view_2);
    jquery_1 = __importDefault(jquery_1);
    var JavascriptController = /** @class */ (function (_super) {
        __extends(JavascriptController, _super);
        function JavascriptController(jsonId, id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = javascriptControllerView_1.javascriptControllerView; }
            var _this = _super.call(this, id, html) || this;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            _this.jsonId = jsonId;
            return _this;
        }
        JavascriptController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        JavascriptController.prototype.setUp = function () {
            var _this = this;
            var _a, _b, _c, _d;
            _super.prototype.setUp.call(this);
            (0, jquery_1.default)("[".concat(this.id, "]")).addClass('bg-primary');
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            this.moduleObject = moduleData.getObject();
            var js = this.moduleObject.javascriptConfig.javaScript;
            if (js.split(/\n/g).length < 5) {
                js = this.beautifyJs(js);
                this.moduleObject.javascriptConfig.javaScript = js;
            }
            this.editorView = new codemirror_1.EditorView({
                extensions: [codemirror_1.basicSetup, (0, lang_javascript_1.javascript)(), lang_javascript_1.javascriptLanguage.data.of({
                        autocomplete: (0, lang_javascript_1.scopeCompletionSource)(globalThis)
                    }), dracula_1.dracula,
                    (0, autocomplete_1.autocompletion)({
                        icons: false
                    }),
                    codemirror_1.EditorView.lineWrapping,
                    view_1.keymap.of([commands_1.indentWithTab]),
                    codemirror_1.EditorView.updateListener.of(function (test) {
                        //console.log(this.editorView?.state.doc.lineAt(this.editorView.state.selection.main.head))
                        if (test.docChanged) {
                            _this.moduleObject.javascriptConfig.javaScript = test.state.doc.toString();
                        }
                    }),
                ],
                parent: document.querySelector("[".concat((_a = this.insertViewsDefault) === null || _a === void 0 ? void 0 : _a.getTag(), "]")),
                doc: js,
            });
            var options = moduleData.getOptions();
            if (!window.mApp.utils.isChrome()) {
                return this;
            }
            if (((_d = document.querySelector("[".concat((_c = (_b = this.insertViewsDefault) === null || _b === void 0 ? void 0 : _b.getTag()) !== null && _c !== void 0 ? _c : "", "]"))) === null || _d === void 0 ? void 0 : _d.scrollTop) != undefined) {
                // THIS SUCKS I KNOW. CUNT. Anwyways i didnt want to look on the documentation and since it doesnt load fully you cant scroll directly to the coordinates.
                // So! ill need to go through the documenatation of code mirror to find a better way to save the position of the code and scroll to it. 
                // If you want to contribute to this project this is the only thing i want anyone to do on MY code. 
                // // comment inside a comment.
                setTimeout(function () {
                    var _a, _b, _c;
                    (0, jquery_1.default)("[".concat((_b = (_a = _this.insertViewsDefault) === null || _a === void 0 ? void 0 : _a.getTag()) !== null && _b !== void 0 ? _b : "", "]")).animate({
                        scrollTop: (_c = options["javascriptEditorScroll"]) !== null && _c !== void 0 ? _c : 0
                    }, 20);
                    setTimeout(function () {
                        var _a, _b, _c;
                        (0, jquery_1.default)("[".concat((_b = (_a = _this.insertViewsDefault) === null || _a === void 0 ? void 0 : _a.getTag()) !== null && _b !== void 0 ? _b : "", "]")).animate({
                            scrollTop: (_c = options["javascriptEditorScroll"]) !== null && _c !== void 0 ? _c : 0
                        }, 20);
                    }, 20);
                }, 20);
            }
            return this;
        };
        JavascriptController.prototype.beautifyJs = function (js) {
            var beautify = (__webpack_require__(/*! js-beautify */ "./node_modules/js-beautify/js/index.js").js);
            var fixedJs = beautify(js, {
                "indent_size": 8,
                "indent_char": " ",
                "indent_with_tabs": false,
                "editorconfig": false,
                "eol": "\n",
                "end_with_newline": true,
                "indent_level": 0,
                "preserve_newlines": true,
                "max_preserve_newlines": 10,
                "space_in_paren": true,
                "space_in_empty_paren": true,
                "jslint_happy": false,
                "space_after_anon_function": true,
                "space_after_named_function": true,
                "brace_style": "collapse",
                "unindent_chained_methods": true,
                "break_chained_methods": false,
                "keep_array_indentation": false,
                "unescape_strings": false,
                "wrap_line_length": 0,
                "e4x": false,
                "comma_first": false,
                "operator_position": "before-newline",
                "indent_empty_lines": false,
                "templating": ["auto"]
            });
            return fixedJs;
        };
        JavascriptController.prototype.findFirstVisibleLine = function () {
        };
        JavascriptController.prototype.finish = function () {
            var _a, _b, _c;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            if (moduleData != undefined) {
                moduleData.getOptions()["javascriptEditorScroll"] = document.querySelector("[".concat((_b = (_a = this.insertViewsDefault) === null || _a === void 0 ? void 0 : _a.getTag()) !== null && _b !== void 0 ? _b : "", "]")).scrollTop;
            }
            (_c = this.editorView) === null || _c === void 0 ? void 0 : _c.destroy();
            this.editorView = undefined;
            _super.prototype.finish.call(this);
        };
        return JavascriptController;
    }(view_2.default));
    exports.JavascriptController = JavascriptController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/requestView/requestController.ts":
/*!*********************************************************!*\
  !*** ./src/controller/requestView/requestController.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/menuSelector/ menuSelector */ "./src/model/menuSelector/ menuSelector.ts"), __webpack_require__(/*! ../../model/view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../view/centerViews/requestControllerView */ "./src/view/centerViews/requestControllerView.ts"), __webpack_require__(/*! ./jsEditorController/javascriptController */ "./src/controller/requestView/jsEditorController/javascriptController.ts"), __webpack_require__(/*! ../routeView/routeViewController */ "./src/controller/routeView/routeViewController.ts"), __webpack_require__(/*! ./dataRequestController/dataRequestController */ "./src/controller/requestView/dataRequestController/dataRequestController.ts"), __webpack_require__(/*! ../../view/centerViews/dataRequestControllerView */ "./src/view/centerViews/dataRequestControllerView.ts"), __webpack_require__(/*! ./dataRequestController/settingsController */ "./src/controller/requestView/dataRequestController/settingsController.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, _menuSelector_1, insertView_1, view_1, requestControllerView_1, javascriptController_1, routeViewController_1, dataRequestController_1, dataRequestControllerView_1, settingsController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.RequestController = void 0;
    view_1 = __importDefault(view_1);
    var RequestController = /** @class */ (function (_super) {
        __extends(RequestController, _super);
        function RequestController(id, jsonId, html) {
            if (html === void 0) { html = requestControllerView_1.viewRequestController; }
            var _this = _super.call(this, id, html) || this;
            _this.jsonId = "";
            _this.jsonId = jsonId;
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        RequestController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        RequestController.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            var routeView = new routeViewController_1.RouteViewController(window.mApp.utils.makeId(15), this.jsonId);
            this.insertNewView(new insertView_1.InsertedViewData(routeView.id));
            routeView.setConstraints({ top: "0px", right: "0px", left: "0px", height: "40px" });
            var view1 = new dataRequestController_1.DataRequestController("view1", this.jsonId, dataRequestControllerView_1.viewDataRequestController);
            view1.viewName = "Request";
            var view2 = new javascriptController_1.JavascriptController(this.jsonId);
            view2.viewName = "Javascript";
            var view3 = new settingsController_1.RequestSettingsController(this.jsonId);
            view3.viewName = "Settings";
            var menuSelector = new _menuSelector_1.MenuSelctor(window.mApp.utils.makeId(15), [view1.id, view2.id, view3.id]);
            menuSelector.interface = this;
            this.insertNewView(new insertView_1.InsertedViewData(menuSelector.id));
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var options = moduleData.getOptions();
            menuSelector.selectByViewName(options["openedMenu"]);
            menuSelector.setConstraints({ top: "40px", right: "0px", left: "0px", bottom: "0px" });
            return this;
        };
        RequestController.prototype.menuSelectorWasSelected = function (viewId) {
            var _a, _b;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var options = moduleData.getOptions();
            options["openedMenu"] = (_b = (_a = this.getView(viewId)) === null || _a === void 0 ? void 0 : _a.viewName) !== null && _b !== void 0 ? _b : "";
        };
        return RequestController;
    }(view_1.default));
    exports.RequestController = RequestController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/controller/routeView/routeViewController.ts":
/*!*********************************************************!*\
  !*** ./src/controller/routeView/routeViewController.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../model/module/moduleManager */ "./src/model/module/moduleManager.ts"), __webpack_require__(/*! ../../model/view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../model/view/viewTemplates/popUpView */ "./src/model/view/viewTemplates/popUpView.ts"), __webpack_require__(/*! ../../view/centerViews/routeView */ "./src/view/centerViews/routeView.ts"), __webpack_require__(/*! ../popUpControllers/connectSocketController */ "./src/controller/popUpControllers/connectSocketController.ts"), __webpack_require__(/*! spin.js */ "./node_modules/spin.js/spin.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, moduleManager_1, view_1, popUpView_1, routeView_1, connectSocketController_1, spin_js_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.RouteViewController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var RouteViewController = /** @class */ (function (_super) {
        __extends(RouteViewController, _super);
        function RouteViewController(id, jsonId, html) {
            if (html === void 0) { html = routeView_1.viewRoute; }
            var _this = _super.call(this, id, html) || this;
            _this.jsonId = "";
            _this.spinnerOptions = {
                lines: 9,
                length: 38,
                width: 17,
                radius: 30,
                scale: 0.1,
                corners: 1,
                speed: 1,
                rotate: 0,
                animation: 'spinner-line-fade-quick',
                direction: 1,
                color: '#ffffff',
                fadeColor: 'transparent',
                top: '50%',
                left: '50%', // Left position relative to parent
            };
            _this.jsonId = jsonId;
            window.mApp.moduleManager.moduleViewsExecutor[_this.jsonId] = _this;
            window.mApp.moduleManager.moduleExecutionInterfaces[_this.id] = _this;
            return _this;
        }
        RouteViewController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
            var el = document.querySelector("[".concat(this.id, "] .spinner-holder"));
            if (el != undefined) {
                this.spinner = new spin_js_1.Spinner(this.spinnerOptions).spin(el);
                //this.spinner.spin();
            }
        };
        RouteViewController.prototype.setUp = function () {
            var _this = this;
            var _a, _b, _c, _d, _e;
            _super.prototype.setUp.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .execute-button")).off().on('click', function (ev) {
                ev.stopPropagation();
                ev.preventDefault();
                if (!window.mApp.sockets.isConnected()) {
                    var popUp = popUpView_1.PopUpView.showPopUpViewOnBody(new connectSocketController_1.ConnectSocketController().id);
                    return;
                }
                if (window.mApp.moduleManager.executionStatus == moduleManager_1.ModuleExecutionStatus.executing) {
                    window.mApp.moduleManager.cancelCurrentExecution();
                    return;
                }
                if (window.mApp.views.get("LogsViewerHolderController").getSize().height == 40) {
                    window.mApp.views.get("baseGrid").setLogsViewSize(400);
                }
                window.mApp.moduleManager.executeModule(_this.getExecuteRoute());
            });
            (0, jquery_1.default)("[".concat(this.id, "] .route")).html("");
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            // BUTTON
            if (window.mApp.utils.getNumberFromString((_b = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath[((_a = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath) !== null && _a !== void 0 ? _a : []).length - 1]) !== null && _b !== void 0 ? _b : "") == undefined) {
                (0, jquery_1.default)("[".concat(this.id, "] .execute-button")).css({ "display": "none" });
            }
            this.updateButtonStatus();
            // ROUTE 
            var pathString = '<div class="r-text">$name</div>';
            var separator = '<div class="r-separator">/</div>';
            var finalHtml = "";
            for (var x = 0; x < ((_c = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath) !== null && _c !== void 0 ? _c : []).length; x++) {
                var current = window.mApp.utils.capitalizeFirstLetter((_d = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath[x]) !== null && _d !== void 0 ? _d : "");
                if (current == "") {
                    continue;
                }
                finalHtml += pathString.replace('$name', current);
                if (x < ((_e = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath) !== null && _e !== void 0 ? _e : []).length - 1) {
                    finalHtml += separator;
                }
            }
            (0, jquery_1.default)("[".concat(this.id, "] .route")).html(finalHtml);
            return this;
        };
        RouteViewController.prototype.updateButtonStatus = function () {
            var _a, _b;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var section = (_a = moduleData === null || moduleData === void 0 ? void 0 : moduleData.getSection()) === null || _a === void 0 ? void 0 : _a.getSection();
            if (section == undefined) {
                section = moduleData === null || moduleData === void 0 ? void 0 : moduleData.getSection();
            }
            var status = window.mApp.moduleManager.executionStatus;
            switch (status) {
                case moduleManager_1.ModuleExecutionStatus.finished:
                    (0, jquery_1.default)("[".concat(this.id, "] .title")).text("Execute ".concat((_b = section === null || section === void 0 ? void 0 : section.options) === null || _b === void 0 ? void 0 : _b.name));
                    this.stopLoading();
                    break;
                case moduleManager_1.ModuleExecutionStatus.executing:
                    (0, jquery_1.default)("[".concat(this.id, "] .title")).text('Cancel');
                    this.startLoading();
                    break;
                case moduleManager_1.ModuleExecutionStatus.canceling:
                    (0, jquery_1.default)("[".concat(this.id, "] .title")).text('Canceling...');
                    this.startLoading();
                    break;
            }
        };
        RouteViewController.prototype.startLoading = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .execute-button")).addClass("loading");
            //this.spinner?.spin();
        };
        RouteViewController.prototype.stopLoading = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .execute-button")).removeClass("loading");
        };
        RouteViewController.prototype.getExecuteRoute = function () {
            var _a;
            var moduleData = window.mApp.moduleManager.moduleMap.get(this.jsonId);
            var path = (_a = moduleData === null || moduleData === void 0 ? void 0 : moduleData.jsonPath) !== null && _a !== void 0 ? _a : undefined;
            if (path == undefined) {
                return [];
            }
            if (path.length > 2) {
                return [path[0], path[1]];
            }
            else {
                return [path[0]];
            }
        };
        RouteViewController.prototype.moduleExecutionUpdated = function () {
            this.updateButtonStatus();
        };
        RouteViewController.prototype.moduleLoaded = function () {
        };
        RouteViewController.prototype.moduleDataUpdated = function () {
            this.setUp();
        };
        RouteViewController.prototype.finish = function () {
            var _a;
            delete window.mApp.moduleManager.moduleViewsExecutor[this.jsonId];
            delete window.mApp.moduleManager.moduleExecutionInterfaces[this.id];
            (_a = this.spinner) === null || _a === void 0 ? void 0 : _a.stop();
            this.spinner = undefined;
            (0, jquery_1.default)("[".concat(this.id, "] .execute-button")).off();
            _super.prototype.finish.call(this);
        };
        return RouteViewController;
    }(view_1.default));
    exports.RouteViewController = RouteViewController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./app */ "./src/app.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, app_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    app_1 = __importDefault(app_1);
    window.mApp = new app_1.default();
    window.mApp.start();
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/ResizeObserver/mResizeObserver.ts":
/*!*****************************************************!*\
  !*** ./src/model/ResizeObserver/mResizeObserver.ts ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    jquery_1 = __importDefault(jquery_1);
    var MRsesizeObserver = /** @class */ (function () {
        function MRsesizeObserver(insertedIntoData, data) {
            this.resizeConditions = [];
            this.insertedIntoData = insertedIntoData;
            this.resizeConditions = data;
            this.setUp();
        }
        MRsesizeObserver.prototype.setUp = function () {
            var _this = this;
            var _a;
            this.resizeObserver = new ResizeObserver(function (entries) {
                var _a;
                for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                    var entry = entries_1[_i];
                    for (var _b = 0, _c = _this.resizeConditions; _b < _c.length; _b++) {
                        var condition = _c[_b];
                        if (entry.borderBoxSize.length == 0) {
                            continue;
                        }
                        if (condition.condition(entry.borderBoxSize[0])) { // POSSIBLE ERROR?
                            (_a = _this.interface) === null || _a === void 0 ? void 0 : _a.resizeTriggered(condition);
                            _this.currentCondition = condition.name;
                            return;
                        }
                    }
                }
            });
            var view = (_a = this.insertedIntoData) === null || _a === void 0 ? void 0 : _a.getView();
            if (this.insertedIntoData != undefined && view != undefined) {
                if (document.querySelector("[".concat(this.insertedIntoData.getTag(), "]")) == undefined) {
                    return false;
                }
                this.resizeObserver.observe(document.querySelector("[".concat(this.insertedIntoData.getTag(), "]")));
            }
            else {
                return false;
            }
            return true;
        };
        MRsesizeObserver.prototype.triggerManually = function () {
            var _a, _b, _c;
            var view = (_a = this.insertedIntoData) === null || _a === void 0 ? void 0 : _a.getView();
            var el = (0, jquery_1.default)("[".concat((_b = this.insertedIntoData) === null || _b === void 0 ? void 0 : _b.getTag(), "]"));
            if (el == undefined) {
                return;
            }
            var width = el.outerWidth();
            var height = el.outerHeight();
            if (width == undefined || height == undefined) {
                return;
            }
            var size = { blockSize: height, inlineSize: width };
            for (var _i = 0, _d = this.resizeConditions; _i < _d.length; _i++) {
                var condition = _d[_i];
                if (condition.condition(size)) { // POSSIBLE ERROR?
                    (_c = this.interface) === null || _c === void 0 ? void 0 : _c.resizeTriggered(condition);
                    this.currentCondition = condition.name;
                    return;
                }
            }
        };
        MRsesizeObserver.prototype.finished = function () {
            var _a, _b, _c;
            (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
            this.resizeConditions = [];
            this.resizeObserver = undefined;
            if (((_b = this.interface) === null || _b === void 0 ? void 0 : _b.observerFinished) != undefined) {
                (_c = this.interface) === null || _c === void 0 ? void 0 : _c.observerFinished();
            }
            this.interface = undefined;
        };
        return MRsesizeObserver;
    }());
    exports["default"] = MRsesizeObserver;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/SocketsServer/SocketsConnectionHandler.ts":
/*!*************************************************************!*\
  !*** ./src/model/SocketsServer/SocketsConnectionHandler.ts ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.SocketsConnectionHandler = exports.serverConnectionStatus = exports.SocketMessageCallback = void 0;
    var SocketMessageCallback = /** @class */ (function () {
        function SocketMessageCallback(sent, completion) {
            var _this = this;
            this.sentTimeout = 1000 * 10;
            this.completedTimeout = 1000 * 40;
            this.id = "";
            this.finished = false;
            this.sent = sent;
            if (this.sent != undefined) {
                setTimeout(function () {
                    if (_this.sent != undefined) {
                        _this.sent({}, true);
                        _this.sent = undefined;
                    }
                    if (_this.completion == undefined) {
                        _this.finish();
                    }
                }, this.sentTimeout);
            }
            this.completion = completion;
            if (this.completion != undefined) {
                setTimeout(function () {
                    if (_this.completion != undefined) {
                        _this.completion({}, true);
                        _this.completion = undefined;
                    }
                    if (_this.sent == undefined) {
                        _this.finish();
                    }
                }, this.completedTimeout);
            }
        }
        SocketMessageCallback.prototype.sentCallback = function (data) {
            if (this.sent != undefined) {
                this.sent(data, false);
                this.sent = undefined;
            }
            if (this.completion == undefined) {
                this.finish();
            }
        };
        SocketMessageCallback.prototype.completionCallback = function (data) {
            if (this.completion != undefined) {
                this.completion(data, false);
                this.completion = undefined;
            }
            if (this.sent == undefined) {
                this.finish();
            }
        };
        SocketMessageCallback.prototype.error = function () {
            if (this.sent != undefined) {
                this.sent({}, true);
                this.sent = undefined;
            }
            if (this.completion != undefined) {
                this.completion({}, true);
                this.completion = undefined;
            }
            this.finish();
        };
        SocketMessageCallback.prototype.finish = function () {
            if (this.finished) {
                return;
            }
            this.finished = true;
            this.sent = undefined;
            this.completion = undefined;
            delete window.mApp.sockets.completionMessagesArray[this.id];
        };
        return SocketMessageCallback;
    }());
    exports.SocketMessageCallback = SocketMessageCallback;
    var serverConnectionStatus;
    (function (serverConnectionStatus) {
        serverConnectionStatus[serverConnectionStatus["connected"] = 0] = "connected";
        serverConnectionStatus[serverConnectionStatus["connecting"] = 1] = "connecting";
        serverConnectionStatus[serverConnectionStatus["notConnected"] = 2] = "notConnected";
    })(serverConnectionStatus = exports.serverConnectionStatus || (exports.serverConnectionStatus = {}));
    var SocketsConnectionHandler = /** @class */ (function () {
        function SocketsConnectionHandler() {
            this.socketsConnectionInterfaces = {};
            this.connectionStatus = serverConnectionStatus.notConnected;
            this.completionMessagesArray = {};
            this.currentIp = "";
        }
        SocketsConnectionHandler.prototype.getCurrentIp = function () {
            var _a;
            return (_a = window.localStorage.getItem("currentIP")) !== null && _a !== void 0 ? _a : "";
        };
        SocketsConnectionHandler.prototype.setCurrentIp = function (string) {
            window.localStorage.setItem("currentIP", string);
        };
        SocketsConnectionHandler.prototype.isConnected = function () {
            return this.connectionStatus == serverConnectionStatus.connected;
        };
        SocketsConnectionHandler.prototype.setUp = function (ip) {
            var _this = this;
            this.connectionFalied();
            var timerId = window.mApp.utils.makeId();
            this.connectionTimerId = timerId;
            setTimeout(function () {
                if (_this.connectionTimerId != timerId) {
                    return;
                }
                _this.connectionFalied();
            }, 10 * 1000);
            this.setCurrentIp(ip);
            this.connectionStatus = serverConnectionStatus.connecting;
            this.connection = new WebSocket(ip);
            this.connection.onopen = function () {
                _this.connectionOpened();
            };
            this.connection.onerror = function (error) {
                _this.connectionFalied();
            };
            this.connection.onclose = function (ev) {
                _this.connectionFalied();
            };
            this.connection.onmessage = function (e) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _a = this.messageReceived;
                            _c = (_b = JSON).parse;
                            _d = atob;
                            return [4 /*yield*/, e.data.text()];
                        case 1:
                            _a.apply(this, [_c.apply(_b, [_d.apply(void 0, [_e.sent()])])]);
                            return [2 /*return*/];
                    }
                });
            }); };
        };
        SocketsConnectionHandler.prototype.closeConnectionWithoutCallbacks = function () {
            var _this = this;
            if (this.connection != undefined) {
                this.connection.onopen = function () { };
                this.connection.onerror = function (error) { };
                this.connection.onclose = function (error) { };
                this.connection.onmessage = function (e) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/];
                }); }); };
                this.connection.close();
            }
        };
        SocketsConnectionHandler.prototype.connectionFalied = function (callbacks) {
            if (callbacks === void 0) { callbacks = true; }
            this.connectionTimerId = window.mApp.utils.makeId();
            this.closeConnectionWithoutCallbacks();
            this.connectionStatus = serverConnectionStatus.notConnected;
            for (var _i = 0, _a = Object.keys(this.completionMessagesArray); _i < _a.length; _i++) {
                var k = _a[_i];
                this.completionMessagesArray[k].error();
                delete this.completionMessagesArray[k];
            }
            if (!callbacks) {
                return;
            }
            for (var _b = 0, _c = Object.values(this.socketsConnectionInterfaces); _b < _c.length; _b++) {
                var int = _c[_b];
                int.connectionFailed();
            }
            this.connection = undefined;
        };
        SocketsConnectionHandler.prototype.connectionOpened = function () {
            this.connectionTimerId = window.mApp.utils.makeId();
            this.connectionStatus = serverConnectionStatus.connected;
            for (var _i = 0, _a = Object.values(this.socketsConnectionInterfaces); _i < _a.length; _i++) {
                var int = _a[_i];
                int.connectionEnabled();
            }
        };
        SocketsConnectionHandler.prototype.sendMessage = function (message, callback) {
            var _a;
            if (this.connectionStatus != serverConnectionStatus.connected) {
                return false;
            }
            if (callback != undefined) {
                callback.id = message.id;
                if (callback.sent != undefined) {
                    message.sentCallback = true;
                }
                if (callback.completion != undefined) {
                    message.completionCallback = true;
                }
                this.completionMessagesArray[callback.id] = callback;
            }
            (_a = this.connection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(message));
            return true;
        };
        SocketsConnectionHandler.prototype.messageReceived = function (message) {
            var decodedMesage = message;
            if (decodedMesage == undefined) {
                return;
            }
            this.parseMessageReceived(decodedMesage);
        };
        SocketsConnectionHandler.prototype.parseMessageReceived = function (message) {
            var _a, _b;
            if (message.functionName == "CallbackSent") {
                (_a = this.completionMessagesArray[message.id]) === null || _a === void 0 ? void 0 : _a.sentCallback(message);
                return;
            }
            if (message.functionName == "CallbackCompletion") {
                (_b = this.completionMessagesArray[message.id]) === null || _b === void 0 ? void 0 : _b.completionCallback(message);
                return;
            }
        };
        return SocketsConnectionHandler;
    }());
    exports.SocketsConnectionHandler = SocketsConnectionHandler;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/SocketsServer/connectionChecker.ts":
/*!******************************************************!*\
  !*** ./src/model/SocketsServer/connectionChecker.ts ***!
  \******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./SocketsConnectionHandler */ "./src/model/SocketsServer/SocketsConnectionHandler.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, SocketsConnectionHandler_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ConnectionChecker = void 0;
    var ConnectionChecker = /** @class */ (function () {
        function ConnectionChecker() {
            this.started = false;
            this.connectionId = "";
        }
        ConnectionChecker.prototype.setUp = function () {
            window.mApp.sockets.socketsConnectionInterfaces[window.mApp.utils.makeId()] = ConnectionChecker.shared;
        };
        ConnectionChecker.prototype.start = function () {
            var IKNOWTHISSUCKS = "SHUT THE FUCK UP";
            if (this.started) {
                return;
            }
            this.started = true;
            this.pingPong();
        };
        ConnectionChecker.prototype.pingPong = function () {
            var _this = this;
            var currentId = "";
            var isRetry = false;
            setInterval(function () {
                console.log("ping pong");
                var callback = new SocketsConnectionHandler_1.SocketMessageCallback(function (data, error) {
                    if (error &&
                        window.mApp.sockets.connectionStatus == SocketsConnectionHandler_1.serverConnectionStatus.connected && isRetry && currentId == _this.connectionId) {
                        window.mApp.sockets.connectionFalied();
                        isRetry = false;
                        currentId = "";
                    }
                    if (error) {
                        currentId = _this.connectionId;
                        isRetry = true;
                        return;
                    }
                    isRetry = false;
                    currentId = "";
                }, undefined);
                callback.sentTimeout = 5;
                window.mApp.sockets.sendMessage({
                    id: window.mApp.utils.makeId(),
                    functionName: "connectionChecker",
                    sentCallback: true,
                    completionCallback: false
                }, callback);
            }, 1000 * 6);
        };
        ConnectionChecker.prototype.connectionEnabled = function () {
            this.connectionId = window.mApp.utils.makeId();
            this.start();
        };
        ConnectionChecker.prototype.connectionFailed = function () {
            this.connectionId = window.mApp.utils.makeId();
        };
        ConnectionChecker.shared = new ConnectionChecker();
        return ConnectionChecker;
    }());
    exports.ConnectionChecker = ConnectionChecker;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/SocketsServer/logsParser.ts":
/*!***********************************************!*\
  !*** ./src/model/SocketsServer/logsParser.ts ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LogsParser = void 0;
    var LogsParser = /** @class */ (function () {
        function LogsParser() {
            this.logsInterfaces = {};
            this.implementedLogs = [];
            this.logsOrder = [];
            this.logs = {};
            this.selectedLog = undefined;
            this.updatingLogs = false;
            this.logsQueue = [];
        }
        LogsParser.prototype.logsUpdated = function (logs) {
            var _a, _b;
            if (this.updatingLogs) {
                this.logsQueue.push(logs);
                return;
            }
            this.updatingLogs = true;
            this.logsOrder = logs.logsOrder;
            for (var _i = 0, _c = logs.logsOrder; _i < _c.length; _i++) {
                var logID = _c[_i];
                if (this.logs[logID] == undefined) {
                    this.logs[logID] = [];
                }
                var logsFromId = logs.returnLogs[logID];
                for (var _d = 0, logsFromId_1 = logsFromId; _d < logsFromId_1.length; _d++) {
                    var mLog_1 = logsFromId_1[_d];
                    if (!this.implementedLogs.includes(mLog_1.id)) {
                        mLog_1.sectionId = logID;
                        this.logs[logID].push(mLog_1);
                        this.implementedLogs.push(mLog_1.id);
                    }
                }
            }
            for (var _e = 0, _f = Object.keys(this.logs); _e < _f.length; _e++) {
                var key = _f[_e];
                if (!this.logsOrder.includes(key)) {
                    delete this.logs[key];
                }
            }
            this.removeOldLogs();
            // Set the error log as selected in case there is one.
            var error = false;
            if (this.logsOrder.length >= 1) {
                var lastLogs = this.logs[this.logsOrder[0]];
                for (var _g = 0, lastLogs_1 = lastLogs; _g < lastLogs_1.length; _g++) {
                    var mLog = lastLogs_1[_g];
                    if (mLog.error) {
                        this.selectedLog = { logId: mLog.id, sectionId: this.logsOrder[0] };
                        (_a = window.mApp.views.get("LogsViewerHolderController")) === null || _a === void 0 ? void 0 : _a.showCurrentLog();
                        error = true;
                        break;
                    }
                }
            }
            if (!error) {
                (_b = window.mApp.views.get("LogsViewerHolderController")) === null || _b === void 0 ? void 0 : _b.showJSLogs();
            }
            for (var _h = 0, _j = Object.values(this.logsInterfaces); _h < _j.length; _h++) {
                var inter = _j[_h];
                inter.logsUpdated();
            }
            this.updatingLogs = false;
            this.lookForQueueLogs();
        };
        LogsParser.prototype.removeOldLogs = function () {
            for (var _i = 0, _a = Object.keys(this.logs); _i < _a.length; _i++) {
                var sectionId = _a[_i];
                if (!this.logsOrder.includes(sectionId)) {
                    var section = this.logs[sectionId];
                    for (var _b = 0, section_1 = section; _b < section_1.length; _b++) {
                        var log = section_1[_b];
                        window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(log.id), this.implementedLogs);
                    }
                    window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(sectionId), this.implementedLogs);
                    delete this.logs[sectionId];
                }
            }
        };
        LogsParser.prototype.getLog = function (identifier) {
            var _a;
            var sectionLogs = (_a = this.logs[identifier.sectionId]) !== null && _a !== void 0 ? _a : [];
            for (var _i = 0, sectionLogs_1 = sectionLogs; _i < sectionLogs_1.length; _i++) {
                var log = sectionLogs_1[_i];
                if (log.id == identifier.logId) {
                    return log;
                }
            }
            return undefined;
        };
        LogsParser.prototype.logSelected = function (log) {
            this.selectedLog = log;
            for (var _i = 0, _a = Object.values(this.logsInterfaces); _i < _a.length; _i++) {
                var inter = _a[_i];
                inter.logSelected();
            }
        };
        LogsParser.prototype.getModuleLogsToSend = function () {
            return { implementedLogs: this.implementedLogs, logsOrder: [], returnLogs: {} };
        };
        LogsParser.prototype.lookForQueueLogs = function () {
            if (this.logsQueue.length > 0) {
                var nextLogs = this.logsQueue[0];
                delete this.logsQueue[0];
                this.logsUpdated(nextLogs);
            }
        };
        LogsParser.shared = new LogsParser();
        return LogsParser;
    }());
    exports.LogsParser = LogsParser;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/base.ts":
/*!***************************!*\
  !*** ./src/model/base.ts ***!
  \***************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var Base = /** @class */ (function () {
        function Base() {
        }
        Base.prototype.setUp = function () {
        };
        Base.prototype.finish = function () {
        };
        return Base;
    }());
    exports["default"] = Base;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/codeMirror/createTheme.ts":
/*!*********************************************!*\
  !*** ./src/model/codeMirror/createTheme.ts ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.cjs"), __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.cjs")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, language_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var createTheme = function (_a) {
        var variant = _a.variant, settings = _a.settings, styles = _a.styles;
        var theme = view_1.EditorView.theme({
            // eslint-disable-next-line @typescript-eslint/naming-convention
            '&': {
                backgroundColor: settings.background,
                color: settings.foreground,
            },
            '.cm-content': {
                caretColor: settings.caret,
            },
            '.cm-cursor, .cm-dropCursor': {
                borderLeftColor: settings.caret,
            },
            '&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection': {
                backgroundColor: settings.selection,
            },
            '.cm-activeLine': {
                backgroundColor: settings.lineHighlight,
            },
            '.cm-gutters': {
                backgroundColor: settings.gutterBackground,
                color: settings.gutterForeground,
            },
            '.cm-activeLineGutter': {
                backgroundColor: settings.lineHighlight,
            },
            ".cm-tooltip-autocomplete": {
                backgroundColor: "#262626",
                color: "#A7A6A6",
                "line-height": "1",
                "box-sizing": " border-box",
                "border": "1px solid rgba(255,255,255,.1)"
            },
            ".cm-completionMatchedText": {
                textDecoration: "none",
                color: "#FFFFFF",
            },
            '.cm-tooltip-autocomplete ul li[aria-selected]': {
                backgroundColor: "#3B3B3B",
            },
        }, {
            dark: variant === 'dark',
        });
        var highlightStyle = language_1.HighlightStyle.define(styles);
        var extension = [theme, (0, language_1.syntaxHighlighting)(highlightStyle)];
        return extension;
    };
    exports["default"] = createTheme;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/codeMirror/dracula.ts":
/*!*****************************************!*\
  !*** ./src/model/codeMirror/dracula.ts ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! @lezer/highlight */ "./node_modules/@lezer/highlight/dist/index.cjs"), __webpack_require__(/*! ./createTheme */ "./src/model/codeMirror/createTheme.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, highlight_1, createTheme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.dracula = void 0;
    createTheme_1 = __importDefault(createTheme_1);
    // Author: Zeno Rocha
    exports.dracula = (0, createTheme_1.default)({
        variant: 'dark',
        settings: {
            background: '#212221',
            foreground: '#CECFD0',
            caret: '#fff',
            selection: '#727377',
            gutterBackground: '#212221',
            gutterForeground: '#CECFD0',
            lineHighlight: 'transparent',
        },
        styles: [
            { tag: [highlight_1.tags.comment, highlight_1.tags.quote], color: '#7F8C98' },
            { tag: [highlight_1.tags.keyword], color: '#FF7AB2', fontWeight: 'bold' },
            { tag: [highlight_1.tags.string, highlight_1.tags.meta], color: '#FF8170' },
            { tag: [highlight_1.tags.typeName], color: '#DABAFF' },
            { tag: [highlight_1.tags.definition(highlight_1.tags.variableName)], color: '#6BDFFF' },
            { tag: [highlight_1.tags.name], color: '#6BAA9F' },
            { tag: [highlight_1.tags.variableName], color: '#ACF2E4' },
            { tag: [highlight_1.tags.regexp, highlight_1.tags.link], color: '#FF8170' },
        ],
    });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/collectionView/collectionView.ts":
/*!****************************************************!*\
  !*** ./src/model/collectionView/collectionView.ts ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/defaultCollectionView */ "./src/view/defaultViews/defaultCollectionView.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ./collectionViewLayoutDesign */ "./src/model/collectionView/collectionViewLayoutDesign.ts"), __webpack_require__(/*! ./interfaces */ "./src/model/collectionView/interfaces.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, defaultCollectionView_1, insertView_1, view_1, collectionViewLayoutDesign_1, interfaces_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.UICollectionView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var UICollectionView = /** @class */ (function (_super) {
        __extends(UICollectionView, _super);
        function UICollectionView(id, grid, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = defaultCollectionView_1.viewDefaultCollectionViewView; }
            var _this = _super.call(this, id, html) || this;
            _this.layoutDesign = new collectionViewLayoutDesign_1.UICollectionViewLayoutDesign();
            _this.scrollTop = 0;
            _this.grid = grid !== null && grid !== void 0 ? grid : new insertView_1.InsertedViewData(_this.id, "$idgrid");
            return _this;
        }
        UICollectionView.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        UICollectionView.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            this.designUpdated();
            return this;
        };
        UICollectionView.prototype.reloadData = function () {
            var _a, _b, _c;
            for (var _i = 0, _d = this.insertedViews; _i < _d.length; _i++) {
                var x = _d[_i];
                var view = x.getView();
                view === null || view === void 0 ? void 0 : view.finish();
            }
            if (this.dataSourceDelegate != undefined) {
                var totalSections = this.dataSourceDelegate.cvNumberOfSections(this);
                var insertIntoId = (_a = this.grid) === null || _a === void 0 ? void 0 : _a.getTag();
                for (var sectionNumb = 0; sectionNumb < totalSections; sectionNumb++) {
                    var totalItems = this.dataSourceDelegate.cvNumberOfItemsInSection(this, sectionNumb);
                    var header = this.dataSourceDelegate.cvCellForSectionAt(this, interfaces_1.UICollectionViewSectionCellType.header, sectionNumb);
                    if (header != undefined) {
                        header.sectionCellType = interfaces_1.UICollectionViewSectionCellType.header;
                        header.indexPath = { section: sectionNumb, item: 0 };
                        header.collectionViewId = this.id;
                        this.insertNewView(new insertView_1.InsertedViewData(header.id, insertIntoId));
                    }
                    this.setDelegatesToSectionCell(header === null || header === void 0 ? void 0 : header.id, sectionNumb, interfaces_1.UICollectionViewSectionCellType.header);
                    for (var itemNumber = 0; itemNumber < totalItems; itemNumber++) {
                        var indexPath = { section: sectionNumb, item: itemNumber };
                        var cell = this.dataSourceDelegate.cvCellForItemAt(this, indexPath);
                        cell.indexPath = indexPath;
                        cell.collectionViewId = this.id;
                        this.insertNewView(new insertView_1.InsertedViewData(cell.id, insertIntoId));
                        this.setDelegateToCell(cell.id, indexPath);
                        if (itemNumber != totalItems - 1) {
                            var separator = (_c = (_b = this.dataSourceDelegate).getSeparator) === null || _c === void 0 ? void 0 : _c.call(_b, this, indexPath);
                            if (separator != undefined) {
                                this.insertNewView(new insertView_1.InsertedViewData(separator.id));
                            }
                        }
                    }
                    var footer = this.dataSourceDelegate.cvCellForSectionAt(this, interfaces_1.UICollectionViewSectionCellType.footer, sectionNumb);
                    if (footer != undefined) {
                        footer.sectionCellType = interfaces_1.UICollectionViewSectionCellType.footer;
                        footer.indexPath = { section: sectionNumb, item: 0 };
                        footer.collectionViewId = this.id;
                        this.insertNewView(new insertView_1.InsertedViewData(footer.id, insertIntoId));
                    }
                    this.setDelegatesToSectionCell(footer === null || footer === void 0 ? void 0 : footer.id, sectionNumb, interfaces_1.UICollectionViewSectionCellType.footer);
                }
            }
        };
        UICollectionView.prototype.scrollTo = function (indexPath) {
            var _a, _b;
            var cell = document.querySelector("[".concat((_b = (_a = this.getCellAt(indexPath)) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "asdsdfddfads", "]"));
            console.log("Thisi is the cell");
            console.log(cell);
            if (cell == undefined) {
                return;
            }
            console.log(cell.scrollHeight);
            cell.scrollIntoView();
        };
        UICollectionView.prototype.getScrollTop = function () {
            var _a, _b;
            return (_b = (_a = document.querySelector("[".concat(this.grid.getTag(), "]"))) === null || _a === void 0 ? void 0 : _a.scrollTop) !== null && _b !== void 0 ? _b : 0;
        };
        UICollectionView.prototype.setScrollTop = function (scrollTop) {
            var _a;
            if (((_a = document.querySelector("[".concat(this.grid.getTag(), "]"))) === null || _a === void 0 ? void 0 : _a.scrollTop) != undefined) {
                document.querySelector("[".concat(this.grid.getTag(), "]")).scrollTop = scrollTop;
            }
        };
        UICollectionView.prototype.getSize = function () {
            var _a, _b;
            var el = (0, jquery_1.default)("[".concat(this.id, "] [").concat(this.grid.getTag(), "]"));
            return { width: (_a = el.width()) !== null && _a !== void 0 ? _a : 0, height: (_b = el.height()) !== null && _b !== void 0 ? _b : 0 };
        };
        UICollectionView.prototype.updateCellsWithoutRedrawing = function () {
            var scrollTop = this.getScrollTop();
            console.log("UPDATING CELLS WITHOUT READRAWWING");
            for (var _i = 0, _a = this.insertedViews; _i < _a.length; _i++) {
                var x = _a[_i];
                var view = x.getView();
                view === null || view === void 0 ? void 0 : view.cellWasReloadedWithoutRedrawing();
            }
            this.setScrollTop(scrollTop);
        };
        UICollectionView.prototype.setDelegateToCell = function (viewId, indexPath) {
            var _this = this;
            if (this.delegate == undefined) {
                return;
            }
            (0, jquery_1.default)("[".concat(viewId, "]")).off('click').on('click', function (el) {
                var _a;
                el.preventDefault();
                el.stopImmediatePropagation();
                (_a = _this.delegate) === null || _a === void 0 ? void 0 : _a.cvDidSelectItem(_this, indexPath);
            });
        };
        UICollectionView.prototype.setDelegatesToSectionCell = function (viewId, section, sectionCellType) {
            var _this = this;
            if (viewId == undefined) {
                return;
            }
            if (this.delegate == undefined) {
                return;
            }
            (0, jquery_1.default)("[".concat(viewId, "]")).off('click').on('click', function (ev) {
                var _a;
                ev.stopPropagation();
                ev.preventDefault();
                (_a = _this.delegate) === null || _a === void 0 ? void 0 : _a.cvDidSelectSection(_this, section, sectionCellType);
            });
        };
        UICollectionView.prototype.getCellAt = function (indexPath) {
            var cellId = (0, jquery_1.default)("[UICVID=\"".concat(this.id, "\"][UICVSection=\"").concat(indexPath.section, "\"][UICVItem=\"").concat(indexPath.item, "\"][UICVCellType=\"cell\"]")).attr("UICVViewId");
            if (cellId == undefined) {
                return undefined;
            }
            return this.getView(cellId);
        };
        UICollectionView.prototype.getCellForSectionAt = function (section, sectionCellType) {
            var cellId = (0, jquery_1.default)("[UICVID=\"".concat(this.id, "\"][UICVSection=\"").concat(section, "\"][UICVCellType=\"").concat(sectionCellType, "\"]")).attr("UICVViewId");
            if (cellId == undefined) {
                return undefined;
            }
            return this.getView(cellId);
        };
        UICollectionView.prototype.designUpdated = function () {
            var _a, _b;
            if (this.layoutDesign == undefined) {
                return;
            }
            (0, jquery_1.default)("[".concat((_b = (_a = this.grid) === null || _a === void 0 ? void 0 : _a.getTag()) !== null && _b !== void 0 ? _b : "", "]")).css(this.layoutDesign.getStyle(this));
        };
        UICollectionView.prototype.finish = function () {
            // this already goes through the inserted views and callls finish which calls removeDelegates and remove 
            // the delegates from the cell
            this.layoutDesign = undefined;
            this.delegate = undefined;
            this.dataSourceDelegate = undefined;
            _super.prototype.finish.call(this);
        };
        return UICollectionView;
    }(view_1.default));
    exports.UICollectionView = UICollectionView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/collectionView/collectionViewCell.ts":
/*!********************************************************!*\
  !*** ./src/model/collectionView/collectionViewCell.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.UICollectionViewCell = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var UICollectionViewCell = /** @class */ (function (_super) {
        __extends(UICollectionViewCell, _super);
        function UICollectionViewCell(html) {
            return _super.call(this, window.mApp.utils.makeId(), html) || this;
        }
        UICollectionViewCell.prototype.htmlInsertionInterceptor = function (html) {
            var _a, _b, _c, _d;
            var newHtml = _super.prototype.htmlInsertionInterceptor.call(this, html);
            if (newHtml == undefined) {
                return undefined;
            }
            newHtml.setAttribute("UICVSection", "".concat((_b = (_a = this.indexPath) === null || _a === void 0 ? void 0 : _a.section) !== null && _b !== void 0 ? _b : ""));
            newHtml.setAttribute("UICVItem", "".concat((_d = (_c = this.indexPath) === null || _c === void 0 ? void 0 : _c.item) !== null && _d !== void 0 ? _d : ""));
            newHtml.setAttribute("UICVID", this.collectionViewId);
            newHtml.setAttribute("UICVViewId", this.id);
            newHtml.setAttribute("UICVCellType", "cell");
            return newHtml;
        };
        UICollectionViewCell.prototype.cellWasReloadedWithoutRedrawing = function () {
        };
        UICollectionViewCell.prototype.removeDelegatesFromCell = function () {
            (0, jquery_1.default)("[".concat(this.id, "]")).off();
        };
        UICollectionViewCell.prototype.finish = function () {
            this.removeDelegatesFromCell();
            this.indexPath = undefined;
            _super.prototype.finish.call(this);
        };
        return UICollectionViewCell;
    }(view_1.default));
    exports.UICollectionViewCell = UICollectionViewCell;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/collectionView/collectionViewLayoutDesign.ts":
/*!****************************************************************!*\
  !*** ./src/model/collectionView/collectionViewLayoutDesign.ts ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./interfaces */ "./src/model/collectionView/interfaces.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, interfaces_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.UICollectionViewLayoutDesign = void 0;
    var UICollectionViewLayoutDesign = /** @class */ (function () {
        function UICollectionViewLayoutDesign() {
            this.gap = "0rem";
            this.padding = "0rem";
            this.flow = interfaces_1.UICollectionViewFlowEnum.vertical;
            this.columnsTemplate = "1fr";
            this.rowsTemplate = "1fr";
            this.overflowX = "auto";
            this.overflowY = "auto";
            this.justifyContent = "";
            this.width = "";
            this.height = "";
            this.backgroundColor = "";
            this.extraStyles = {}; // we can set this object to style stuff that in not define in the variables.
        }
        UICollectionViewLayoutDesign.prototype.getStyle = function (collectionView) {
            var _a, _b;
            var styles = {
                "display": "grid",
                "gap": this.gap,
                "padding": this.padding,
                "grid-auto-flow": this.flow,
                "grid-template-columns": (_a = this.columnsTemplate) !== null && _a !== void 0 ? _a : "",
                "grid-template-rows": (_b = this.rowsTemplate) !== null && _b !== void 0 ? _b : "",
                "justify-content": this.justifyContent,
                "width": this.width,
                "height": this.height,
                "overflow-x": this.overflowX,
                "overflow-y": this.overflowY,
                "max-height": "100%",
                "max-width": "100%",
                "background-color": this.backgroundColor
            };
            Object.entries(this.extraStyles).forEach(function (_a) {
                var key = _a[0], value = _a[1];
                styles[key] = value;
            });
            return styles;
        };
        return UICollectionViewLayoutDesign;
    }());
    exports.UICollectionViewLayoutDesign = UICollectionViewLayoutDesign;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/collectionView/collectionViewSectionCell.ts":
/*!***************************************************************!*\
  !*** ./src/model/collectionView/collectionViewSectionCell.ts ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.UICollectionVievSectionCell = void 0;
    var UICollectionVievSectionCell = /** @class */ (function (_super) {
        __extends(UICollectionVievSectionCell, _super);
        function UICollectionVievSectionCell(html) {
            return _super.call(this, html) || this;
        }
        UICollectionVievSectionCell.prototype.htmlInsertionInterceptor = function (html) {
            var newHtml = _super.prototype.htmlInsertionInterceptor.call(this, html);
            if (newHtml == undefined) {
                return undefined;
            }
            newHtml.setAttribute("UICVCellType", "".concat(this.sectionCellType));
            return newHtml;
        };
        UICollectionVievSectionCell.prototype.finish = function () {
            this.removeDelegatesFromCell();
            _super.prototype.finish.call(this);
        };
        return UICollectionVievSectionCell;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.UICollectionVievSectionCell = UICollectionVievSectionCell;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/collectionView/interfaces.ts":
/*!************************************************!*\
  !*** ./src/model/collectionView/interfaces.ts ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.UICollectionViewSectionCellType = exports.UICollectionViewFlowEnum = void 0;
    var UICollectionViewFlowEnum;
    (function (UICollectionViewFlowEnum) {
        UICollectionViewFlowEnum["vertical"] = "row";
        UICollectionViewFlowEnum["horizontal"] = "column";
    })(UICollectionViewFlowEnum = exports.UICollectionViewFlowEnum || (exports.UICollectionViewFlowEnum = {}));
    var UICollectionViewSectionCellType;
    (function (UICollectionViewSectionCellType) {
        UICollectionViewSectionCellType["header"] = "header";
        UICollectionViewSectionCellType["footer"] = "footer";
    })(UICollectionViewSectionCellType = exports.UICollectionViewSectionCellType || (exports.UICollectionViewSectionCellType = {}));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/dropDownMenu/dropDown.ts":
/*!********************************************!*\
  !*** ./src/model/dropDownMenu/dropDown.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/defaultCollectionView */ "./src/view/defaultViews/defaultCollectionView.ts"), __webpack_require__(/*! ../collectionView/collectionView */ "./src/model/collectionView/collectionView.ts"), __webpack_require__(/*! ../elementModalView/elementModalView */ "./src/model/elementModalView/elementModalView.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, defaultCollectionView_1, collectionView_1, elementModalView_1, insertView_1, view_1, jquery_1, basicHtml_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.DropDown = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    // TO CALL THIS WE CALL GENERAL SETUP OR ONE OF THE SET UPS AVAILABLE FROM ELEMMODALVIEW
    var DropDown = /** @class */ (function (_super) {
        __extends(DropDown, _super);
        function DropDown(callback) {
            var _this = _super.call(this) || this;
            _this.cells = [];
            _this.individualCallbacks = {};
            _this.bgView = "";
            _this.collectionViewStyles = ["bg-secondary", "shadow"];
            _this.callback = callback;
            return _this;
        }
        DropDown.prototype.insertInto = function (insertInfo) {
            var _this = this;
            var view = new view_1.default(window.mApp.utils.makeId(), basicHtml_1.basicHtml);
            this.bgView = view.id;
            view.viewWasInsertedCallback = function (id) {
                (0, jquery_1.default)("[".concat(id, "]")).on('click', function (ev) {
                    ev.preventDefault();
                    ev.stopImmediatePropagation();
                    _this.finish();
                    view.finish();
                });
            };
            view.insertInto(new insertView_1.InsertedViewData(undefined, "body"));
            view.clipToParent();
            return _super.prototype.insertInto.call(this, insertInfo);
        };
        DropDown.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
        };
        DropDown.prototype.addCell = function (cell, callback) {
            this.cells.push(cell);
            if (callback != undefined) {
                this.individualCallbacks[this.cells.length - 1] = callback;
            }
        };
        DropDown.prototype.setFrameAndShow = function () {
            var _this = this;
            _super.prototype.setFrameAndShow.call(this);
            // here we add the collection view with the cells.
            var cv = new collectionView_1.UICollectionView("dropDownCV".concat(window.mApp.utils.makeId(15)), undefined, defaultCollectionView_1.viewDefaultCollectionViewView);
            this.collectionView = cv.id;
            this.insertNewView(new insertView_1.InsertedViewData(cv.id, undefined));
            cv.clipToParent();
            this.alignContent();
            this.styleCollectionView();
            cv.dataSourceDelegate = this;
            cv.delegate = this;
            cv.reloadData();
            var cvSize = cv.getSize();
            (0, jquery_1.default)("body").off().on("click", function (el) {
                el.preventDefault();
                el.stopImmediatePropagation();
                if (el.clientX < _this.frame.x ||
                    el.clientX > _this.frame.x + cvSize.width ||
                    el.clientY < _this.frame.y ||
                    el.clientY > _this.frame.y + cvSize.height) {
                    _this.finish();
                }
            });
        };
        DropDown.prototype.alignContent = function () {
            var cv = this.getView(this.collectionView);
            if (this.direction == elementModalView_1.ElemModalDirection.bottom) {
                cv.style({}, "[".concat(cv.grid.getTag(), "]"));
            }
            if (this.direction == elementModalView_1.ElemModalDirection.top) {
                cv.style({
                    "position": "absolute",
                    "bottom": "0px",
                    "left": "0px",
                    "right": "0px"
                }, "[".concat(cv.grid.getTag(), "]"));
            }
        };
        DropDown.prototype.styleCollectionView = function () {
            var cv = this.getView(this.collectionView);
            (0, jquery_1.default)("[".concat(cv.id, "] [").concat(cv.grid.getTag(), "]")).addClass(this.collectionViewStyles);
        };
        // Collection View callbacks
        DropDown.prototype.cvNumberOfItemsInSection = function (cv, section) {
            return this.cells.length;
        };
        DropDown.prototype.cvNumberOfSections = function (cv) {
            return 1;
        };
        DropDown.prototype.cvCellForItemAt = function (cv, indexPath) {
            return this.cells[indexPath.item];
        };
        DropDown.prototype.cvCellForSectionAt = function (cv, sectionCellType, section) {
            return undefined;
        };
        DropDown.prototype.getSeparator = function (cv, indexPath) {
            return undefined;
        };
        DropDown.prototype.cvDidSelectItem = function (cv, indexPath) {
            var _a, _b, _c;
            if (this.individualCallbacks[indexPath.item] != undefined) {
                (_b = (_a = this.individualCallbacks)[indexPath.item]) === null || _b === void 0 ? void 0 : _b.call(_a, indexPath.item, this);
                return;
            }
            (_c = this.callback) === null || _c === void 0 ? void 0 : _c.call(this, indexPath.item, this);
        };
        DropDown.prototype.cvDidSelectSection = function (cv, section, sectionCellType) {
        };
        DropDown.prototype.finish = function () {
            var _this = this;
            var _a;
            (_a = this.getView(this.bgView)) === null || _a === void 0 ? void 0 : _a.finish();
            (0, jquery_1.default)("body").off("click");
            this.cells = [];
            this.callback = undefined;
            Object.keys(this.individualCallbacks).forEach(function (el) {
                var num = window.mApp.utils.getNumberFromString(el);
                if (num != undefined) {
                    delete _this.individualCallbacks[Number(el)];
                }
            });
            _super.prototype.finish.call(this);
        };
        return DropDown;
    }(elementModalView_1.ElementModalView));
    exports.DropDown = DropDown;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/dropDownMenu/dropDownCell.ts":
/*!************************************************!*\
  !*** ./src/model/dropDownMenu/dropDownCell.ts ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/defaultDropDownCellView */ "./src/view/defaultViews/defaultDropDownCellView.ts"), __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, defaultDropDownCellView_1, collectionViewCell_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.DefaultDropDownCell = void 0;
    jquery_1 = __importDefault(jquery_1);
    var DefaultDropDownCell = /** @class */ (function (_super) {
        __extends(DefaultDropDownCell, _super);
        function DefaultDropDownCell(title, image, arrow, selected, html) {
            if (title === void 0) { title = undefined; }
            if (image === void 0) { image = undefined; }
            if (arrow === void 0) { arrow = undefined; }
            if (selected === void 0) { selected = false; }
            if (html === void 0) { html = defaultDropDownCellView_1.viewDefaultDropDownCell; }
            var _this = _super.call(this, html) || this;
            _this.title = title !== null && title !== void 0 ? title : "";
            return _this;
        }
        DefaultDropDownCell.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        DefaultDropDownCell.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text(this.title);
            return this;
        };
        return DefaultDropDownCell;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.DefaultDropDownCell = DefaultDropDownCell;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/elementModalView/elementModalView.ts":
/*!********************************************************!*\
  !*** ./src/model/elementModalView/elementModalView.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/elementModalView */ "./src/view/defaultViews/elementModalView.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, elementModalView_1, insertView_1, view_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ElementModalView = exports.ElemModalDirection = exports.ElementModalPos = void 0;
    view_1 = __importDefault(view_1);
    // THIS CLASS ALLOWS YOU TO SHOW A MODAL VIEW OF A DETERMINED SIZE ON THE SIDE OF AN ELEMENT.
    var ElementModalPos;
    (function (ElementModalPos) {
        ElementModalPos[ElementModalPos["left"] = 0] = "left";
        ElementModalPos[ElementModalPos["right"] = 1] = "right";
        ElementModalPos[ElementModalPos["center"] = 2] = "center";
        ElementModalPos[ElementModalPos["auto"] = 3] = "auto";
    })(ElementModalPos = exports.ElementModalPos || (exports.ElementModalPos = {}));
    var ElemModalDirection;
    (function (ElemModalDirection) {
        ElemModalDirection[ElemModalDirection["bottom"] = 0] = "bottom";
        ElemModalDirection[ElemModalDirection["top"] = 1] = "top";
        ElemModalDirection[ElemModalDirection["auto"] = 2] = "auto";
    })(ElemModalDirection = exports.ElemModalDirection || (exports.ElemModalDirection = {}));
    var ElementModalView = /** @class */ (function (_super) {
        __extends(ElementModalView, _super);
        function ElementModalView() {
            var _this = _super.call(this, window.mApp.utils.makeId(15), elementModalView_1.viewDefaultElementModal) || this;
            _this.frame = { x: 0, y: 0, height: 0, width: 0 };
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        ElementModalView.prototype.setUpWithElement = function (gap, margin, position, direction, el, width) {
            if (margin === void 0) { margin = gap; }
            if (position === void 0) { position = ElementModalPos.auto; }
            if (direction === void 0) { direction = ElemModalDirection.auto; }
            this.generalSetUp(gap, margin, position, direction, window.mApp.utils.getFrameFromElement(el), width);
        };
        ElementModalView.prototype.setUpWithFrame = function (gap, margin, position, direction, elFrame, width) {
            if (margin === void 0) { margin = gap; }
            if (position === void 0) { position = ElementModalPos.auto; }
            if (direction === void 0) { direction = ElemModalDirection.auto; }
        };
        ElementModalView.prototype.setUpWithPoint = function (gap, margin, position, direction, point, width) {
            if (margin === void 0) { margin = gap; }
            if (position === void 0) { position = ElementModalPos.auto; }
            if (direction === void 0) { direction = ElemModalDirection.auto; }
        };
        ElementModalView.prototype.generalSetUp = function (gap, margin, position, direction, elFrame, width) {
            if (margin === void 0) { margin = gap; }
            if (position === void 0) { position = ElementModalPos.auto; }
            if (direction === void 0) { direction = ElemModalDirection.auto; }
            this.gap = gap;
            this.margin = margin;
            this.position = position;
            this.direction = direction;
            this.elFrame = elFrame;
            var farmeWidth = this.elFrame.width;
            this.frame.width = width !== null && width !== void 0 ? width : farmeWidth;
            this.findAutoPositions();
            this.setFrameAndShow();
        };
        ElementModalView.prototype.findAutoPositions = function () {
            var centerEl = window.mApp.utils.getCenter(this.elFrame);
            var viewPort = window.mApp.utils.windowSize();
            if (this.position == ElementModalPos.auto) {
                if (centerEl.x > viewPort.width / 2) {
                    this.position = ElementModalPos.left;
                }
                else {
                    this.position = ElementModalPos.right;
                }
            }
            if (this.direction != ElemModalDirection.auto) {
                return;
            }
            if (centerEl.y > viewPort.height / 2) {
                this.direction = ElemModalDirection.top;
            }
            else {
                this.direction = ElemModalDirection.bottom;
            }
        };
        ElementModalView.prototype.setFrameAndShow = function () {
            //Find auto positions;
            var document = window.mApp.utils.windowSize();
            // LEFT BOTTOM
            if (this.position == ElementModalPos.left && this.direction == ElemModalDirection.bottom) {
                this.frame.height = document.height - this.elFrame.y - this.margin;
                this.frame.x = this.elFrame.x - this.frame.width - this.gap;
                this.frame.y = this.elFrame.y;
            }
            // LEFT TOP;
            if (this.position == ElementModalPos.left && this.direction == ElemModalDirection.top) {
                this.frame.height = this.elFrame.y + this.elFrame.height - this.margin;
                this.frame.x = this.elFrame.x - this.gap - this.frame.width;
                this.frame.y = this.margin;
            }
            // RIGHT BOTTOM
            if (this.position == ElementModalPos.right && this.direction == ElemModalDirection.bottom) {
                this.frame.height = document.height - this.margin - this.elFrame.y;
                this.frame.x = this.elFrame.x + this.elFrame.width + this.gap;
                this.frame.y = this.elFrame.y;
            }
            // RIGHT BOTTOM
            if (this.position == ElementModalPos.right && this.direction == ElemModalDirection.top) {
                this.frame.height = this.elFrame.y + this.elFrame.height - this.margin;
                this.frame.x = this.elFrame.x + this.elFrame.width + this.gap;
                this.frame.y = this.margin;
            }
            // CENTER BOTTOM
            if (this.position == ElementModalPos.center && this.direction == ElemModalDirection.bottom) {
                this.frame.height = document.height - (this.elFrame.y + this.elFrame.height + this.gap + this.margin);
                this.frame.x = this.elFrame.x + (this.elFrame.width / 2) - (this.frame.width / 2);
                this.frame.y = this.elFrame.y + this.elFrame.height + this.gap;
            }
            // CENTER TOP
            if (this.position == ElementModalPos.center && this.direction == ElemModalDirection.top) {
                this.frame.height = this.elFrame.y - this.gap - this.margin;
                this.frame.x = this.elFrame.x + (this.elFrame.width / 2) - (this.frame.width / 2);
                this.frame.y = this.margin;
            }
            this.setConstraints({ left: "".concat(this.frame.x, "px"),
                top: "".concat(this.frame.y, "px"),
                height: "".concat(this.frame.height, "px"),
                width: "".concat(this.frame.width, "px")
            });
        };
        ElementModalView.prototype.finish = function () {
            _super.prototype.finish.call(this);
        };
        return ElementModalView;
    }(view_1.default));
    exports.ElementModalView = ElementModalView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grabberObserver/grabberObserver.ts":
/*!******************************************************!*\
  !*** ./src/model/grabberObserver/grabberObserver.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ResizingStatus = void 0;
    jquery_1 = __importDefault(jquery_1);
    var ResizingStatus;
    (function (ResizingStatus) {
        ResizingStatus[ResizingStatus["started"] = 0] = "started";
        ResizingStatus[ResizingStatus["resizing"] = 1] = "resizing";
        ResizingStatus[ResizingStatus["finished"] = 2] = "finished";
    })(ResizingStatus = exports.ResizingStatus || (exports.ResizingStatus = {}));
    var GrabberObserver = /** @class */ (function () {
        function GrabberObserver(insertedIntoData) {
            this.isActive = true;
            this.insertedIntoData = insertedIntoData;
            this.setUpResizing();
        }
        GrabberObserver.prototype.setUpResizing = function () {
            var _this = this;
            var tag = this.insertedIntoData.getTag();
            (0, jquery_1.default)("[".concat(tag, "]")).on('mousedown', function (e) {
                if (!_this.isActive) {
                    return;
                }
                _this.resizingHandler(ResizingStatus.started, e);
            });
            return true;
        };
        GrabberObserver.prototype.resizingHandler = function (status, e) {
            var _this = this;
            var _a;
            if (this.resizeData == undefined && status != ResizingStatus.started) {
                this.resizeData = { status: ResizingStatus.started };
            }
            else {
                if (this.resizeData != undefined) {
                    this.resizeData.status = status;
                }
            }
            switch (status) {
                case ResizingStatus.started:
                    (0, jquery_1.default)("body").on('mouseup', function (e) {
                        _this.resizingHandler(ResizingStatus.finished, e);
                    });
                    (0, jquery_1.default)("body").on('mousemove', function (e) {
                        _this.resizingHandler(ResizingStatus.resizing, e);
                    });
                    return;
                case ResizingStatus.resizing:
                    this.resizeMiddleMan(e, this.resizeData);
                    return;
                case ResizingStatus.finished:
                    if (((_a = this.resizeData) === null || _a === void 0 ? void 0 : _a.status) != undefined) {
                        this.resizeData.status = ResizingStatus.finished;
                    }
                    this.resize(e, this.resizeData);
                    this.resizeData = undefined;
                    (0, jquery_1.default)("body").off('mousemove');
                    (0, jquery_1.default)("body").off('mouseup');
                    return;
            }
        };
        GrabberObserver.prototype.resizeMiddleMan = function (e, data) {
            var _a;
            e.preventDefault();
            if (data == undefined) {
                return;
            }
            if (e.clientX == undefined) {
                return;
            }
            if (e.clientY == undefined) {
                return;
            }
            var fixedData = data;
            if (data.status == ResizingStatus.started) {
                fixedData.startPosition = { x: e.clientX, y: e.clientY };
                fixedData.currentPosition = { x: e.clientX, y: e.clientY };
                fixedData.previousPosition = { x: e.clientX, y: e.clientY };
                fixedData.positionFromOrigin = { x: e.clientX - fixedData.startPosition.x, y: e.clientY - fixedData.startPosition.y };
            }
            else {
                fixedData.previousPosition = fixedData.currentPosition;
                fixedData.currentPosition = { x: e.clientX, y: e.clientY };
                fixedData.positionFromOrigin = { x: e.clientX - fixedData.startPosition.x, y: e.clientY - fixedData.startPosition.y };
            }
            this.resizeData = fixedData;
            if (((_a = e.originalEvent) === null || _a === void 0 ? void 0 : _a.buttons) == 0 && this.resizeData.status == ResizingStatus.resizing) {
                this.resizeData.status = ResizingStatus.finished;
                this.resizingHandler(this.resizeData.status, e);
                return;
            }
            this.resize(e, this.resizeData);
        };
        GrabberObserver.prototype.resize = function (e, data) {
            var _a;
            (_a = this.interface) === null || _a === void 0 ? void 0 : _a.grabberResize(e, data);
        };
        GrabberObserver.prototype.finished = function () {
            var _a, _b;
            var tag = this.insertedIntoData.getTag();
            (0, jquery_1.default)("[".concat(tag, "grabber]")).off('mousedown');
            (0, jquery_1.default)("body").off('mousemove');
            (0, jquery_1.default)("body").off('mouseup');
            (0, jquery_1.default)("[".concat(tag, "]")).off();
            if (((_a = this.interface) === null || _a === void 0 ? void 0 : _a.grabberFinished) != undefined) {
                (_b = this.interface) === null || _b === void 0 ? void 0 : _b.grabberFinished();
            }
            this.interface = undefined;
        };
        return GrabberObserver;
    }());
    exports["default"] = GrabberObserver;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/grid.ts":
/*!********************************!*\
  !*** ./src/model/grid/grid.ts ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var GridJs = /** @class */ (function (_super) {
        __extends(GridJs, _super);
        function GridJs(id, html) {
            var _this = _super.call(this, id, html) || this;
            // We will have a grid distribution.
            _this.gridDistribution = [[]];
            _this.gridElements = []; //
            _this.gridDesing = { columns: [], rows: [] };
            return _this;
        }
        GridJs.prototype.setDistribution = function (distribution) {
            this.gridDistribution = distribution;
            var newElementsPosition = {};
            for (var row = 1; row != distribution.length + 1; row++) {
                for (var column = 1; column != distribution[row - 1].length + 1; column++) {
                    var currentGridId = distribution[row - 1][column - 1];
                    var currentGridEl = window.mApp.views.get(currentGridId);
                    if (currentGridEl == undefined) {
                        continue;
                    }
                    var currentElPosition;
                    if (newElementsPosition[currentGridId] == undefined) { // start;
                        currentElPosition = { column: { from: column, to: column }, row: { from: row, to: row } };
                        newElementsPosition[currentGridId] = currentElPosition;
                    }
                    else {
                        currentElPosition = newElementsPosition[currentGridId];
                        currentElPosition.column.to = column + 1;
                        currentElPosition.row.to = row + 1;
                        newElementsPosition[currentGridId] = currentElPosition;
                    }
                }
            }
            // consider updating the elements that are not on the distribution to 0 (make em dissapear)
            for (var _i = 0, _a = Object.entries(newElementsPosition); _i < _a.length; _i++) {
                var _b = _a[_i], k = _b[0], v = _b[1];
                window.mApp.views.get(k).setPostion(v);
            }
            for (var _c = 0, _d = this.gridElements; _c < _d.length; _c++) {
                var x = _d[_c];
                var view = window.mApp.views.get(x);
                if (newElementsPosition[x] == undefined) {
                    view === null || view === void 0 ? void 0 : view.isHidden(true);
                }
                else {
                    view === null || view === void 0 ? void 0 : view.isHidden(false);
                }
            }
        };
        GridJs.prototype.setDesign = function (design) {
            this.gridDesing = design;
            var columns = design.columns.map(function (el) {
                return "".concat(el.size).concat(el.magnitude);
            }).join(' ');
            var rows = design.rows.map(function (el) {
                return "".concat(el.size).concat(el.magnitude);
            }).join(' ');
            (0, jquery_1.default)("[".concat(this.id, "]")).css({ 'grid-template-columns': "".concat(columns), 'grid-template-rows': "".concat(rows) });
        };
        return GridJs;
    }(view_1.default));
    exports["default"] = GridJs;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/gridElement.ts":
/*!***************************************!*\
  !*** ./src/model/grid/gridElement.ts ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ../../view/baseGrid/baseGridElementView */ "./src/view/baseGrid/baseGridElementView.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, baseGridElementView_1, insertView_1, basicHtml_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.GridElementWithView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var GridElement = /** @class */ (function (_super) {
        __extends(GridElement, _super);
        function GridElement(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(15); }
            if (html === void 0) { html = baseGridElementView_1.viewBaseGridElement; }
            return _super.call(this, id, html) || this;
        }
        GridElement.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            return this;
        };
        GridElement.prototype.setPostion = function (position) {
            this.position = position;
            (0, jquery_1.default)("[".concat(this.id, "]")).css({ 'grid-column': "".concat(position.column.from, " / ").concat(position.column.to), 'grid-row': "".concat(position.row.from, " / ").concat(position.row.to) });
        };
        GridElement.prototype.finish = function () {
            _super.prototype.finish.call(this);
        };
        return GridElement;
    }(view_1.default));
    exports["default"] = GridElement;
    var GridElementWithView = /** @class */ (function (_super) {
        __extends(GridElementWithView, _super);
        function GridElementWithView(view, id, html) {
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = _super.call(this, id, html) || this;
            _this.addView = view;
            _this.setInsertDefaultViews();
            return _this;
        }
        GridElementWithView.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        GridElementWithView.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            var view = this.getView(this.addView);
            this.insertNewView(new insertView_1.InsertedViewData(this.addView, undefined));
            view === null || view === void 0 ? void 0 : view.clipToParent();
            return this;
        };
        return GridElementWithView;
    }(GridElement));
    exports.GridElementWithView = GridElementWithView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/gridInterfaces.ts":
/*!******************************************!*\
  !*** ./src/model/grid/gridInterfaces.ts ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.GridElementDesign = void 0;
    var GridElementDesign = /** @class */ (function () {
        function GridElementDesign(size, magnitude, isResizable, lockSizes, limitBounds) {
            if (lockSizes === void 0) { lockSizes = undefined; }
            if (limitBounds === void 0) { limitBounds = { min: 40, max: 999999 }; }
            this.limitBounds = { min: 0, max: 999999 };
            this.size = size;
            this.magnitude = magnitude;
            this.isResizable = isResizable;
            this.limitBounds = limitBounds;
            this.lockSizes = lockSizes;
        }
        GridElementDesign.prototype.isAuto = function () {
            return this.size == "auto";
        };
        GridElementDesign.prototype.addPx = function (px, gridDesignElements, gridSize, previousSize) {
            var parsedNewSize = 0;
            if (this.isAuto()) {
                parsedNewSize = gridSize;
                for (var _i = 0, gridDesignElements_1 = gridDesignElements; _i < gridDesignElements_1.length; _i++) {
                    var x = gridDesignElements_1[_i];
                    if (x.size == "auto") {
                        continue;
                    }
                    parsedNewSize -= Number(x.size);
                }
            }
            else {
                parsedNewSize = Number(this.size) + px;
            }
            // we check the limit size and we fix it so it doesnt go above and below.
            if (parsedNewSize >= this.limitBounds.max) {
                parsedNewSize = this.limitBounds.max;
                if (this.isAuto()) {
                    return false;
                }
            }
            if (parsedNewSize <= this.limitBounds.min) {
                parsedNewSize = this.limitBounds.min;
                if (this.isAuto() && px < 0) {
                    return false;
                }
            }
            // we check the disabed resizes and update the size in case we are between them.
            if (this.lockSizes != undefined) {
                for (var _a = 0, _b = this.lockSizes; _a < _b.length; _a++) {
                    var disabled = _b[_a];
                    if (parsedNewSize >= disabled.range.from && parsedNewSize <= disabled.range.to) {
                        if (this.isAuto()) {
                            return false;
                        }
                        if (disabled.resize != undefined) {
                            parsedNewSize = disabled.resize;
                        }
                        break;
                    }
                }
            }
            if (this.size != "auto") {
                if (previousSize == parsedNewSize) {
                    return false;
                }
                this.size = "".concat(parsedNewSize);
            }
            return true;
        };
        return GridElementDesign;
    }());
    exports.GridElementDesign = GridElementDesign;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/separator/horizontalSeparator.ts":
/*!*********************************************************!*\
  !*** ./src/model/grid/separator/horizontalSeparator.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../view/baseGrid/baseGridSeparatorView */ "./src/view/baseGrid/baseGridSeparatorView.ts"), __webpack_require__(/*! ./separator */ "./src/model/grid/separator/separator.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, baseGridSeparatorView_1, separator_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    separator_1 = __importDefault(separator_1);
    jquery_1 = __importDefault(jquery_1);
    var GridSeparatorHorizontal = /** @class */ (function (_super) {
        __extends(GridSeparatorHorizontal, _super);
        function GridSeparatorHorizontal(id, html, canResize) {
            if (html === void 0) { html = baseGridSeparatorView_1.viewBaseGridHSeparator; }
            if (canResize === void 0) { canResize = true; }
            return _super.call(this, id, html, canResize) || this;
        }
        GridSeparatorHorizontal.prototype.setCursorResize = function () {
            (0, jquery_1.default)('*').css('cursor', 'ns-resize');
        };
        GridSeparatorHorizontal.prototype.getIndexSeparator = function () {
            if (this.position == undefined) {
                return undefined;
            }
            return this.position.row.from - 1;
        };
        GridSeparatorHorizontal.prototype.getSpecificGridDesign = function () {
            var grid = this.insertedInto.getView();
            if (grid.gridDesing == undefined) {
                return undefined;
            }
            return grid.gridDesing.rows;
        };
        GridSeparatorHorizontal.prototype.insertSpecificDesign = function (newDesign) {
            var grid = this.insertedInto.getView();
            if (grid.gridDesing == undefined) {
                return false;
            }
            grid.gridDesing.rows = newDesign;
            grid.setDesign(grid.gridDesing);
            return true;
        };
        GridSeparatorHorizontal.prototype.getSepcificGrabberPos = function (pos) {
            return pos.y;
        };
        GridSeparatorHorizontal.prototype.getSpecificGridSize = function () {
            return this.getGridSize().height;
        };
        return GridSeparatorHorizontal;
    }(separator_1.default));
    exports["default"] = GridSeparatorHorizontal;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/separator/separator.ts":
/*!***********************************************!*\
  !*** ./src/model/grid/separator/separator.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../grabberObserver/grabberObserver */ "./src/model/grabberObserver/grabberObserver.ts"), __webpack_require__(/*! ../../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../gridElement */ "./src/model/grid/gridElement.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, grabberObserver_1, insertView_1, gridElement_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    grabberObserver_1 = __importStar(grabberObserver_1);
    gridElement_1 = __importDefault(gridElement_1);
    jquery_1 = __importDefault(jquery_1);
    // The html element that will handle the resizing from the separator will have the attribute $idgrabber
    var GridSeparator = /** @class */ (function (_super) {
        __extends(GridSeparator, _super);
        function GridSeparator(id, html, canResize) {
            if (canResize === void 0) { canResize = true; }
            var _this = _super.call(this, id, html) || this;
            _this.canResize = canResize;
            return _this;
        }
        GridSeparator.prototype.setCanResize = function (canResize) {
            if (this.mGrabberObserver == undefined) {
                return;
            }
            this.mGrabberObserver.isActive = canResize;
            if (!this.mGrabberObserver.isActive) {
                (0, jquery_1.default)("[".concat(this.id, "grabber]")).css({ 'opacity': '0' }).removeClass("cursor");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "grabber]")).css({ 'opacity': '1' });
                if (!(0, jquery_1.default)("[".concat(this.id, "grabber]")).css({ 'opacity': '1' }).hasClass("cursor")) {
                    (0, jquery_1.default)("[".concat(this.id, "grabber]")).addClass("cursor");
                }
            }
        };
        GridSeparator.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.mGrabberObserver = new grabberObserver_1.default(new insertView_1.InsertedViewData(this.id, '$idgrabber'));
            this.mGrabberObserver.interface = this;
            this.setCanResize(this.canResize);
        };
        GridSeparator.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            return this;
        };
        GridSeparator.prototype.finish = function () {
            _super.prototype.finish.call(this);
        };
        GridSeparator.prototype.finished = function () {
            var _a;
            (_a = this.mGrabberObserver) === null || _a === void 0 ? void 0 : _a.finished();
            this.mGrabberObserver = undefined;
        };
        GridSeparator.prototype.getIndexSeparator = function () {
            if (this.position == undefined) {
                return undefined;
            }
            // if is an horizontal separator we return the position on the rows;
            // If is a vertical separator we return the poisition of the columns;
            // its important that we fix the values, rest 1 to the from.
            return undefined;
        };
        GridSeparator.prototype.getSpecificGridDesign = function () {
            return undefined;
        };
        GridSeparator.prototype.getSepcificGrabberPos = function (pos) {
            return pos.x;
        };
        GridSeparator.prototype.insertSpecificDesign = function (newDesign) {
        };
        GridSeparator.prototype.insertDesing = function (design) {
            var grid = this.insertedInto.getView();
            if (grid.gridDesing == undefined) {
                return false;
            }
            grid.gridDesing = design;
            grid.setDesign(grid.gridDesing);
            return true;
        };
        GridSeparator.prototype.getGridSize = function () {
            var gridSize = { height: 0, width: 0 };
            var gridEl = (0, jquery_1.default)("[".concat(this.insertedInto.view, "]"));
            if (gridEl != undefined) {
                var height = gridEl.outerHeight();
                var width = gridEl.outerWidth();
                if (height != undefined) {
                    gridSize.height = height;
                }
                if (width != undefined) {
                    gridSize.width = width;
                }
            }
            return gridSize;
        };
        GridSeparator.prototype.getSpecificGridSize = function () {
            return this.getGridSize().height;
        };
        GridSeparator.prototype.setCursorResize = function () {
            (0, jquery_1.default)('*').css('cursor', '');
        };
        GridSeparator.prototype.removeCursorResize = function () {
            (0, jquery_1.default)('*').css('cursor', "");
        };
        GridSeparator.prototype.grabberResize = function (e, data) {
            var _a, _b;
            if (data == undefined) {
                return;
            }
            if (data.status == grabberObserver_1.ResizingStatus.started) {
                this.gridDesign = (_a = this.getSpecificGridDesign()) === null || _a === void 0 ? void 0 : _a.map(function (val) { return window.mApp.utils.deepCopy(val); });
                (0, jquery_1.default)("[".concat(this.id, "grabber] > div")).addClass("separator-hover-clicked");
                (0, jquery_1.default)("[".concat(this.id, "grabber] > div")).removeClass("separator-hover");
                this.setCursorResize();
            }
            if (data.status == grabberObserver_1.ResizingStatus.finished) {
                (0, jquery_1.default)("[".concat(this.id, "grabber] > div")).removeClass("separator-hover-clicked");
                (0, jquery_1.default)("[".concat(this.id, "grabber] > div")).addClass("separator-hover");
                this.removeCursorResize();
            }
            var design = [];
            (_b = this.gridDesign) === null || _b === void 0 ? void 0 : _b.forEach(function (el) { design.push(window.mApp.utils.deepCopy(el)); });
            var separatorIndex = this.getIndexSeparator();
            var positionFromOrigin = data === null || data === void 0 ? void 0 : data.positionFromOrigin;
            if (design == undefined || separatorIndex == undefined || positionFromOrigin == undefined) {
                return;
            }
            var pos = this.getSepcificGrabberPos(positionFromOrigin);
            var makeSmallerPos = separatorIndex - 1;
            var makeBiggerPos = separatorIndex + 1;
            if (pos > 0) {
                makeBiggerPos = separatorIndex - 1;
                makeSmallerPos = separatorIndex + 1;
            }
            if (pos < 0) {
                makeBiggerPos = separatorIndex + 1;
                makeSmallerPos = separatorIndex - 1;
            }
            var makeBigger = design[makeBiggerPos];
            var makeSmaller = design[makeSmallerPos];
            var gridSize = this.getSpecificGridSize();
            var currentDesign = this.getSpecificGridDesign();
            if (currentDesign == undefined) {
                return;
            }
            var makeBigeerResult = makeBigger.addPx(this.getPositiveFromNumber(pos), design, gridSize, Number(currentDesign[makeBiggerPos].size));
            var makeSmallerResult = makeSmaller.addPx(this.getNegativeFromNumber(pos), design, gridSize, Number(currentDesign[makeSmallerPos].size));
            if (!makeSmallerResult || !makeBigeerResult) {
                return;
            }
            this.insertSpecificDesign(design);
        };
        GridSeparator.prototype.getPositiveFromNumber = function (number) {
            if (number < 0) {
                return number * (-1);
            }
            return number;
        };
        GridSeparator.prototype.getNegativeFromNumber = function (number) {
            if (number > 0) {
                return number * (-1);
            }
            return number;
        };
        return GridSeparator;
    }(gridElement_1.default));
    exports["default"] = GridSeparator;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/grid/separator/verticalSeparator.ts":
/*!*******************************************************!*\
  !*** ./src/model/grid/separator/verticalSeparator.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../view/baseGrid/baseGridSeparatorView */ "./src/view/baseGrid/baseGridSeparatorView.ts"), __webpack_require__(/*! ./separator */ "./src/model/grid/separator/separator.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, baseGridSeparatorView_1, separator_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    separator_1 = __importDefault(separator_1);
    jquery_1 = __importDefault(jquery_1);
    var GridSeparatorVertical = /** @class */ (function (_super) {
        __extends(GridSeparatorVertical, _super);
        function GridSeparatorVertical(id, html, canResize) {
            if (html === void 0) { html = baseGridSeparatorView_1.viewBaseGridVSeparator; }
            if (canResize === void 0) { canResize = true; }
            return _super.call(this, id, html, canResize) || this;
        }
        GridSeparatorVertical.prototype.setCursorResize = function () {
            (0, jquery_1.default)('*').css('cursor', 'ew-resize');
        };
        GridSeparatorVertical.prototype.getIndexSeparator = function () {
            if (this.position == undefined) {
                return undefined;
            }
            return this.position.column.from - 1;
        };
        GridSeparatorVertical.prototype.getSpecificGridDesign = function () {
            var grid = this.insertedInto.getView();
            if (grid.gridDesing == undefined) {
                return undefined;
            }
            return grid.gridDesing.columns;
        };
        GridSeparatorVertical.prototype.insertSpecificDesign = function (newDesign) {
            var grid = this.insertedInto.getView();
            if (grid.gridDesing == undefined) {
                return false;
            }
            grid.gridDesing.columns = newDesign;
            grid.setDesign(grid.gridDesing);
            return true;
        };
        GridSeparatorVertical.prototype.getSepcificGrabberPos = function (pos) {
            return pos.x;
        };
        GridSeparatorVertical.prototype.getSpecificGridSize = function () {
            return this.getGridSize().width;
        };
        return GridSeparatorVertical;
    }(separator_1.default));
    exports["default"] = GridSeparatorVertical;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/menuSelector/ menuSelector.ts":
/*!*************************************************!*\
  !*** ./src/model/menuSelector/ menuSelector.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/menuSelector */ "./src/view/defaultViews/menuSelector.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts"), __webpack_require__(/*! ./menuSelectorLayout */ "./src/model/menuSelector/menuSelectorLayout.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, menuSelector_1, insertView_1, view_1, menuSelectorLayout_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.MenuSelctor = void 0;
    view_1 = __importDefault(view_1);
    var MenuSelctor = /** @class */ (function (_super) {
        __extends(MenuSelctor, _super);
        function MenuSelctor(id, views, selected, html) {
            if (html === void 0) { html = menuSelector_1.viewDefaultMenuSelector; }
            var _this = _super.call(this, id, html) || this;
            _this.cellsHolderId = "";
            _this.viewsHolderId = "";
            _this.menuViews = [];
            _this.layout = new menuSelectorLayout_1.MenuSelectorLayout();
            _this.menuViews = views;
            if (selected == undefined && views.length > 0) {
                _this.selectedView = views[0];
            }
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        MenuSelctor.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        MenuSelctor.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            this.setUpCellsHolder();
            this.setUpViewsHolder();
            return this;
        };
        MenuSelctor.prototype.setUpCellsHolder = function () {
            var cellsHolder = this.layout.getCellsHolderCollectionView();
            this.cellsHolderId = cellsHolder.id;
            cellsHolder.delegate = this;
            cellsHolder.dataSourceDelegate = this;
            this.insertNewView(new insertView_1.InsertedViewData(cellsHolder.id));
            this.layout.styleCellsHolder(cellsHolder);
            cellsHolder.setConstraints(this.layout.getCellsHolderConstraints());
            cellsHolder.reloadData();
        };
        MenuSelctor.prototype.setUpViewsHolder = function () {
            var viewsHolder = this.layout.getViewsHolder(this.menuViews);
            this.viewsHolderId = viewsHolder.id;
            this.insertNewView(new insertView_1.InsertedViewData(viewsHolder.id));
            viewsHolder.setConstraints(this.layout.getViewsHolderConstraints());
        };
        MenuSelctor.prototype.selectByViewId = function (selected) {
            var _a;
            this.selectedView = selected;
            (_a = this.interface) === null || _a === void 0 ? void 0 : _a.menuSelectorWasSelected(selected);
            var viewsHolder = this.getView(this.viewsHolderId);
            viewsHolder.showView(this.selectedView);
            this.getView(this.cellsHolderId).reloadData();
        };
        MenuSelctor.prototype.selectByViewName = function (name) {
            var _a;
            console.log(name);
            for (var _i = 0, _b = this.menuViews; _i < _b.length; _i++) {
                var x = _b[_i];
                var view = this.getView(x);
                if (view == undefined) {
                    continue;
                }
                if ((_a = name == view.viewName) !== null && _a !== void 0 ? _a : "") {
                    this.selectByViewId(x);
                    return;
                }
            }
        };
        // Collection view | Cells holder Delegates
        MenuSelctor.prototype.cvNumberOfItemsInSection = function (cv, section) {
            return this.menuViews.length;
        };
        MenuSelctor.prototype.cvNumberOfSections = function (cv) {
            return 1;
        };
        MenuSelctor.prototype.cvCellForItemAt = function (cv, indexPath) {
            return this.layout.getCell(cv, indexPath, this.menuViews, this.menuViews[indexPath.item] == this.selectedView);
        };
        MenuSelctor.prototype.cvCellForSectionAt = function (cv, sectionCellType, section) {
            return undefined;
        };
        MenuSelctor.prototype.cvDidSelectItem = function (cv, indexPath) {
            var selected = this.menuViews[indexPath.item];
            if (this.selectedView == selected) {
                return;
            }
            this.selectByViewId(selected);
        };
        MenuSelctor.prototype.cvDidSelectSection = function (cv, section, sectionCellType) {
            console.log(section);
        };
        MenuSelctor.prototype.finish = function () {
            _super.prototype.finish.call(this);
            this.interface = undefined;
        };
        return MenuSelctor;
    }(view_1.default));
    exports.MenuSelctor = MenuSelctor;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/menuSelector/menuSelectorCell.ts":
/*!****************************************************!*\
  !*** ./src/model/menuSelector/menuSelectorCell.ts ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleSelectorCell = void 0;
    jquery_1 = __importDefault(jquery_1);
    var ModuleSelectorCell = /** @class */ (function (_super) {
        __extends(ModuleSelectorCell, _super);
        function ModuleSelectorCell(indexPath, collectionViewId, menuSelectorViewId, selected, html) {
            var _this = _super.call(this, html) || this;
            _this.selected = false;
            _this.menuSelectorViewId = menuSelectorViewId;
            _this.selected = selected;
            return _this;
        }
        ModuleSelectorCell.prototype.viewWasInserted = function () {
            _super.prototype.viewWasCreated.call(this);
            this.setUp();
        };
        ModuleSelectorCell.prototype.setUp = function () {
            var _a, _b;
            _super.prototype.setUp.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .one-line")).text((_b = (_a = this.getView(this.menuSelectorViewId)) === null || _a === void 0 ? void 0 : _a.viewName) !== null && _b !== void 0 ? _b : "");
            if (this.selected) {
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass("selected");
            }
            return this;
        };
        return ModuleSelectorCell;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.ModuleSelectorCell = ModuleSelectorCell;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/menuSelector/menuSelectorLayout.ts":
/*!******************************************************!*\
  !*** ./src/model/menuSelector/menuSelectorLayout.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/menuSelector */ "./src/view/defaultViews/menuSelector.ts"), __webpack_require__(/*! ../collectionView/collectionView */ "./src/model/collectionView/collectionView.ts"), __webpack_require__(/*! ../collectionView/interfaces */ "./src/model/collectionView/interfaces.ts"), __webpack_require__(/*! ../viewsHolder/viewsHolder */ "./src/model/viewsHolder/viewsHolder.ts"), __webpack_require__(/*! ./menuSelectorCell */ "./src/model/menuSelector/menuSelectorCell.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, menuSelector_1, collectionView_1, interfaces_1, viewsHolder_1, menuSelectorCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.MenuSelectorLayout2 = exports.MenuSelectorLayout = void 0;
    var MenuSelectorLayout = /** @class */ (function () {
        function MenuSelectorLayout() {
        }
        MenuSelectorLayout.prototype.getCellsHolderCollectionView = function () {
            var cv = new collectionView_1.UICollectionView("menuSelector".concat(window.mApp.utils.makeId(15)));
            if (cv.layoutDesign == undefined) {
                return cv;
            }
            cv.layoutDesign.flow = interfaces_1.UICollectionViewFlowEnum.horizontal;
            cv.layoutDesign.columnsTemplate = "auto";
            cv.layoutDesign.justifyContent = "start";
            cv.layoutDesign.height = "100%";
            cv.layoutDesign.width = "100%";
            cv.layoutDesign.overflowY = "visible";
            cv.layoutDesign.overflowX = "visible";
            return cv;
        };
        MenuSelectorLayout.prototype.getCellsHolderConstraints = function () {
            return { top: "0px", right: "0px", left: "0px", height: "40px" };
        };
        MenuSelectorLayout.prototype.getViewsHolder = function (menuViews) {
            return new viewsHolder_1.ViewsHolder("cvcell" + window.mApp.utils.makeId(15), menuViews, undefined, undefined);
        };
        MenuSelectorLayout.prototype.getViewsHolderConstraints = function () {
            return { top: "40px", right: "0px", bottom: "0px", left: "0px" };
        };
        MenuSelectorLayout.prototype.getCell = function (cv, indexPath, menuViews, selected) {
            return new menuSelectorCell_1.ModuleSelectorCell(indexPath, cv.id, menuViews[indexPath.item], selected, menuSelector_1.viewDefaultMenuSelectorCell);
        };
        MenuSelectorLayout.prototype.styleViewsHolder = function (view) {
        };
        MenuSelectorLayout.prototype.styleCellsHolder = function (view) {
            view.style({
                "line-height": "1",
                "box-sizing": "border-box",
                "border-bottom": "1px solid rgba(255,255,255,.1)"
            });
        };
        MenuSelectorLayout.prototype.getView = function (id) {
            // functionality function.
            return window.mApp.views.get(id);
        };
        return MenuSelectorLayout;
    }());
    exports.MenuSelectorLayout = MenuSelectorLayout;
    var MenuSelectorLayout2 = /** @class */ (function (_super) {
        __extends(MenuSelectorLayout2, _super);
        function MenuSelectorLayout2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MenuSelectorLayout2.prototype.styleCellsHolder = function (view) {
            view.style({
                "line-height": "1",
                "box-sizing": "border-box",
                "border-bottom": "1px solid rgba(255,255,255,.1)",
                "padding-left": "0.5rem"
            });
        };
        MenuSelectorLayout2.prototype.getCell = function (cv, indexPath, menuViews, selected) {
            return new menuSelectorCell_1.ModuleSelectorCell(indexPath, cv.id, menuViews[indexPath.item], selected, menuSelector_1.viewDefaultMenuSelectorCell2);
        };
        MenuSelectorLayout2.prototype.getCellsHolderConstraints = function () {
            return { top: "0px", right: "0px", left: "0px", height: "40px" };
        };
        MenuSelectorLayout2.prototype.getViewsHolderConstraints = function () {
            return { top: "40px", right: "0px", bottom: "0px", left: "0px" };
        };
        return MenuSelectorLayout2;
    }(MenuSelectorLayout));
    exports.MenuSelectorLayout2 = MenuSelectorLayout2;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/autoSave.ts":
/*!**************************************!*\
  !*** ./src/model/module/autoSave.ts ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AutoSave = void 0;
    var AutoSave = /** @class */ (function () {
        function AutoSave() {
            this.stopAutoSave = false;
        }
        AutoSave.prototype.start = function () {
            var _this = this;
            setInterval(function () {
                if (window.mApp.moduleManager.moduleObject != undefined && !_this.stopAutoSave) {
                    console.log("AutoSaving the module.");
                    window.mApp.moduleManager.saveModuleToLocalStorage();
                    Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach(function (el) { var _a; return (_a = el.moduleAutoSaved) === null || _a === void 0 ? void 0 : _a.call(el); });
                }
                else {
                    console.log("falied saving the module.");
                }
            }, 1000 * 30);
        };
        AutoSave.shared = new AutoSave();
        return AutoSave;
    }());
    exports.AutoSave = AutoSave;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/interfaces.ts":
/*!****************************************!*\
  !*** ./src/model/module/interfaces.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleDataTypeEnum = void 0;
    var ModuleDataTypeEnum;
    (function (ModuleDataTypeEnum) {
        ModuleDataTypeEnum["section"] = "section";
        ModuleDataTypeEnum["cell"] = "cell";
    })(ModuleDataTypeEnum = exports.ModuleDataTypeEnum || (exports.ModuleDataTypeEnum = {}));
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/jsGenerator.ts":
/*!*****************************************!*\
  !*** ./src/model/module/jsGenerator.ts ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleJavascriptGenerator = void 0;
    var ModuleJavascriptGenerator = /** @class */ (function () {
        function ModuleJavascriptGenerator() {
        }
        ModuleJavascriptGenerator.prototype.addJsIndicators = function (js) {
            return "/* JAVASCRIPT STARTS */ ".concat(js, " /* JAVASCRIPT ENDS */");
        };
        ModuleJavascriptGenerator.prototype.generateUpdatedJs = function (javascriptString, updatedRequestObjStr, forceRequest, removeScripts, loadInWebview) {
            if (!forceRequest && !removeScripts && !loadInWebview) {
                return javascriptString;
            }
            var fixedJs = javascriptString;
            var addJs = "\n            function setModuleCreatorSettings() {\n    \n                let object = document.querySelector('#ketsu-final-data').textContent;\n                if (object == undefined) {return;}\n                let parsedObject = JSON.parse(object);\n                if (parsedObject == undefined) {return;}\n                \n                if (".concat(forceRequest, ") {\n                let updatedRequest = atob(`").concat(updatedRequestObjStr, "`);\n                    if (updatedRequest != '') {\n                        parsedObject['request'] =  JSON.parse(updatedRequest);\n                    }\n                }\n        \n                if (").concat(removeScripts, ") {\n                    parsedObject['javascriptConfig']['removeJavascript'] = true;\n                    parsedObject['javascriptConfig']['loadInWebView'] = false;\n                }\n        \n                if (").concat(loadInWebview, ") {\n                    parsedObject['javascriptConfig']['loadInWebView'] = true;\n                    parsedObject['javascriptConfig']['removeJavascript'] = false;\n                }\n        \n                document.querySelector('#ketsu-final-data').textContent = JSON.stringify(parsedObject);\n\n                if (typeof KETSU_ASYNC === 'undefined') {\n                    return;\n                }\n\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n\n            }\n\n\n        ");
            // && /KETSU_ASYNC.*=*true/g.test(javascriptString)
            if (javascriptString.includes("window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');")) {
                fixedJs = fixedJs.replace(/window.*EXECUTE_KETSU_ASYNC.+\).*;/g, "\n            \n            setModuleCreatorSettings();\n            \n            ");
                fixedJs = addJs + fixedJs;
                return fixedJs;
            }
            fixedJs = addJs + fixedJs;
            fixedJs = fixedJs + "\n        \n        setModuleCreatorSettings();\n        \n        ";
            return fixedJs;
        };
        ModuleJavascriptGenerator.prototype.setDebug = function (js) {
            return "\n        try {\n\n            ".concat(js, "\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        ");
        };
        ModuleJavascriptGenerator.prototype.setAsync = function (js) {
            return " \n\n        var KETSU_ASYNC = true;\n        \n        " + js;
        };
        return ModuleJavascriptGenerator;
    }());
    exports.ModuleJavascriptGenerator = ModuleJavascriptGenerator;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/moduleData.ts":
/*!****************************************!*\
  !*** ./src/model/module/moduleData.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./interfaces */ "./src/model/module/interfaces.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, interfaces_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleData = void 0;
    var ModuleData = /** @class */ (function () {
        function ModuleData(path, options) {
            this.jsonId = "";
            this.sections = [];
            this.jsonPath = path;
            this.options = options;
            this.classType = interfaces_1.ModuleDataTypeEnum.cell;
        }
        ModuleData.prototype.getSection = function () {
            return window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length - 1]);
        };
        ModuleData.prototype.setUp = function (json) {
            this.jsonId = this.getId(json);
            if (!window.mApp.moduleManager.moduleMap.has(this.jsonId)) {
                window.mApp.moduleManager.moduleMap.set(this.jsonId, this);
            }
            return this;
        };
        ModuleData.prototype.isCellHidden = function () {
            var size = Object.keys(this.getOptions()["sectionsHidden"]).length;
            return size != 0;
        };
        ModuleData.prototype.getObjectIndex = function () {
            return window.mApp.utils.getNumberFromString(this.jsonPath[this.jsonPath.length - 1]);
        };
        ModuleData.prototype.checkIfIdExist = function (json) {
            var mJson = json;
            mJson = window.mApp.utils.getObjectFromPath(this.jsonPath, json);
            return this.jsonId in mJson;
        };
        ModuleData.prototype.getObject = function () {
            return window.mApp.utils.getObjectFromPath(this.jsonPath, window.mApp.moduleManager.moduleObject);
        };
        ModuleData.prototype.getId = function (json) {
            var _this = this;
            if (json === void 0) { json = window.mApp.moduleManager.moduleObject; }
            var mJson = json;
            mJson = window.mApp.utils.getObjectFromPath(this.jsonPath, json);
            var key = "moduleCreatorId".concat(window.mApp.utils.makeId());
            var value = {
                "path": window.mApp.utils.makeId(5),
                "id": this.jsonPath.join() + this.classType,
                "sectionsHidden": [],
                "options": this.options,
                "cellsHidden": false
            };
            var mPath = this.jsonPath;
            if (Array.isArray(mJson)) {
                value["path"] = "".concat(this.jsonPath[this.jsonPath.length - 1]);
                var newRoute = window.mApp.utils.deepCopy(this.jsonPath).filter(function (el, index) {
                    if (index != _this.jsonPath.length - 1) {
                        return el;
                    }
                });
                mPath = newRoute;
                mJson = window.mApp.utils.getObjectFromPath(mPath, json);
            }
            for (var _i = 0, _a = Object.keys(mJson); _i < _a.length; _i++) {
                var x = _a[_i];
                if (x.includes("moduleCreatorId") && (this.jsonPath.join() + this.classType) == mJson[x]["id"]) {
                    window.mApp.utils.addMissingObjectKeys(mJson[x], value);
                    return x;
                }
            }
            if (this.jsonId in mJson) {
                return this.jsonId;
            }
            mJson[key] = value;
            return key;
        };
        ModuleData.prototype.getOptions = function () {
            var _this = this;
            var json = window.mApp.moduleManager.moduleObject;
            var idObject = window.mApp.utils.getObjectFromPath(this.jsonPath, json);
            if (Array.isArray(idObject)) {
                var newRoute = window.mApp.utils.deepCopy(this.jsonPath).filter(function (el, index) {
                    if (index != _this.jsonPath.length - 1) {
                        return el;
                    }
                });
                idObject = window.mApp.utils.getObjectFromPath(newRoute, json);
            }
            return idObject[this.jsonId];
        };
        ModuleData.prototype.updatePath = function (json) {
            if (json === void 0) { json = window.mApp.moduleManager.moduleObject; }
            var hasEmptyPath = false; // this is for an specific case with response and helper funcitons
            if (this.jsonPath[this.jsonPath.length - 1] == "") {
                hasEmptyPath = true;
            }
            var idPath = window.mApp.utils.getPath(this.jsonId, json);
            var idObject = window.mApp.utils.getObjectFromPath(idPath, json);
            idPath.pop();
            idPath.push(idObject["path"]);
            var object = window.mApp.utils.getObjectFromPath(idPath, json);
            if (object == undefined) {
                idPath.pop();
            }
            this.jsonPath = idPath;
            if (hasEmptyPath) {
                this.jsonPath.push("");
            }
            this.getOptions()["id"] = this.jsonPath.join() + this.classType;
        };
        ModuleData.prototype.finish = function (calledFrom) {
            if (calledFrom === void 0) { calledFrom = this.jsonId; }
            var section = window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length - 1]);
            var jsonObject = window.mApp.moduleManager.moduleObject;
            var path = this.jsonPath;
            var current = jsonObject;
            // Delete form module object
            for (var x = 0; x < path.length; x++) {
                var el = path[x];
                if (x == path.length - 1) {
                    if (Array.isArray(current)) {
                        window.mApp.utils.deleteFromArray(Number(el), current);
                        continue;
                    }
                    delete current[el];
                }
                else {
                    current = current[el];
                }
            }
            // Delete from Parent cells.
            if (section != undefined) {
                for (var x = 0; x < section.cells.length; x++) {
                    if (this.jsonId == section.cells[x].jsonId) {
                        window.mApp.utils.deleteFromArray(x, section.cells);
                        break;
                    }
                }
            }
            // Delete from 
            path = window.mApp.utils.getPath(this.jsonId, window.mApp.moduleManager.moduleObject);
            current = jsonObject;
            for (var y = 0; y > path.length; y++) {
                var el_1 = path[y];
                if (path.length - 1 == y) {
                    delete current[el_1];
                    continue;
                }
                current = current[el_1];
            }
            this.options = undefined;
            // delete from module map
            window.mApp.moduleManager.moduleMap.delete(this.jsonId);
        };
        return ModuleData;
    }());
    exports.ModuleData = ModuleData;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/moduleDataSection.ts":
/*!***********************************************!*\
  !*** ./src/model/module/moduleDataSection.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./interfaces */ "./src/model/module/interfaces.ts"), __webpack_require__(/*! ./moduleData */ "./src/model/module/moduleData.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, interfaces_1, moduleData_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleSectionData = void 0;
    var ModuleSectionData = /** @class */ (function (_super) {
        __extends(ModuleSectionData, _super);
        function ModuleSectionData(path, cells, options) {
            var _this = _super.call(this, path, options) || this;
            _this.canModify = false;
            _this.parsed = false;
            _this.savedCells = [];
            _this.cells = cells;
            _this.classType = interfaces_1.ModuleDataTypeEnum.section;
            return _this;
        }
        ModuleSectionData.prototype.setUp = function (json) {
            var _a, _b;
            _super.prototype.setUp.call(this, json);
            var object = window.mApp.utils.getObjectFromPath(this.jsonPath, json);
            this.savedCells = window.mApp.utils.deepCopy(this.cells);
            var isSection = window.mApp.utils.deepCopy(this.cells).pop() instanceof ModuleSectionData;
            this.cells = [];
            if (Array.isArray(object)) {
                this.canModify = true;
                for (var x = 0; x < object.length; x++) {
                    var newPath = window.mApp.utils.deepCopy(this.jsonPath);
                    newPath.push("".concat(x));
                    if (isSection) {
                        this.cells.push(this.createSection(newPath, this.savedCells).setUp(json));
                        continue;
                    }
                    this.cells.push(this.createCell(newPath).setUp(json));
                }
            }
            else {
                for (var _i = 0, _c = this.savedCells; _i < _c.length; _i++) {
                    var s = _c[_i];
                    var newPath = window.mApp.utils.deepCopy(this.jsonPath);
                    if (!(s instanceof ModuleSectionData)) {
                        s.options = { name: (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.listName) !== null && _b !== void 0 ? _b : "" };
                    }
                    s.sections = window.mApp.utils.deepCopy(this.sections);
                    s.sections.push(this.jsonId);
                    for (var x = 0; x < s.jsonPath.length; x++) {
                        if (newPath[x] != s.jsonPath[x]) {
                            newPath.push(s.jsonPath[x]);
                        }
                    }
                    s.jsonPath = newPath;
                    this.cells.push(s.setUp(json));
                }
            }
            this.parsed = true;
            return this;
        };
        ModuleSectionData.prototype.updated = function (json) {
            if (json === void 0) { json = window.mApp.moduleManager.moduleObject; }
            // This gets called each time we add or remove an object
            var object = window.mApp.utils.getObjectFromPath(this.jsonPath, json);
            var isSection = window.mApp.utils.deepCopy(this.cells).pop() instanceof ModuleSectionData;
            if (Array.isArray(object)) {
                for (var s = 0; s < object.length; s++) {
                    var x = object[s];
                    var found = false;
                    for (var _i = 0, _a = Object.keys(x); _i < _a.length; _i++) {
                        var y = _a[_i];
                        if (y.includes("moduleCreator")) {
                            found = true;
                        }
                    }
                    if (!found) {
                        var newPath = window.mApp.utils.deepCopy(this.jsonPath);
                        newPath.push("".concat(s));
                        if (isSection) {
                            this.cells.push(this.createSection(newPath, this.savedCells).setUp(json));
                            break;
                        }
                        this.cells.push(this.createCell(newPath).setUp(json));
                    }
                }
            }
            else {
                for (var _b = 0, _c = this.cells; _b < _c.length; _b++) {
                    var r = _c[_b];
                    if (r instanceof ModuleSectionData) {
                        r.updated(json);
                    }
                }
            }
        };
        ModuleSectionData.prototype.createSection = function (jsonPath, cells) {
            var _a, _b;
            var section = new ModuleSectionData(jsonPath, cells, { name: (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.listName) !== null && _b !== void 0 ? _b : "" });
            section.sections = window.mApp.utils.deepCopy(this.sections);
            section.sections.push(this.jsonId);
            return section;
        };
        ModuleSectionData.prototype.createCell = function (jsonPath) {
            var _a, _b;
            var cell = new moduleData_1.ModuleData(jsonPath, { name: (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.listName) !== null && _b !== void 0 ? _b : "" });
            cell.sections = window.mApp.utils.deepCopy(this.sections);
            cell.sections.push(this.jsonId);
            return cell;
        };
        ModuleSectionData.prototype.addCell = function () {
            var _a, _b;
            var lastCell = this.cells[this.cells.length - 1];
            var copyOfJson = window.mApp.utils.deepCopy(window.mApp.utils.getObjectFromPath(lastCell.jsonPath, window.mApp.moduleManager.moduleObject));
            if (((_a = copyOfJson === null || copyOfJson === void 0 ? void 0 : copyOfJson.javascriptConfig) === null || _a === void 0 ? void 0 : _a.loadInWebView) != undefined) {
                copyOfJson.javascriptConfig.loadInWebView = false;
            }
            if (((_b = copyOfJson === null || copyOfJson === void 0 ? void 0 : copyOfJson.javascriptConfig) === null || _b === void 0 ? void 0 : _b.removeJavascript) != undefined) {
                copyOfJson.javascriptConfig.removeJavascript = false;
            }
            window.mApp.utils.removeKeysThatMatch("moduleCreator", copyOfJson);
            var current = window.mApp.moduleManager.moduleObject;
            this.jsonPath.forEach(function (el) {
                current = current[el];
            });
            if (Array.isArray(current)) {
                current.push(copyOfJson);
            }
        };
        ModuleSectionData.prototype.hideCells = function (flag, calledFrom) {
            var _a;
            if (calledFrom === void 0) { calledFrom = this.jsonId; }
            if (calledFrom == this.jsonId) {
                if (((_a = this.getOptions()) === null || _a === void 0 ? void 0 : _a.cellsHidden) != undefined) {
                    this.getOptions().cellsHidden = flag;
                }
            }
            for (var _i = 0, _b = this.cells; _i < _b.length; _i++) {
                var x = _b[_i];
                var sectionsHidden = x.getOptions()["sectionsHidden"];
                if (x instanceof ModuleSectionData) {
                    x.hideCells(flag, calledFrom);
                }
                if (flag && !sectionsHidden.includes(calledFrom)) { // hide cells
                    sectionsHidden.push(calledFrom);
                }
                else {
                    window.mApp.utils.deleteFromArray(sectionsHidden.indexOf(calledFrom), sectionsHidden);
                }
            }
            console.log(this.getOptions());
            console.log(this.jsonPath);
        };
        ModuleSectionData.prototype.updatePaths = function (json) {
            if (json === void 0) { json = window.mApp.moduleManager.moduleObject; }
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var x = _a[_i];
                if (x instanceof ModuleSectionData) {
                    x.updatePaths(json);
                }
                x.updatePath(json);
            }
        };
        ModuleSectionData.prototype.updateCells = function () {
        };
        ModuleSectionData.prototype.getAllCells = function () {
            var newFound = [];
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var x = _a[_i];
                newFound.push(x.jsonId);
                if (x instanceof ModuleSectionData) {
                    x.getAllCells().forEach(function (el) {
                        newFound.push(el);
                    });
                }
            }
            return newFound;
        };
        ModuleSectionData.prototype.finish = function (calledFrom) {
            if (calledFrom === void 0) { calledFrom = this.jsonId; }
            if (this.jsonId == calledFrom) {
                var foundIds = this.getAllCells();
                foundIds.reverse();
                for (var _i = 0, foundIds_1 = foundIds; _i < foundIds_1.length; _i++) {
                    var x = foundIds_1[_i];
                    var cell = window.mApp.moduleManager.moduleMap.get(x);
                    cell === null || cell === void 0 ? void 0 : cell.finish("skrrrskfjdskjfskljflksjdl");
                }
                _super.prototype.finish.call(this, "sdfsdffdssf");
                return;
            }
            _super.prototype.finish.call(this);
        };
        return ModuleSectionData;
    }(moduleData_1.ModuleData));
    exports.ModuleSectionData = ModuleSectionData;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/moduleManager.ts":
/*!*******************************************!*\
  !*** ./src/model/module/moduleManager.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./moduleDataSection */ "./src/model/module/moduleDataSection.ts"), __webpack_require__(/*! ./testMoudle */ "./src/model/module/testMoudle.ts"), __webpack_require__(/*! ./moduleStructure */ "./src/model/module/moduleStructure.ts"), __webpack_require__(/*! ../SocketsServer/SocketsConnectionHandler */ "./src/model/SocketsServer/SocketsConnectionHandler.ts"), __webpack_require__(/*! ../SocketsServer/logsParser */ "./src/model/SocketsServer/logsParser.ts"), __webpack_require__(/*! ./jsGenerator */ "./src/model/module/jsGenerator.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, moduleDataSection_1, testMoudle_1, moduleStructure_1, SocketsConnectionHandler_1, logsParser_1, jsGenerator_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ModuleManager = exports.ModuleExecutionStatus = void 0;
    var ModuleExecutionStatus;
    (function (ModuleExecutionStatus) {
        ModuleExecutionStatus[ModuleExecutionStatus["executing"] = 0] = "executing";
        ModuleExecutionStatus[ModuleExecutionStatus["canceling"] = 1] = "canceling";
        ModuleExecutionStatus[ModuleExecutionStatus["finished"] = 2] = "finished";
    })(ModuleExecutionStatus = exports.ModuleExecutionStatus || (exports.ModuleExecutionStatus = {}));
    var ModuleManager = /** @class */ (function () {
        function ModuleManager() {
            this.moduleObject = undefined;
            this.moduleViewsExecutor = {};
            this.moudleParsed = [];
            this.moduleMap = new Map();
            this.executionStatus = ModuleExecutionStatus.finished;
            this.moduleExecutionInterfaces = {};
            this.currentExecutionId = "";
        }
        ModuleManager.prototype.getModuleOptions = function () {
            // If the global options dont exist we create them.+
            if (this.moduleObject == undefined) {
                return {};
            }
            var defaultOptions = {
                "selected": "",
                "notes": {},
                "hideViews": [],
                "id": window.mApp.utils.makeId(15),
                "projectName": "New Project"
            };
            var options = this.moduleObject["moduleCreatorGlobalOptions"];
            if (options == undefined) {
                this.moduleObject["moduleCreatorGlobalOptions"] = defaultOptions;
            }
            for (var _i = 0, _a = Object.keys(defaultOptions); _i < _a.length; _i++) {
                var x = _a[_i];
                if (this.moduleObject["moduleCreatorGlobalOptions"][x] == undefined) {
                    this.moduleObject["moduleCreatorGlobalOptions"][x] = defaultOptions[x];
                }
            }
            return this.moduleObject["moduleCreatorGlobalOptions"];
        };
        ModuleManager.prototype.getDebugModule = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            var moduleDuplicate = window.mApp.utils.deepCopy(this.moduleObject);
            var headerPaths = window.mApp.utils.getPathsThatMatchKey("moduleCreatorHeaderisActive", [], window.mApp.moduleManager.moduleObject);
            for (var _i = 0, headerPaths_1 = headerPaths; _i < headerPaths_1.length; _i++) {
                var path = headerPaths_1[_i];
                window.mApp.utils.deleteFromArray(path.length - 1, path);
                var headerObject = window.mApp.utils.getObjectFromPath(path, moduleDuplicate);
                if (!headerObject["moduleCreatorHeaderisActive"]) {
                    headerObject["key"] = "";
                    headerObject["value"] = "";
                }
            }
            var jsGenerator = new jsGenerator_1.ModuleJavascriptGenerator();
            var moduleSections = [];
            for (var _k = 0, _l = Array.from(this.moduleMap.values()); _k < _l.length; _k++) {
                var current = _l[_k];
                if (!(current instanceof moduleDataSection_1.ModuleSectionData)) {
                    continue;
                }
                var fixed = current;
                if (fixed.cells.length <= 0) {
                    continue;
                }
                if (!(fixed.cells[0] instanceof moduleDataSection_1.ModuleSectionData)) {
                    if (fixed.cells[0].getObject()["request"] == undefined) {
                        continue;
                    }
                    moduleSections.push(fixed);
                }
            }
            for (var _m = 0, moduleSections_1 = moduleSections; _m < moduleSections_1.length; _m++) {
                var moduleSectionData = moduleSections_1[_m];
                var previousModuleData = undefined;
                for (var x = 0; x < moduleSectionData.cells.length; x++) {
                    var moduleData = moduleSectionData.cells[x];
                    var currentOptions = moduleData.getOptions();
                    var currentRequest = window.mApp.utils.getObjectFromPath(moduleData.jsonPath, moduleDuplicate);
                    if (((_a = currentRequest === null || currentRequest === void 0 ? void 0 : currentRequest.javascriptConfig) === null || _a === void 0 ? void 0 : _a.javaScript) == undefined) {
                        continue;
                    }
                    currentRequest.javascriptConfig.javaScript = jsGenerator.addJsIndicators(currentRequest.javascriptConfig.javaScript);
                    if (((_b = currentOptions === null || currentOptions === void 0 ? void 0 : currentOptions.async) !== null && _b !== void 0 ? _b : false) == true) {
                        currentRequest.javascriptConfig.javaScript = jsGenerator.setAsync(currentRequest.javascriptConfig.javaScript);
                    }
                    if (moduleSectionData.cells.length == 1) {
                        currentRequest.javascriptConfig.javaScript = jsGenerator.setDebug(currentRequest.javascriptConfig.javaScript);
                    }
                    if (previousModuleData == undefined) {
                        previousModuleData = moduleData;
                        continue;
                    }
                    var previousRequest = window.mApp.utils.getObjectFromPath(previousModuleData === null || previousModuleData === void 0 ? void 0 : previousModuleData.jsonPath, moduleDuplicate);
                    if (((_c = previousRequest === null || previousRequest === void 0 ? void 0 : previousRequest.javascriptConfig) === null || _c === void 0 ? void 0 : _c.javaScript) == undefined) {
                        continue;
                    }
                    var generatedJs = jsGenerator.generateUpdatedJs(previousRequest.javascriptConfig.javaScript, btoa(JSON.stringify((_d = currentRequest["request"]) !== null && _d !== void 0 ? _d : "")), (_e = currentOptions.forceRequest) !== null && _e !== void 0 ? _e : false, (_g = (_f = currentRequest === null || currentRequest === void 0 ? void 0 : currentRequest.javascriptConfig) === null || _f === void 0 ? void 0 : _f.removeJavascript) !== null && _g !== void 0 ? _g : false, (_j = (_h = currentRequest === null || currentRequest === void 0 ? void 0 : currentRequest.javascriptConfig) === null || _h === void 0 ? void 0 : _h.loadInWebView) !== null && _j !== void 0 ? _j : false);
                    previousRequest.javascriptConfig.javaScript = generatedJs;
                    previousRequest.javascriptConfig.javaScript = jsGenerator.setDebug(previousRequest.javascriptConfig.javaScript);
                    if (x == moduleSectionData.cells.length - 1) {
                        currentRequest.javascriptConfig.javaScript = jsGenerator.setDebug(currentRequest.javascriptConfig.javaScript);
                    }
                    console.log(previousRequest.javascriptConfig.javaScript);
                    previousModuleData = moduleData;
                }
            }
            return JSON.stringify(moduleDuplicate);
        };
        ModuleManager.prototype.loadNewModule = function (module, projectName) {
            if (projectName === void 0) { projectName = undefined; }
            for (var _i = 0, _a = this.moudleParsed; _i < _a.length; _i++) {
                var s = _a[_i];
                s.finish();
            }
            this.moduleObject = JSON.parse(module);
            this.parseModule(projectName);
        };
        ModuleManager.prototype.moduleUpdatedJavascript = function () {
            // We need to get all the request arrays.
            // We need to go through all of them and in case is above the first one update the:
            // - Request : Force Request
            // - Add the KETSU_ASYNC variable
            // - Load in webview | Remove Scripts 
        };
        ModuleManager.prototype.getDefaultModule = function () {
            return atob(testMoudle_1.testModuleString);
        };
        ModuleManager.prototype.saveModuleToLocalStorage = function () {
            window.localStorage.setItem("savedModule", JSON.stringify(this.moduleObject));
        };
        ModuleManager.prototype.getLocalStotrageModule = function () {
            var _a;
            return (_a = window.localStorage.getItem("savedModule")) !== null && _a !== void 0 ? _a : undefined;
        };
        ModuleManager.prototype.exportModule = function () {
            var _a;
            var options = this.getModuleOptions();
            var jsonse = this.getDebugModule();
            var blob = new Blob([jsonse], { type: "application/json" });
            var url = URL.createObjectURL(blob);
            var a = document.createElement('a');
            a.href = url;
            a.download = "".concat((_a = options["projectName"]) !== null && _a !== void 0 ? _a : "module", ".json");
            document.body.appendChild(a);
            a.click();
            // Remove anchor from body
            document.body.removeChild(a);
        };
        ModuleManager.prototype.parseModule = function (projectName) {
            if (projectName === void 0) { projectName = undefined; }
            var isLoadedFirstTime = false;
            if (this.moduleObject["moduleCreatorGlobalOptions"] == undefined) {
                isLoadedFirstTime = true;
            }
            var options = this.getModuleOptions();
            if (projectName != undefined) {
                options["projectName"] = projectName;
            }
            this.moudleParsed = window.mApp.utils.deepCopy(moduleStructure_1.parseModuleStructure).filter(function (el) {
                var _a;
                if (!options["hideViews"].includes((_a = window.mApp.utils.deepCopy(el.jsonPath).pop()) !== null && _a !== void 0 ? _a : "")) {
                    return el;
                }
            });
            for (var _i = 0, _a = this.moudleParsed; _i < _a.length; _i++) {
                var x = _a[_i];
                x.setUp(this.moduleObject);
            }
            if (isLoadedFirstTime) {
                this.disableOptionsFirstReadModules();
            }
            this.filterJavascriptFromRequests();
            Object.entries(this.moduleViewsExecutor).forEach(function (_a) {
                var key = _a[0], value = _a[1];
                value.moduleLoaded();
            });
        };
        ModuleManager.prototype.disableOptionsFirstReadModules = function () {
            var moduleSections = [];
            for (var _i = 0, _a = Array.from(this.moduleMap.values()); _i < _a.length; _i++) {
                var current = _a[_i];
                if (!(current instanceof moduleDataSection_1.ModuleSectionData)) {
                    continue;
                }
                var fixed = current;
                if (fixed.cells.length <= 0) {
                    continue;
                }
                if (!(fixed.cells[0] instanceof moduleDataSection_1.ModuleSectionData)) {
                    if (fixed.cells[0].getObject()["request"] == undefined) {
                        continue;
                    }
                    moduleSections.push(fixed);
                }
            }
            for (var _b = 0, moduleSections_2 = moduleSections; _b < moduleSections_2.length; _b++) {
                var moduleSectionData = moduleSections_2[_b];
                for (var x = 0; x < moduleSectionData.cells.length; x++) {
                    if (x == 0) {
                        continue;
                    }
                    var moduleData = moduleSectionData.cells[x];
                    var requestObject = moduleData.getObject();
                    requestObject["javascriptConfig"]["removeJavascript"] = false;
                    requestObject["javascriptConfig"]["loadInWebView"] = false;
                }
            }
        };
        ModuleManager.prototype.filterJavascriptFromRequests = function () {
            var _a, _b, _c;
            var moduleSections = [];
            for (var _i = 0, _d = Array.from(this.moduleMap.values()); _i < _d.length; _i++) {
                var current = _d[_i];
                if (!(current instanceof moduleDataSection_1.ModuleSectionData)) {
                    continue;
                }
                var fixed = current;
                if (fixed.cells.length <= 0) {
                    continue;
                }
                if (!(fixed.cells[0] instanceof moduleDataSection_1.ModuleSectionData)) {
                    if (fixed.cells[0].getObject()["request"] == undefined) {
                        continue;
                    }
                    moduleSections.push(fixed);
                }
            }
            for (var _e = 0, moduleSections_3 = moduleSections; _e < moduleSections_3.length; _e++) {
                var moduleSectionData = moduleSections_3[_e];
                for (var x = 0; x < moduleSectionData.cells.length; x++) {
                    var moduleData = moduleSectionData.cells[x];
                    var requestObject = moduleData.getObject();
                    var js = (_a = requestObject === null || requestObject === void 0 ? void 0 : requestObject.javascriptConfig) === null || _a === void 0 ? void 0 : _a.javaScript;
                    if (js != undefined) {
                        var regex = /\/\* JAVASCRIPT STARTS \*\/(?<result>(.|\n)*)\/\* JAVASCRIPT ENDS \*\//;
                        var found = (_c = (_b = js.match(regex)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.result;
                        if (found != undefined) {
                            requestObject["javascriptConfig"]["javaScript"] = found;
                        }
                    }
                }
            }
        };
        ModuleManager.prototype.moduleDataUpdated = function () {
            Object.entries(this.moduleViewsExecutor).forEach(function (_a) {
                var _b;
                var key = _a[0], value = _a[1];
                (_b = value.moduleDataUpdated) === null || _b === void 0 ? void 0 : _b.call(value);
            });
        };
        ModuleManager.prototype.cancelCurrentExecution = function () {
            var _this = this;
            this.executionStatus = ModuleExecutionStatus.canceling;
            this.updateModuleExecutionInterfaces();
            this.currentExecutionId = window.mApp.utils.makeId();
            var currentId = this.currentExecutionId;
            var message = { id: window.mApp.utils.makeId(), functionName: "CancelExecution",
                logs: logsParser_1.LogsParser.shared.getModuleLogsToSend(),
                sentCallback: false, completionCallback: false };
            var messageCallback = new SocketsConnectionHandler_1.SocketMessageCallback(function (data, error) {
                if (error && currentId == _this.currentExecutionId) {
                    _this.executionStatus = ModuleExecutionStatus.finished;
                    _this.updateModuleExecutionInterfaces();
                }
            }, function (data, error) {
                if (currentId != _this.currentExecutionId) {
                    return;
                }
                _this.executionStatus = ModuleExecutionStatus.finished;
                _this.updateModuleExecutionInterfaces();
                var logs = data["logs"];
                if (logs == undefined) {
                    return;
                }
                logsParser_1.LogsParser.shared.logsUpdated(logs);
            });
            window.mApp.sockets.sendMessage(message, messageCallback);
        };
        ModuleManager.prototype.executeModule = function (route) {
            var _this = this;
            this.currentExecutionId = window.mApp.utils.makeId();
            var currentId = this.currentExecutionId;
            this.executionStatus = ModuleExecutionStatus.executing;
            this.updateModuleExecutionInterfaces();
            var message = { id: window.mApp.utils.makeId(), functionName: "ExecuteModule", data: {
                    moduleEncoded: this.getDebugModule(),
                    executePath: route
                },
                logs: logsParser_1.LogsParser.shared.getModuleLogsToSend(),
                sentCallback: false, completionCallback: false };
            var messageCallback = new SocketsConnectionHandler_1.SocketMessageCallback(function (data, error) {
                if (error && currentId == _this.currentExecutionId) {
                    _this.executionStatus = ModuleExecutionStatus.finished;
                    _this.updateModuleExecutionInterfaces();
                }
            }, function (data, error) {
                if (currentId != _this.currentExecutionId) {
                    return;
                }
                _this.executionStatus = ModuleExecutionStatus.finished;
                _this.updateModuleExecutionInterfaces();
                var logs = data["logs"];
                if (logs == undefined) {
                    return;
                }
                logsParser_1.LogsParser.shared.logsUpdated(logs);
            });
            window.mApp.sockets.sendMessage(message, messageCallback);
        };
        ModuleManager.prototype.updateModuleExecutionInterfaces = function () {
            for (var _i = 0, _a = Object.values(this.moduleExecutionInterfaces); _i < _a.length; _i++) {
                var inter = _a[_i];
                inter.moduleExecutionUpdated();
            }
        };
        return ModuleManager;
    }());
    exports.ModuleManager = ModuleManager;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/moduleStructure.ts":
/*!*********************************************!*\
  !*** ./src/model/module/moduleStructure.ts ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./moduleData */ "./src/model/module/moduleData.ts"), __webpack_require__(/*! ./moduleDataSection */ "./src/model/module/moduleDataSection.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, moduleData_1, moduleDataSection_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.parseModuleStructure = void 0;
    exports.parseModuleStructure = [
        new moduleDataSection_1.ModuleSectionData(["moduleInfo"], [new moduleData_1.ModuleData([])], { name: "Module Info", listName: "Parameters" }),
        new moduleDataSection_1.ModuleSectionData(["mainPage"], [new moduleData_1.ModuleData([])], { name: "Main Page", listName: "Request" }),
        new moduleDataSection_1.ModuleSectionData(["search"], [new moduleData_1.ModuleData([])], { name: "Search Page", listName: "Request" }),
        new moduleDataSection_1.ModuleSectionData(["info"], [new moduleData_1.ModuleData([])], { name: "Info Page", listName: "Request" }),
        new moduleDataSection_1.ModuleSectionData(["chapters"], [new moduleData_1.ModuleData([])], { name: "Chapters", listName: "Request" }),
        new moduleDataSection_1.ModuleSectionData(["moduleResolvers"], [new moduleDataSection_1.ModuleSectionData(["resolverInfo"], [new moduleData_1.ModuleData([])], { name: "Resolver Parameters", listName: "parameters" }),
            new moduleDataSection_1.ModuleSectionData(["resolver"], [new moduleData_1.ModuleData([])], { name: "Resolver Request", listName: "Request" })], { name: "Resolvers", listName: "Resolver" }),
        new moduleDataSection_1.ModuleSectionData(["responseCodeFunctions"], [new moduleDataSection_1.ModuleSectionData([""], [new moduleData_1.ModuleData([])], { name: "Function Parameters", listName: "Parameters" }),
            new moduleDataSection_1.ModuleSectionData(["functions"], [new moduleData_1.ModuleData([])], { name: "Function Requests", listName: "Request" })], { name: "Response Code Funtions", listName: "Function" }),
        new moduleDataSection_1.ModuleSectionData(["helperFunctions"], [new moduleDataSection_1.ModuleSectionData([""], [new moduleData_1.ModuleData([])], { name: "Function Parameters", listName: "Parameters" }),
            new moduleDataSection_1.ModuleSectionData(["functions"], [new moduleData_1.ModuleData([])], { name: "Function Requests", listName: "Request" })], { name: "Helper Functions", listName: "Request" }),
    ];
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/module/testMoudle.ts":
/*!****************************************!*\
  !*** ./src/model/module/testMoudle.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.testModuleString = void 0;
    exports.testModuleString = '';
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/clickCellController.ts":
/*!*******************************************************!*\
  !*** ./src/model/settingCells/clickCellController.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! ../../view/settingsCells/clickCellView */ "./src/view/settingsCells/clickCellView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, clickCellView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ClickCellController = void 0;
    jquery_1 = __importDefault(jquery_1);
    var ClickCellController = /** @class */ (function (_super) {
        __extends(ClickCellController, _super);
        function ClickCellController(data, isEnabled, didSelect) {
            var _this = _super.call(this, clickCellView_1.clickCellView) || this;
            _this.didSelect = didSelect;
            _this.enalbed = isEnabled;
            _this.data = data;
            return _this;
        }
        ClickCellController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .title")).html(this.data.title);
            (0, jquery_1.default)("[".concat(this.id, "] .message")).html(this.data.message);
            this.updateSelectedClass();
            (0, jquery_1.default)("[".concat(this.id, "]")).off().on("click", function (ev) {
                ev.preventDefault();
                ev.stopImmediatePropagation();
                _this.enalbed = !_this.enalbed;
                if (_this.didSelect != undefined) {
                    var result = _this.didSelect(_this.enalbed);
                    if (result) {
                        _this.updateSelectedClass();
                    }
                }
            });
        };
        ClickCellController.prototype.updateSelectedClass = function () {
            if (this.enalbed) {
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass("selected");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).removeClass("selected");
            }
        };
        ClickCellController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "]")).off();
            _super.prototype.finish.call(this);
        };
        return ClickCellController;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.ClickCellController = ClickCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/jsLogsCellController.ts":
/*!********************************************************!*\
  !*** ./src/model/settingCells/jsLogsCellController.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! ../../view/settingsCells/jsLogsCell */ "./src/view/settingsCells/jsLogsCell.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, jsLogsCell_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.JSLogsCellController = void 0;
    jquery_1 = __importDefault(jquery_1);
    var JSLogsCellController = /** @class */ (function (_super) {
        __extends(JSLogsCellController, _super);
        function JSLogsCellController(title, error) {
            if (error === void 0) { error = false; }
            var _this = _super.call(this, jsLogsCell_1.jsLogsCellView) || this;
            _this.string = title;
            _this.error = error;
            return _this;
        }
        JSLogsCellController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setData();
        };
        JSLogsCellController.prototype.setData = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    (0, jquery_1.default)("[".concat(this.id, "]")).addClass([this.returnClass("error", this.error),
                    ]);
                    (0, jquery_1.default)("[".concat(this.id, "] .title")).text(this.string);
                    return [2 /*return*/];
                });
            });
        };
        JSLogsCellController.prototype.returnClass = function (string, active) {
            if (active) {
                return string;
            }
            return "";
        };
        JSLogsCellController.prototype.finish = function () {
            _super.prototype.finish.call(this);
        };
        return JSLogsCellController;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.JSLogsCellController = JSLogsCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/logsCellController.ts":
/*!******************************************************!*\
  !*** ./src/model/settingCells/logsCellController.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! ../../view/settingsCells/logsCellView */ "./src/view/settingsCells/logsCellView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, logsCellView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LogsCellController = void 0;
    jquery_1 = __importDefault(jquery_1);
    var LogsCellController = /** @class */ (function (_super) {
        __extends(LogsCellController, _super);
        function LogsCellController(title, didClick, isError, isSelectable, isSelected, arrow) {
            if (isError === void 0) { isError = false; }
            if (isSelectable === void 0) { isSelectable = false; }
            if (isSelected === void 0) { isSelected = false; }
            if (arrow === void 0) { arrow = false; }
            var _this = _super.call(this, logsCellView_1.logsCellView) || this;
            _this.didClick = didClick;
            _this.isSelected = isSelected;
            _this.title = title;
            _this.isError = isError;
            _this.isSelectable = isSelectable;
            _this.arrow = arrow;
            return _this;
        }
        LogsCellController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "]")).addClass([this.returnClass("selected", this.isSelected),
                this.returnClass("error", this.isError),
                this.returnClass("selectable", this.isSelectable),
                this.returnClass("arrow", this.arrow)
            ]);
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text(this.title);
            (0, jquery_1.default)("[".concat(this.id, "]")).off().on('click', function (el) {
                el.preventDefault();
                el.stopImmediatePropagation();
                if (_this.didClick != undefined) {
                    _this.didClick();
                }
            });
        };
        LogsCellController.prototype.returnClass = function (string, active) {
            if (active) {
                return string;
            }
            return "";
        };
        LogsCellController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "]")).off();
            _super.prototype.finish.call(this);
        };
        return LogsCellController;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.LogsCellController = LogsCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/paramEditorCellController.ts":
/*!*************************************************************!*\
  !*** ./src/model/settingCells/paramEditorCellController.ts ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/settingsCells/paramEditorCellView */ "./src/view/settingsCells/paramEditorCellView.ts"), __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, paramEditorCellView_1, collectionViewCell_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ParamEditorCellController = exports.dataType = void 0;
    jquery_1 = __importDefault(jquery_1);
    var dataType;
    (function (dataType) {
        dataType[dataType["string"] = 0] = "string";
        dataType[dataType["int"] = 1] = "int";
        dataType[dataType["stringArray"] = 2] = "stringArray";
    })(dataType = exports.dataType || (exports.dataType = {}));
    var ParamEditorCellController = /** @class */ (function (_super) {
        __extends(ParamEditorCellController, _super);
        function ParamEditorCellController(title, message, value, tinted, valueChanged, finishedEditing, html) {
            if (message === void 0) { message = undefined; }
            if (html === void 0) { html = paramEditorCellView_1.paramEditorCellView; }
            var _this = _super.call(this, html) || this;
            console.log(value);
            _this.value = value;
            _this.valueChanged = valueChanged;
            _this.finishedEditing = finishedEditing;
            _this.title = title;
            _this.message = message;
            _this.tinted = tinted;
            if (message != undefined) {
                _this.message += '<br>';
            }
            else {
                _this.message = "";
            }
            _this.message += _this.getPlaceholderString();
            return _this;
        }
        ParamEditorCellController.prototype.getPlaceholderString = function () {
            if (typeof this.value == 'string') {
                return 'This field allows any character.';
            }
            if (typeof this.value == 'number') {
                return 'This field allows numbers and decimals, use . to indicate the decimals.';
            }
            if (typeof this.value == 'boolean') {
                return 'This field only allows either true | flase';
            }
            if (Array.isArray(this.value)) {
                return 'This field is a list, separate the values with comas.';
            }
            return "";
        };
        ParamEditorCellController.prototype.viewWasInserted = function () {
            var _this = this;
            var _a;
            _super.prototype.viewWasInserted.call(this);
            if (this.tinted) {
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass('bg-secondary');
            }
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text(window.mApp.utils.capitalizeFirstLetter(this.title.replace(/([A-Z][a-z])/g, ' $1').trim()));
            (0, jquery_1.default)("[".concat(this.id, "] .message")).html((_a = this.message) !== null && _a !== void 0 ? _a : "");
            (0, jquery_1.default)("[".concat(this.id, "] input")).attr('placeholder', this.getPlaceholderString());
            (0, jquery_1.default)("[".concat(this.id, "] input")).val("".concat(this.value));
            (0, jquery_1.default)("[".concat(this.id, "] input")).off().on('input', function (el) {
                var _a, _b, _c, _d;
                var inputVal = (_c = (_b = (_a = (0, jquery_1.default)(el.target)) === null || _a === void 0 ? void 0 : _a.val()) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : "";
                if (typeof _this.value == 'string') {
                    _this.value = inputVal;
                }
                if (typeof _this.value == 'number') {
                    _this.value = (_d = window.mApp.utils.getNumberFromString(inputVal)) !== null && _d !== void 0 ? _d : 0;
                }
                if (typeof _this.value == 'boolean') {
                    _this.value = inputVal.toLowerCase() == 'true';
                }
                if (Array.isArray(_this.value)) {
                    _this.value = inputVal.split(',');
                }
                if (_this.valueChanged == undefined) {
                    return;
                }
                _this.valueChanged(_this.value);
            });
            (0, jquery_1.default)("[".concat(this.id, "] input")).on('focus', function (el) {
                (0, jquery_1.default)("[".concat(_this.id, "] input")).attr('placeholder', '');
            });
            (0, jquery_1.default)("[".concat(this.id, "] input")).on('blur', function (el) {
                (0, jquery_1.default)("[".concat(_this.id, "] input")).attr('placeholder', _this.getPlaceholderString());
            });
        };
        ParamEditorCellController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "] input")).off();
            this.valueChanged = undefined;
            this.finishedEditing = undefined;
            _super.prototype.finish.call(this);
        };
        return ParamEditorCellController;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.ParamEditorCellController = ParamEditorCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/sectionCellController.ts":
/*!*********************************************************!*\
  !*** ./src/model/settingCells/sectionCellController.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionViewCell */ "./src/model/collectionView/collectionViewCell.ts"), __webpack_require__(/*! ../../view/settingsCells/sectionCellView */ "./src/view/settingsCells/sectionCellView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionViewCell_1, sectionCellView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.SectionCellController = void 0;
    jquery_1 = __importDefault(jquery_1);
    var SectionCellController = /** @class */ (function (_super) {
        __extends(SectionCellController, _super);
        function SectionCellController(title, html) {
            if (html === void 0) { html = sectionCellView_1.sectionCellView; }
            var _this = _super.call(this, html) || this;
            _this.title = title;
            return _this;
        }
        SectionCellController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text(this.title);
        };
        return SectionCellController;
    }(collectionViewCell_1.UICollectionViewCell));
    exports.SectionCellController = SectionCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/settingCells/settingsCellController.ts":
/*!**********************************************************!*\
  !*** ./src/model/settingCells/settingsCellController.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../collectionView/collectionView */ "./src/model/collectionView/collectionView.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, collectionView_1, insertView_1, view_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.SettingsCellController = exports.settingsControllerView = void 0;
    view_1 = __importDefault(view_1);
    exports.settingsControllerView = "<div $id> \n\n    <div $idviews class=\"fill-absolute\"> \n    \n    \n    </div>\n    \n\n</div>";
    var SettingsCellController = /** @class */ (function (_super) {
        __extends(SettingsCellController, _super);
        function SettingsCellController(cells, id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = exports.settingsControllerView; }
            var _this = _super.call(this, id, html) || this;
            _this.cells = [];
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            _this.cells = cells;
            return _this;
        }
        SettingsCellController.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        SettingsCellController.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            var cv = new collectionView_1.UICollectionView();
            this.collectionView = cv.id;
            cv.dataSourceDelegate = this;
            this.insertNewView(new insertView_1.InsertedViewData(cv.id, undefined));
            cv.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            if (this.interceptCollectionView != undefined) {
                this.interceptCollectionView(cv);
            }
            cv.reloadData();
            return this;
        };
        SettingsCellController.prototype.getCollectionView = function () {
            return this.getView(this.collectionView);
        };
        SettingsCellController.prototype.cvNumberOfItemsInSection = function (cv, section) {
            return this.cells.length;
        };
        SettingsCellController.prototype.cvNumberOfSections = function (cv) {
            return 1;
        };
        SettingsCellController.prototype.cvCellForItemAt = function (cv, indexPath) {
            return this.getView(this.cells[indexPath.item]);
        };
        SettingsCellController.prototype.cvCellForSectionAt = function (cv, sectionCellType, section) {
            return undefined;
        };
        SettingsCellController.prototype.getSeparator = function (cv, indexPath) {
            return undefined;
        };
        SettingsCellController.prototype.finish = function () {
            this.interceptCollectionView = undefined;
            _super.prototype.finish.call(this);
        };
        return SettingsCellController;
    }(view_1.default));
    exports.SettingsCellController = SettingsCellController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/utils.ts":
/*!****************************!*\
  !*** ./src/model/utils.ts ***!
  \****************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Utils = void 0;
    jquery_1 = __importDefault(jquery_1);
    var Utils = /** @class */ (function () {
        function Utils() {
        }
        Utils.prototype.deepCopy = function (source) {
            var _this = this;
            return Array.isArray(source)
                ? source.map(function (item) { return _this.deepCopy(item); })
                : source instanceof Date
                    ? new Date(source.getTime())
                    : source && typeof source === 'object'
                        ? Object.getOwnPropertyNames(source).reduce(function (o, prop) {
                            Object.defineProperty(o, prop, Object.getOwnPropertyDescriptor(source, prop));
                            o[prop] = _this.deepCopy(source[prop]);
                            return o;
                        }, Object.create(Object.getPrototypeOf(source)))
                        : source;
        };
        Utils.prototype.makeId = function (length) {
            if (length === void 0) { length = 20; }
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() *
                    charactersLength));
            }
            return result;
        };
        Utils.prototype.getPath = function (key, o) {
            var _a, _b;
            return (_b = (_a = this.getPathString(key, o)) === null || _a === void 0 ? void 0 : _a.split(".")) !== null && _b !== void 0 ? _b : [];
        };
        Utils.prototype.getPathString = function (key, o) {
            if (!o || typeof o !== "object") {
                return "";
            }
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (keys[i] === key) {
                    return key;
                }
                var path = this.getPathString(key, o[keys[i]]);
                if (path) {
                    return keys[i] + "." + path;
                }
            }
            return "";
        };
        ;
        Utils.prototype.getObjectFromPath = function (path, object) {
            var current = object;
            path.forEach(function (el) {
                if (el != "") {
                    current = current[el];
                }
            });
            return current;
        };
        Utils.prototype.setObjectFromPath = function (path, object) {
            var current = object;
            path.forEach(function (el) {
                if (el != "") {
                    current = current[el];
                }
            });
            return current;
        };
        Utils.prototype.getValueForKey = function (key, o) {
            if (!o || typeof o !== "object") {
                return undefined;
            }
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (keys[i] === key) {
                    return o[key];
                }
                var value = this.getValueForKey(key, o[keys[i]]);
                if (value) {
                    return value;
                }
            }
            return undefined;
        };
        Utils.prototype.getKeysThatMatch = function (match, o, foundKeys) {
            var _a;
            if (foundKeys === void 0) { foundKeys = []; }
            // Return the keys that contain the match  dd
            var totalKeys = foundKeys;
            if (!o || typeof o !== "object") {
                return totalKeys;
            }
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (keys[i].includes(match)) {
                    totalKeys.push(keys[i]);
                }
                (_a = this.getKeysThatMatch(match, o[keys[i]], [])) === null || _a === void 0 ? void 0 : _a.forEach(function (el) {
                    totalKeys.push(el);
                });
            }
            return totalKeys;
        };
        Utils.prototype.getPathsThatMatchKey = function (match, currentPath, o) {
            if (currentPath === void 0) { currentPath = []; }
            var mFoundPaths = [];
            if (!o || typeof o !== "object") {
                return mFoundPaths;
            }
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (keys[i].includes(match)) {
                    var currentPathCopy = this.deepCopy(currentPath);
                    currentPathCopy.push(keys[i]);
                    mFoundPaths.push(currentPathCopy);
                }
                var newCurrentPath = this.deepCopy(currentPath);
                newCurrentPath.push(keys[i]);
                this.getPathsThatMatchKey(match, newCurrentPath, o[keys[i]]).forEach(function (el) {
                    mFoundPaths.push(el);
                });
            }
            return mFoundPaths;
        };
        Utils.prototype.removeKeysThatMatch = function (match, o) {
            // Return the keys that contain the match  dd
            if (!o || typeof o !== "object") {
                return;
            }
            var keys = Object.keys(o);
            for (var i = 0; i < keys.length; i++) {
                if (keys[i].includes(match)) {
                    delete o[keys[i]];
                }
                this.removeKeysThatMatch(match, o[keys[i]]);
            }
            return;
        };
        Utils.prototype.getNumberFromString = function (string) {
            if (string == "") {
                return undefined;
            }
            var parsed = Number(string);
            if (Number.isNaN(parsed)) {
                return undefined;
            }
            return parsed;
        };
        Utils.prototype.deleteFromArray = function (index, array) {
            if (index !== -1) {
                array.splice(index, 1);
            }
        };
        Utils.prototype.addMissingObjectKeys = function (object, newKeys) {
            Object.keys(newKeys).forEach(function (key) {
                if (!(key in object)) {
                    object[key] = newKeys[key];
                }
            });
        };
        Utils.prototype.capitalizeFirstLetter = function (str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        };
        Utils.prototype.windowSize = function () {
            var _a, _b;
            return { width: (_a = (0, jquery_1.default)(window).width()) !== null && _a !== void 0 ? _a : 0, height: (_b = (0, jquery_1.default)(window).height()) !== null && _b !== void 0 ? _b : 0 };
        };
        Utils.prototype.getCenter = function (frame) {
            return { x: frame.x + frame.width / 2, y: frame.y + frame.height / 2 };
        };
        Utils.prototype.getFrameFromElement = function (el) {
            var _a, _b, _c, _d, _e, _f;
            var parsed = (0, jquery_1.default)(el);
            return { x: (_b = (_a = parsed.offset()) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0, y: (_d = (_c = parsed.offset()) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0, width: (_e = parsed.width()) !== null && _e !== void 0 ? _e : 0, height: (_f = parsed.height()) !== null && _f !== void 0 ? _f : 0 };
        };
        Utils.prototype.isInViewport = function (el) {
            var _a, _b, _c, _d, _e;
            var elementTop = (_b = (_a = el.offset()) === null || _a === void 0 ? void 0 : _a.top) !== null && _b !== void 0 ? _b : 0;
            var elementBottom = elementTop + ((_c = el.outerHeight()) !== null && _c !== void 0 ? _c : 0);
            var viewportTop = (_d = (0, jquery_1.default)(window).scrollTop()) !== null && _d !== void 0 ? _d : 0;
            var viewportBottom = viewportTop + ((_e = (0, jquery_1.default)(window).height()) !== null && _e !== void 0 ? _e : 0);
            return elementBottom > viewportTop && elementTop < viewportBottom;
        };
        ;
        Utils.prototype.getImageUrl = function (imgName) {
            return "./images/".concat(imgName);
        };
        Utils.prototype.prepend = function (value, array) {
            return array.slice().unshift(value);
        };
        Utils.prototype.isSafari = function () {
            var ua = navigator.userAgent.toLowerCase();
            if (ua.indexOf('safari') != -1) {
                if (ua.indexOf('chrome') > -1) {
                    return false;
                }
                else {
                    return true;
                }
            }
            return true;
        };
        Utils.prototype.isChrome = function () {
            var ua = navigator.userAgent.toLowerCase();
            if (ua.indexOf('safari') != -1) {
                if (ua.indexOf('chrome') > -1) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return false;
        };
        return Utils;
    }());
    exports.Utils = Utils;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/view/insertView.ts":
/*!**************************************!*\
  !*** ./src/model/view/insertView.ts ***!
  \**************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.InsertedViewData = void 0;
    var InsertedViewData = /** @class */ (function () {
        function InsertedViewData(view, htmlTag) {
            this.view = view;
            this.htmlTag = htmlTag;
        }
        InsertedViewData.prototype.getView = function () {
            if (this.view == undefined) {
                return undefined;
            }
            return window.mApp.views.get(this.view);
        };
        // Lets say we have a view which has a sub html tag that had this name $idsubHtmlTag.
        // Now we cant acces to that tag because the thag will replace $id with the actual id of that view.
        // So the real tag will be viewIdSubHtmlTag, so we create a new insertedViewData(viewid, $idsubHtmlTag)
        // Now when we want to get the tag of that element which is on the view we call getTag();
        InsertedViewData.prototype.getTag = function () {
            var _a;
            var id = (_a = this.getView()) === null || _a === void 0 ? void 0 : _a.id;
            if (id == undefined) {
                id = "";
            }
            if (this.htmlTag != undefined) {
                return this.htmlTag.replace(/\$id/gi, id);
            }
            if (this.view != undefined) {
                return this.view.replace(/\$id/gi, id);
            }
            return "";
        };
        return InsertedViewData;
    }());
    exports.InsertedViewData = InsertedViewData;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/view/view.ts":
/*!********************************!*\
  !*** ./src/model/view/view.ts ***!
  \********************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/basicHtml */ "./src/view/defaultViews/basicHtml.ts"), __webpack_require__(/*! ../base */ "./src/model/base.ts"), __webpack_require__(/*! ./insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, basicHtml_1, base_1, insertView_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    base_1 = __importDefault(base_1);
    jquery_1 = __importDefault(jquery_1);
    var View = /** @class */ (function (_super) {
        __extends(View, _super);
        function View(id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = basicHtml_1.basicHtml; }
            var _this = this;
            var _a;
            _this = _super.call(this) || this;
            _this.insertedViews = []; // id of the view that has been inserted into this one.
            _this.limitBounds = {
                height: { min: 0, max: 9999999 },
                width: { min: 0, max: 9999999 }
            };
            // it will be setup like this InsertedViewData(this.id,"$idwhatevernameoftag")
            // View Data: Not needed.
            _this.viewName = "";
            _this.viewImageRoute = "";
            _this.insertedFlag = false;
            _this.isHiddenFlag = false;
            _this.id = id;
            if (html != undefined) {
                _this.html = html === null || html === void 0 ? void 0 : html.replace(/\$id/gi, id);
            }
            else {
                _this.html = (_a = _this.html) === null || _a === void 0 ? void 0 : _a.replace(/\$id/gi, id);
            }
            window.mApp.views.set(id, _this);
            _this.viewWasCreated();
            return _this;
        }
        View.prototype.setInsertDefaultViews = function () {
            this.insertViewsDefault = new insertView_1.InsertedViewData(this.id, "$idviews");
            return this;
        };
        View.prototype.insertNewView = function (insertInfo) {
            var _a, _b;
            var view = insertInfo.getView();
            if (this.html == undefined && view != undefined) {
                this.insertedFlag = false;
                return false;
            }
            if (insertInfo.htmlTag == undefined) {
                insertInfo.htmlTag = (_b = (_a = this.insertViewsDefault) === null || _a === void 0 ? void 0 : _a.getTag()) !== null && _b !== void 0 ? _b : this.id;
            }
            this.insertedViews.push(insertInfo);
            view === null || view === void 0 ? void 0 : view.insertInto(new insertView_1.InsertedViewData(this.id, insertInfo.htmlTag));
            return true;
        };
        View.prototype.insertInto = function (insertInfo) {
            // Only use to insert the view into an html directly.
            // evaluate the possibiliy of instead of locking the view to be inserted once
            // delete the view and readd it again somewhere else
            var parsedHtml = this.parseHtml();
            parsedHtml = this.htmlInsertionInterceptor(parsedHtml);
            if (parsedHtml == undefined) {
                this.insertedFlag = false;
                return false;
            }
            this.insertedInto = insertInfo;
            document.querySelector("[".concat(insertInfo.getTag(), "]")).append(parsedHtml);
            this.insertedFlag = true;
            this.viewWasInserted();
            if (this.viewWasInsertedCallback != undefined) {
                this.viewWasInsertedCallback(this.id);
            }
            return true;
        };
        View.prototype.viewWasInserted = function () {
        };
        View.prototype.viewWasCreated = function () {
        };
        View.prototype.replaceView = function (view) {
            // Make this view be replaced by the view parameter
        };
        View.prototype.setUp = function () {
            _super.prototype.setUp.call(this);
            return this;
        };
        View.prototype.setData = function () {
            // Example: We reload the file and the views need to get the data from the file.
        };
        View.prototype.setFrame = function (frame) {
            (0, jquery_1.default)("[".concat(this.id, "]")).css({ "position": "absolute",
                "top": "".concat(frame.y),
                "left": "".concat(frame.y),
                "width": "".concat(frame.width),
                "height": "".concat(frame.height),
                "bottom": "",
                "right": "" });
        };
        View.prototype.setConstraints = function (frame) {
            var _a, _b, _c, _d, _e, _f;
            (0, jquery_1.default)("[".concat(this.id, "]")).css({ "position": "absolute",
                "top": "".concat((_a = frame.top) !== null && _a !== void 0 ? _a : ""),
                "right": "".concat((_b = frame.right) !== null && _b !== void 0 ? _b : ""),
                "bottom": "".concat((_c = frame.bottom) !== null && _c !== void 0 ? _c : ""),
                "left": "".concat((_d = frame.left) !== null && _d !== void 0 ? _d : ""),
                "width": "".concat((_e = frame.width) !== null && _e !== void 0 ? _e : ""),
                "height": "".concat((_f = frame.height) !== null && _f !== void 0 ? _f : "") });
        };
        View.prototype.clipToParent = function () {
            this.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
        };
        View.prototype.style = function (css, to) {
            if (to === void 0) { to = undefined; }
            (0, jquery_1.default)("[".concat(this.id, "] ").concat(to !== null && to !== void 0 ? to : "")).css(css);
        };
        View.prototype.setLimitBounds = function (bounds) {
            this.limitBounds = bounds;
        };
        View.prototype.htmlInsertionInterceptor = function (html) {
            return html;
        };
        View.prototype.getSize = function () {
            var _a, _b;
            var el = (0, jquery_1.default)("[".concat(this.id, "]"));
            return { width: (_a = el.width()) !== null && _a !== void 0 ? _a : 0, height: (_b = el.height()) !== null && _b !== void 0 ? _b : 0 };
        };
        View.prototype.getFrame = function (elem) {
            var _a, _b, _c, _d, _e, _f;
            if (elem === void 0) { elem = ""; }
            var parsed = (0, jquery_1.default)("[".concat(this.id, "] ").concat(elem));
            return { x: (_b = (_a = parsed.offset()) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0, y: (_d = (_c = parsed.offset()) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0, width: (_e = parsed.outerWidth()) !== null && _e !== void 0 ? _e : 0, height: (_f = parsed.outerHeight()) !== null && _f !== void 0 ? _f : 0 };
        };
        View.prototype.deleteSubviews = function () {
            var _a;
            for (var _i = 0, _b = this.insertedViews; _i < _b.length; _i++) {
                var view = _b[_i];
                (_a = view.getView()) === null || _a === void 0 ? void 0 : _a.finish();
            }
        };
        View.prototype.finish = function () {
            var _this = this;
            var _a;
            _super.prototype.finish.call(this);
            (0, jquery_1.default)("[".concat(this.id, "]")).off();
            (0, jquery_1.default)("[".concat(this.id, "]")).find("*").off();
            // trigger finish from the inserted views within this view.
            this.insertedViews.forEach(function (x) {
                var _a;
                (_a = x.getView()) === null || _a === void 0 ? void 0 : _a.finish();
            });
            // remove the view from the inserted views array parent;
            var insertedViews = (_a = this.insertedInto.getView()) === null || _a === void 0 ? void 0 : _a.insertedViews;
            if (insertedViews != undefined) {
                this.insertedInto.getView().insertedViews = insertedViews.filter(function (id) {
                    id.view != _this.insertedInto.view;
                });
            }
            this.viewWasInsertedCallback = undefined;
            // remove the current View.
            this.removeHtmlOfView();
            // remove the view from the views array.
            window.mApp.views.delete(this.id);
            delete window.mApp.moduleManager.moduleViewsExecutor[this.id];
            if (this.viewWasFinishedCallback != undefined) {
                this.viewWasFinishedCallback(this.id);
            }
            this.viewWasFinishedCallback = undefined;
        };
        // HTML
        View.prototype.parseHtml = function () {
            var _a;
            if (this.html == undefined) {
                return undefined;
            }
            var el = document.createElement('html');
            el.innerHTML = this.html;
            var select = (_a = el.querySelector('body')) === null || _a === void 0 ? void 0 : _a.firstElementChild;
            if (select == null) {
                return undefined;
            }
            return select;
        };
        View.prototype.isHidden = function (set) {
            if (set === void 0) { set = undefined; }
            if (set == undefined) {
                return this.isHiddenFlag;
            }
            this.isHiddenFlag = set;
            if (set) {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "display": "none" });
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).css({ "display": "" });
            }
            return set;
        };
        View.prototype.getView = function (id) {
            return window.mApp.views.get(id);
        };
        View.prototype.parentResized = function (name) {
        };
        View.prototype.removeHtmlOfView = function () {
            (0, jquery_1.default)("[".concat(this.id, "]")).remove();
        };
        View.prototype.bringSubViewToTop = function (id) {
            var _a;
            var found = false;
            for (var _i = 0, _b = this.insertedViews; _i < _b.length; _i++) {
                var view = _b[_i];
                if (view.view != undefined) {
                    if (view.view == id) {
                        found = true;
                    }
                }
            }
            if (!found) {
                return false;
            }
            var parent = (0, jquery_1.default)("[".concat(id, "]")).parent();
            var htmlOfView = (0, jquery_1.default)("[".concat(id, "]"));
            (_a = this.getView(id)) === null || _a === void 0 ? void 0 : _a.removeHtmlOfView();
            parent.append(htmlOfView);
            return true;
        };
        View.prototype.bringViewToTheTop = function () {
            var superView = this.insertedInto.getView();
            if (superView == undefined) {
                return false;
            }
            return superView.bringSubViewToTop(this.id);
        };
        return View;
    }(base_1.default));
    exports["default"] = View;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/view/viewTemplates/popUpView.ts":
/*!***************************************************!*\
  !*** ./src/model/view/viewTemplates/popUpView.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../view/popUpViews/viewPopUpView */ "./src/view/popUpViews/viewPopUpView.ts"), __webpack_require__(/*! ../insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, viewPopUpView_1, insertView_1, view_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.PopUpView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var PopUpView = /** @class */ (function (_super) {
        __extends(PopUpView, _super);
        function PopUpView(view, id, html) {
            if (id === void 0) { id = window.mApp.utils.makeId(); }
            if (html === void 0) { html = viewPopUpView_1.viewPopUp; }
            var _this = _super.call(this, id, html) || this;
            _this.canExit = true;
            _this.setInsertDefaultViews();
            _this.view = view;
            return _this;
        }
        PopUpView.prototype.disableExit = function () {
            this.canExit = false;
        };
        PopUpView.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            this.insertNewView(new insertView_1.InsertedViewData(this.view, undefined));
            var insertedV = this.getView(this.view);
            if (insertedV != undefined) {
                insertedV.viewWasFinishedCallback = function (id) {
                    _this.finish();
                };
            }
            if (!this.canExit) {
                return;
            }
            (0, jquery_1.default)("[".concat(this.id, "]")).off().on('click', function (el) {
                var _a;
                el.preventDefault();
                el.stopImmediatePropagation();
                var viewFrame = (_a = _this.getView(_this.view)) === null || _a === void 0 ? void 0 : _a.getFrame();
                if (viewFrame == undefined) {
                    return;
                }
                if (el.clientX < viewFrame.x ||
                    el.clientX > viewFrame.x + viewFrame.width ||
                    el.clientY < viewFrame.y ||
                    el.clientY > viewFrame.y + viewFrame.height) {
                    _this.finish();
                    return;
                }
            });
        };
        PopUpView.showPopUpViewOnBody = function (view, canExit) {
            if (canExit === void 0) { canExit = true; }
            var pop = new PopUpView(view);
            if (!canExit) {
                pop.disableExit();
            }
            pop.insertInto(new insertView_1.InsertedViewData(undefined, "body"));
            pop.setConstraints({ top: "0px", bottom: "0px", left: "0px", right: "0px" });
            pop.clipToParent();
            return pop;
        };
        PopUpView.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "]")).off();
            var insertedV = this.getView(this.view);
            if (insertedV != undefined) {
                insertedV.viewWasFinishedCallback = undefined;
            }
            _super.prototype.finish.call(this);
        };
        return PopUpView;
    }(view_1.default));
    exports.PopUpView = PopUpView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/view/viewTemplates/selectionView.ts":
/*!*******************************************************!*\
  !*** ./src/model/view/viewTemplates/selectionView.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, view_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.SelectionView = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var SelectionView = /** @class */ (function (_super) {
        __extends(SelectionView, _super);
        function SelectionView(isSelected, id, html) {
            var _this = _super.call(this, id, html) || this;
            _this.isSelectedFlag = false;
            _this.isSelectedFlag = isSelected;
            return _this;
        }
        SelectionView.prototype.viewWasInserted = function () {
            this.addClickListener();
            this.isSelectedWasSet(this.isSelectedFlag);
        };
        SelectionView.prototype.clickHandler = function (isSelected) {
            // This will handle what will happen when we click 
            // we can either put the current to the contrary, or if its selected leave it as it is.
            if (!isSelected) {
                return !isSelected;
            }
            return isSelected;
        };
        SelectionView.prototype.addClickListener = function () {
            var _this = this;
            (0, jquery_1.default)("[".concat(this.id, "]")).off().on('click', function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                _this.isSelected(_this.clickHandler(_this.isSelectedFlag));
            });
        };
        SelectionView.prototype.isSelectedWasSet = function (set) {
            if (set) {
                (0, jquery_1.default)("[".concat(this.id, "]")).addClass("selected");
            }
            else {
                (0, jquery_1.default)("[".concat(this.id, "]")).removeClass("selected");
            }
        };
        SelectionView.prototype.isSelected = function (set, callBack) {
            var _a;
            if (callBack === void 0) { callBack = true; }
            if (set == undefined) {
                return this.isSelectedFlag;
            }
            this.isSelectedFlag = set;
            this.isSelectedWasSet(this.isSelectedFlag);
            if (callBack) {
                (_a = this.selectedInterface) === null || _a === void 0 ? void 0 : _a.viewWasSelected(this.id);
            }
            return this.isSelectedFlag;
        };
        SelectionView.prototype.finish = function () {
            this.selectedInterface = undefined;
            _super.prototype.finish.call(this);
        };
        return SelectionView;
    }(view_1.default));
    exports.SelectionView = SelectionView;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/view/viewTemplates/stateManagerController.ts":
/*!****************************************************************!*\
  !*** ./src/model/view/viewTemplates/stateManagerController.ts ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../../view/defaultViews/viewStateManager */ "./src/view/defaultViews/viewStateManager.ts"), __webpack_require__(/*! ../view */ "./src/model/view/view.ts"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, viewStateManager_1, view_1, jquery_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.StateManagerController = void 0;
    view_1 = __importDefault(view_1);
    jquery_1 = __importDefault(jquery_1);
    var StateManagerController = /** @class */ (function (_super) {
        __extends(StateManagerController, _super);
        function StateManagerController(title, mInterface) {
            var _this = _super.call(this, window.mApp.utils.makeId(), viewStateManager_1.viewStateManager) || this;
            _this.canExit = true;
            _this.mInterface = mInterface;
            _this.title = title;
            return _this;
        }
        StateManagerController.prototype.disableExit = function () {
            this.canExit = false;
        };
        StateManagerController.prototype.viewWasInserted = function () {
            var _this = this;
            _super.prototype.viewWasInserted.call(this);
            (0, jquery_1.default)("[".concat(this.id, "] .title")).text(this.title);
            if (!this.canExit) {
                (0, jquery_1.default)("[".concat(this.id, "] img")).css('display', 'none');
                return;
            }
            (0, jquery_1.default)("[".concat(this.id, "] .button")).off().on('click', function (ev) {
                ev.stopPropagation();
                ev.preventDefault();
                if (_this.mInterface.finished != undefined) {
                    _this.mInterface.finished();
                }
            });
        };
        StateManagerController.prototype.finish = function () {
            (0, jquery_1.default)("[".concat(this.id, "] .button")).off();
            _super.prototype.finish.call(this);
        };
        return StateManagerController;
    }(view_1.default));
    exports.StateManagerController = StateManagerController;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/model/viewsHolder/viewsHolder.ts":
/*!**********************************************!*\
  !*** ./src/model/viewsHolder/viewsHolder.ts ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../../view/defaultViews/defatulViewsHolder */ "./src/view/defaultViews/defatulViewsHolder.ts"), __webpack_require__(/*! ../view/insertView */ "./src/model/view/insertView.ts"), __webpack_require__(/*! ../view/view */ "./src/model/view/view.ts")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, defatulViewsHolder_1, insertView_1, view_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ViewsHolder = void 0;
    view_1 = __importDefault(view_1);
    var ViewsHolder = /** @class */ (function (_super) {
        __extends(ViewsHolder, _super);
        function ViewsHolder(id, views, active, html) {
            if (html === void 0) { html = defatulViewsHolder_1.viewDefaultViewsHolder; }
            var _this = _super.call(this, id, html) || this;
            _this.availableViews = [];
            _this.activeView = "";
            _this.availableViews = views;
            if (views.length == 0) {
                return _this;
            }
            _this.activeView = active !== null && active !== void 0 ? active : views[0];
            _this.insertViewsDefault = new insertView_1.InsertedViewData(_this.id, "$idviews");
            return _this;
        }
        ViewsHolder.prototype.viewWasInserted = function () {
            _super.prototype.viewWasInserted.call(this);
            this.setUp();
        };
        ViewsHolder.prototype.setUp = function () {
            var _this = this;
            _super.prototype.setUp.call(this);
            this.availableViews.forEach(function (x) {
                var current = _this.getView(x);
                _this.insertNewView(new insertView_1.InsertedViewData(x));
                current === null || current === void 0 ? void 0 : current.setConstraints({ top: "0px", left: "0px", right: "0px", bottom: "0px" });
            });
            this.showView(this.activeView);
            return this;
        };
        ViewsHolder.prototype.showView = function (id) {
            var _a, _b;
            for (var _i = 0, _c = this.availableViews; _i < _c.length; _i++) {
                var x = _c[_i];
                if (id == x) {
                    (_a = this.getView(x)) === null || _a === void 0 ? void 0 : _a.style({ "z-index": "3" });
                }
                else {
                    (_b = this.getView(x)) === null || _b === void 0 ? void 0 : _b.style({ "z-index": "1" });
                }
            }
            //this.getView(id)?.bringViewToTheTop();
        };
        return ViewsHolder;
    }(view_1.default));
    exports.ViewsHolder = ViewsHolder;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/baseGrid/baseGridElementView.ts":
/*!**************************************************!*\
  !*** ./src/view/baseGrid/baseGridElementView.ts ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewBaseGridElement = void 0;
    exports.viewBaseGridElement = "\n\n<div $id class=\"test-grid-element\">\n\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/baseGrid/baseGridSeparatorView.ts":
/*!****************************************************!*\
  !*** ./src/view/baseGrid/baseGridSeparatorView.ts ***!
  \****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewBaseGridHSeparator = exports.viewBaseGridVSeparator = void 0;
    exports.viewBaseGridVSeparator = "\n\n<div $id class=\"test-grid-v-separator\">\n\n    \n\n    <div $idgrabber class=\"separator-transparent cursor\">\n         <div  class=\"separator-hover bg-accent\"></div>\n    </div>\n\n</div>\n";
    exports.viewBaseGridHSeparator = "\n\n<div $id class=\"test-grid-h-separator\">\n\n<div $idgrabber class=\"separator-transparent cursor\">\n        <div  class=\"separator-hover bg-accent\"></div>\n</div>\n\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/baseGrid/baseGridView.ts":
/*!*******************************************!*\
  !*** ./src/view/baseGrid/baseGridView.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewBaseGridHtml = void 0;
    exports.viewBaseGridHtml = "\n\n<div $id class=\"test-grid\">\n\n\n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/bottomViews/KetsuLogsViewerController.ts":
/*!***********************************************************!*\
  !*** ./src/view/bottomViews/KetsuLogsViewerController.ts ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.KetsuLogsViewerView = void 0;
    exports.KetsuLogsViewerView = "\n\n\n\n<div $id class=\"ketsu-logs-viewer\" >  \n\n        \n    <div class=\"nav-bar\"> \n        \n        <div class=\"center-v-flex title\"> \n\n        Logs\n        </div>\n\n        <div class=\"center-flex button pointer\"> <img src=\"./images/arrow-bottom.png\"></div>\n\n        \n    </div>\n\n\n    <div> \n        \n        <div $idviews class=\"fill-absolute cv\"> \n\n        </div>\n    \n    </div>\n\n</div>\n\n\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/bottomViews/bottomStatusView.ts":
/*!**************************************************!*\
  !*** ./src/view/bottomViews/bottomStatusView.ts ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.bottomStatusBarView = void 0;
    exports.bottomStatusBarView = "<div $id> \n\n    <div class=\"fill-absolute bottom-status\"> \n\n        <div class=\"center-flex sockets\"> <div class=\"center-flex\"> <img src=\"./images/connected.png\">  </div> <div class=\"one-line title\">Connected</div> </div>\n\n        <div class=\"logs\"></div>\n\n    </div>\n\n\n</div>";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/CenterGridElementControllerView.ts":
/*!*****************************************************************!*\
  !*** ./src/view/centerViews/CenterGridElementControllerView.ts ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.CenterGridElementControllerView = void 0;
    exports.CenterGridElementControllerView = "\n    \n\n        <div $id class=\"center-grid-controller\">\n\n        <div $idviews class=\"fill-absolute\"> </div>\n\n        </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/dataRequestControllerView.ts":
/*!***********************************************************!*\
  !*** ./src/view/centerViews/dataRequestControllerView.ts ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDropDownRequestType = exports.viewDataRequestController = void 0;
    exports.viewDataRequestController = "\n<div $id class=\"data-request-controller\">\n\n    <div  class=\"fill-absolute data-request-grid\"> \n\n        <div $idnotification > \n        \n        </div>\n\n        <div> \n            <div class=\"fill-absolute\">\n                <div class=\"input-holder \"> \n                        <div class=\"input-grid \"> \n                        <input class=\"request-input\" placeholder=\"Type the url here.\">\n                    <div id=\"requesttype\" class=\"button center-flex pointer\">GET</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div $idviews class=\"params\"> \n        \n        \n        \n        </div>\n    \n    </div>\n\n</div>\n";
    exports.viewDropDownRequestType = "\n\n   <div $id >\n\n   <div class=\"fill-absolute\"> \n   \n      <div class=\"dropdown-cell-requesttype\">\n\n         <div class=\"title\"> GET </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/headersView.ts":
/*!*********************************************!*\
  !*** ./src/view/centerViews/headersView.ts ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewHtmlHeaders = void 0;
    exports.viewHtmlHeaders = "\n\n<div $id class=\"bg-primary\"> \n\n<div class=\"fill-absolute\"> \n\n    <div class=\"headers-view\"> \n\n    <table $idheadersTable >\n        <tr>\n        <th>\n        <div  class=\"key-holder\"> \n            <div class=\"checkbox-holder\"> \n            \n            </div>\n            <div class=\"relative elem-padding-equal-wide-only center-v-flex\"> \n                Key\n            </div>\n        </div>\n        </th>\n        <th class=\"elem-padding-equal-wide-only\">Value</th>\n        </tr>\n        <tr>\n        <td>\n            <div  class=\"key-holder\"> \n                <div class=\"checkbox-holder\"> \n\n                <input type='checkbox' class=\"ignore center-absolute\" checked >\n                </div>\n                <div class=\"relative\"> \n                    <input class=\"input-header-key header-input\" placeholder=\"Key\">\n                </div>\n            </div>\n        </td>\n        <td class=\"relative\">\n            <input class=\"input-header-value header-input\" placeholder=\"Value\">\n        </td>\n        </tr>\n \n    </table>\n    \n    </div>\n\n</div>\n\n\n</div>\n\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/javascriptControllerView.ts":
/*!**********************************************************!*\
  !*** ./src/view/centerViews/javascriptControllerView.ts ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.javascriptControllerView = void 0;
    exports.javascriptControllerView = "\n<div $id class=\"javascript-controller\">\n\n<div $idviews class=\"fill-absolute\"> </div>\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/navBar.ts":
/*!****************************************!*\
  !*** ./src/view/centerViews/navBar.ts ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.navBarView = void 0;
    exports.navBarView = "\n\n<div $id > \n\n    <div class=\"fill-absolute navbar-holder\"> \n        <div class=\"one-line relative center-flex title\">\n            MODULE CREATOR\n            <div class=\"beta\">beta</div>\n        </div>\n        <div class=\"buttons-holder fill-absolute\">\n            <div class=\"save button-holder center-v-flex\"> <div class=\"test-button one-line\">Save</div> </div>\n            <div class=\"export  button-holder center-v-flex\"><div class=\"test-button\">Export</div></div>\n        </div>\n\n    </div>\n\n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/requestControllerView.ts":
/*!*******************************************************!*\
  !*** ./src/view/centerViews/requestControllerView.ts ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewRequestController = void 0;
    exports.viewRequestController = "\n    <div $id class=\"request-controller\">\n\n        <div $idviews class=\"fill-absolute\"> </div>\n\n    </div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/centerViews/routeView.ts":
/*!*******************************************!*\
  !*** ./src/view/centerViews/routeView.ts ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewRoute = void 0;
    exports.viewRoute = "\n<div $id >\n\n    <div class=\"fill-absolute route-view\">\n        <div class=\"route-holder  center-v-flex\">\n            <div class=\"route \">\n            \n            </div>\n        </div>\n   \n        <div class=\"execute-button loading center-flex one-line\"> \n        <div class=\"spinner-holder\"> </div> \n            <div class=\"title\">Execute Chapters</div> \n        </div>\n     </div>\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/basicHtml.ts":
/*!********************************************!*\
  !*** ./src/view/defaultViews/basicHtml.ts ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.basicHtml = void 0;
    exports.basicHtml = "\n\n<div $id>  <div $idviews class=\"fill-absolute\"> \n\n\n\n</div></div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/defatulViewsHolder.ts":
/*!*****************************************************!*\
  !*** ./src/view/defaultViews/defatulViewsHolder.ts ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDefaultViewsHolder = void 0;
    exports.viewDefaultViewsHolder = "\n    <div $id class=\"views-holder\">\n\n        <div $idviews class=\"fill-absolute\"> </div>\n\n    </div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/defaultCollectionView.ts":
/*!********************************************************!*\
  !*** ./src/view/defaultViews/defaultCollectionView.ts ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDefaultCollectionViewView = void 0;
    exports.viewDefaultCollectionViewView = "\n\n<div $id >\n\n    <div  class=\"fill-absolute\"> \n\n        <div $idgrid class=\"collection-view\"> \n        \n        </div>\n\n    </div>\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/defaultDropDownCellView.ts":
/*!**********************************************************!*\
  !*** ./src/view/defaultViews/defaultDropDownCellView.ts ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDefaultDropDownCell = void 0;
    exports.viewDefaultDropDownCell = "\n\n   <div $id >\n\n   <div class=\"fill-absolute\"> \n   \n      <div class=\"default-dropdown-cell\">\n\n         <div class=\"title\"> title </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/elementModalView.ts":
/*!***************************************************!*\
  !*** ./src/view/defaultViews/elementModalView.ts ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDefaultElementModal = void 0;
    exports.viewDefaultElementModal = "\n\n<div $id > <div $idviews class=\"fill-absolute\" > </div> </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/menuSelector.ts":
/*!***********************************************!*\
  !*** ./src/view/defaultViews/menuSelector.ts ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewDefaultMenuSelectorCell2 = exports.viewDefaultMenuSelectorCell = exports.viewDefaultMenuSelector = void 0;
    exports.viewDefaultMenuSelector = "\n<div $id class=\"default-menu-selector\">\n\n<div $idviews class=\"fill-absolute\"> </div>\n\n\n</div>\n";
    exports.viewDefaultMenuSelectorCell = "\n<div $id class=\"default-menu-selector-cell pointer\">\n\n    <div class=\"fill-absolute center-flex\"> \n        <div class=\"one-line\">Hello world</div>\n    </div>\n\n    <div class=\"selected-overflow\"></div>\n</div>\n";
    exports.viewDefaultMenuSelectorCell2 = "\n<div $id class=\"default-menu-selector-cell-2 pointer\">\n\n    <div class=\"fill-absolute center-flex\"> \n        <div class=\"one-line\">Hello world</div>\n    </div>\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/defaultViews/viewStateManager.ts":
/*!***************************************************!*\
  !*** ./src/view/defaultViews/viewStateManager.ts ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewStateManager = void 0;
    exports.viewStateManager = "\n\n<div $id> \n    <div class=\"fill-absolute view-state-manager\"> \n\n    <div class=\"title center-v-flex\">This is the title of the widnow</div>\n    <div class=\"button center-flex\">  <img src=\"./images/close-button.png\">   </div>\n\n    </div>\n</div>\n\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/leftMenuGridElView.ts":
/*!*************************************************!*\
  !*** ./src/view/leftMenu/leftMenuGridElView.ts ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuGridElView = void 0;
    exports.leftMenuGridElView = "\n\n<div $id class=\"left-menu-grid-element left-menu-big\">\n\n\n\n\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/leftMenuMenuViewerView.ts":
/*!*****************************************************!*\
  !*** ./src/view/leftMenu/leftMenuMenuViewerView.ts ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuMenuViewerView = void 0;
    exports.leftMenuMenuViewerView = "\n\n<div $id class=\"left-menu-viewer\"> \n    \n\n    \n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/leftMenuTopView.ts":
/*!**********************************************!*\
  !*** ./src/view/leftMenu/leftMenuTopView.ts ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuTopView = void 0;
    exports.leftMenuTopView = "\n\n<div $id class=\"left-top-view\"> \n    \n    <div class=\"fill-absolute grid\"> \n\n        <div class=\"p-name\"> <div class= \"center-v-absolute one-line\">Project Name</div> </div>\n\n        <div class=\"buttons-holder\">\n            <div class=\"button center-absolute \">\n                <div class=\"center-absolute new-button\">New</div>\n            </div>\n\n            <div> </div>\n            <div class=\"button  \"> \n                <div class=\"center-absolute load-button\">Load</div>\n            </div>\n        </div>\n\n\n    </div>\n    \n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCellView.ts":
/*!*****************************************************************************!*\
  !*** ./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCellView.ts ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuViewerModuleCellView = void 0;
    exports.leftMenuViewerModuleCellView = "\n<div $id class=\"collection-view-cell-test pointer\">\n    <div class=\" cell-holder \">\n        <div class=\"fill-absolute cell-distr\">\n        <div class=\"center-flex\"><img src=\"\"></div> \n\n            <div class=\"click-select relative\"> \n            <div class=\"title tc-t-primary one-line\">Cell</div> \n            </div>\n            <div class=\"button-holder\"> <div class=\"bh-txt  center-absolute\">Del</div> </div>\n        </div>\n    </div>\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCollectionView.ts":
/*!***********************************************************************************!*\
  !*** ./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleCollectionView.ts ***!
  \***********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuViewerModuleCollectionView = void 0;
    exports.leftMenuViewerModuleCollectionView = "\n\n<div $id class=\"collection-view\">\n\n    <div class=\"fill-absolute\"> \n\n\n    \n        <div $idgrid class=\"collection-view\">\n\n        <div style=\"left: 15px\" class=\"cv-section-viewer\"> </div>\n\n        <div style=\"left: 30px\" class=\"cv-section-viewer\"> </div>\n\n\n        </div>\n\n    \n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleSectionView.ts":
/*!********************************************************************************!*\
  !*** ./src/view/leftMenu/menuViewer/module/leftMenuViewerModuleSectionView.ts ***!
  \********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuViewerModuleSectionView = void 0;
    exports.leftMenuViewerModuleSectionView = "\n<div $id class=\"collection-view-cell-header-test pointer\"> \n    <div class=\"cell-holder\">\n        <div class=\"fill-absolute bottom-border section-distr\">\n            <div class=\"section-controller\"> <img src=\"./images/arrow-bottom.png\"></div>\n            <div class=\"title tc-t-primary-hover\"> <div class=\"text one-line\">   </div>  </div> \n            <div class=\"button-holder\"> <div class=\"bh-txt  center-absolute\">Add</div> </div>\n\n        </div>\n    </div>\n</div>\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/subMenu/leftMenuSubMenuCellView.ts":
/*!**************************************************************!*\
  !*** ./src/view/leftMenu/subMenu/leftMenuSubMenuCellView.ts ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuSubMenuCellView = void 0;
    exports.leftMenuSubMenuCellView = "\n\n<div $id class=\"cell bg-secondary-dark-hover fs-caption-1 fw-regular center-flex\"> \n\n    \n\n    <div class=\"cell-holder \"> \n\n        <div class=\"center-flex relative\"> \n            <img class=\"\" src=\"$imageUrl\">\n        </div>\n    \n        <div class=\"title\">$title</div>\n\n    </div>\n    \n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/leftMenu/subMenu/leftMenuSubMenuView.ts":
/*!**********************************************************!*\
  !*** ./src/view/leftMenu/subMenu/leftMenuSubMenuView.ts ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.leftMenuSubMenuView = void 0;
    exports.leftMenuSubMenuView = "\n\n<div $id class=\"left-sub-menu\"> \n    \n    <div leftMenuSubMenuHolder class=\"left-sub-menu-holder\"> \n        \n    </div>\n    \n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/popUpViews/ConnectSocketView.ts":
/*!**************************************************!*\
  !*** ./src/view/popUpViews/ConnectSocketView.ts ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewConnectSocket = void 0;
    exports.viewConnectSocket = "\n\n<div $id class=\"connect-socket shadow\"> \n\n    <div $idstatemanager class=\"relative\"></div>\n    <div  class=\"relative\">  \n        \n        <div>- To execute and debug modules you will need to connect to KETSU module creator server, it can be found on the KETSU app.<br>\n        - Type the ws url [ws://***.**.***:***] that is displayed on KETSU Module Creator and click connect.<br>- Keep your phone screen on and dont leave KETSU module creator to avoid disconnections.<br>- Your phone and computer have to be connected to the same wifi or your computer has to be connected to your phone hotspot.</div>\n        \n        <div class=\"connection-holder\"> \n        <input  class=\"input-header-value header-input\" placeholder=\"ex: ws://999.23.43.1:3000\">\n        <div class=\"status center-flex relative\"> <img class=\"status-image\" src=\"./images/disconnected.png\"> <div class=\"loading bg-primary relative\"> </div>   </div>\n        <div class=\"button bg-secondary-dark-hover center-flex\"> <div class=\"elem-padding-wider connect-button\">Connect</div> </div>\n        </div>\n    </div>\n\n\n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/popUpViews/newProjectView.ts":
/*!***********************************************!*\
  !*** ./src/view/popUpViews/newProjectView.ts ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.newProjectView = void 0;
    exports.newProjectView = "\n    <div $id class=\"new-project-view\"> \n        <div $idstatemanager class=\"relative\">\n        </div>\n        <div class=\"elements-holder\">\n            <input placeholder=\"Insert Project Name...\">\n            <div class=\"center-flex create-button\">Create!</div>\n        </div>\n    \n    </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/popUpViews/viewPopUpView.ts":
/*!**********************************************!*\
  !*** ./src/view/popUpViews/viewPopUpView.ts ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.viewPopUp = void 0;
    exports.viewPopUp = "\n\n<div $id> \n    <div class=\"fill-absolute   \"> \n        <div class=\"  pop-up-holder\"> \n            <div $idviews class=\"relative center-flex\"> </div>\n        </div>\n\n    </div>\n</div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/settingsCells/clickCellView.ts":
/*!*************************************************!*\
  !*** ./src/view/settingsCells/clickCellView.ts ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.clickCellView = void 0;
    exports.clickCellView = "\n\n    <div $id> \n    \n        <div class=\"settings-click-cell\"> \n\n            <div class=\"text\"> \n            \n                <div class=\"title\">THIS IS THE TITLE</div>\n                <div class=\"message\">THIS IS THE Msdkfh sdhfjasdhflskajhf skljdah flakjshf slakdjhf salkd jfhalskdjhf lkasdjhf lsdakjhf laskjdhf aldksj fhadlskjfh alsdkjhf alsdkjfhalskdjfh alskdj fhsdjklfh lksajdf ESSAGE</div>\n\n            </div>\n\n            <div class=\"center-flex\"> \n                <div class=\"switch\">\n                \n                    <div class=\"circle\"> </div>\n            \n                </div>\n            </div>\n        </div>\n\n    </div>\n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/settingsCells/jsLogsCell.ts":
/*!**********************************************!*\
  !*** ./src/view/settingsCells/jsLogsCell.ts ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.jsLogsCellView = void 0;
    exports.jsLogsCellView = "<div $id class=\"js-logs-cell-holder \"> \n\n    <div class=\"fill-absolute js-logs-cell\"> \n\n        <pre  class=\"title center-v-flex\"></pre>\n\n    </div>\n\n</div>";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/settingsCells/logsCellView.ts":
/*!************************************************!*\
  !*** ./src/view/settingsCells/logsCellView.ts ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.logsCellView = void 0;
    exports.logsCellView = "<div $id class=\"logs-cell-holder \"> \n\n    <div class=\"fill-absolute logs-cell\"> \n\n        <div class=\"title center-v-flex\">\n            Hello world\n        </div>\n\n        <div class=\"center-flex arrow\">></div>\n\n    </div>\n\n</div>";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/settingsCells/paramEditorCellView.ts":
/*!*******************************************************!*\
  !*** ./src/view/settingsCells/paramEditorCellView.ts ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.paramEditorCellView = void 0;
    exports.paramEditorCellView = "\n\n<div $id> \n\n    <div class=\" param-editor-holder\">\n     \n        <div class=\"param-editor\"> \n            <div class=\"title\"> This is the title</div>\n            <input placeholder=\"Type here.\">\n            <div class=\"message\">The input here is a boolea insert either true or false</div>\n\n        </div>\n     \n    </div>\n\n</div> \n\n";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),

/***/ "./src/view/settingsCells/sectionCellView.ts":
/*!***************************************************!*\
  !*** ./src/view/settingsCells/sectionCellView.ts ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.sectionCellView = void 0;
    exports.sectionCellView = "<div $id> \n\n    <div class=\"fill-absolute section-cell\"> \n    \n    <div class=\"title\"></div>\n    \n    </div>\n\n</div>";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["modules"], () => (__webpack_exec__("./src/index.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
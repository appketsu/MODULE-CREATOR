(self.webpackChunkmodule_dev_site_ts=self.webpackChunkmodule_dev_site_ts||[]).push([[179],{94699:(e,t,n)=>{var i={"./ExampleModuleTutorial.json":48042};function o(e){var t=l(e);return n(t)}function l(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=l,e.exports=o,o.id=94699},76752:function(e,t,n){var i,o,l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,l){function s(e){try{a(i.next(e))}catch(e){l(e)}}function r(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}a((i=i.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,i,o,l,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(l){return function(r){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,r])}}};i=[n,t,n(91042),n(36465),n(61795),n(83229),n(19701),n(56231),n(51199),n(78110),n(23408)],o=function(e,t,n,i,o,r,a,d,c,u,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var h=function(){function e(){this.views=new Map,this.utils=new o.Utils,this.moduleManager=new r.ModuleManager,this.sockets=new a.SocketsConnectionHandler}return e.prototype.start=function(){var e;return l(this,void 0,void 0,(function(){var t,o;return s(this,(function(l){return this.configApp(),new n.BaseGridController("baseGrid",i.viewBaseGridHtml).setUp(),t=null!==(e=this.moduleManager.getLocalStotrageModule())&&void 0!==e?e:this.moduleManager.getDefaultModule(),null==window.mApp.moduleManager.getLocalStotrageModule()?((o=new p.NewProjectController).disableExit(),u.PopUpView.showPopUpViewOnBody(o.id,!1).disableEscape()):this.moduleManager.loadNewModule(t),d.ConnectionChecker.shared.setUp(),this.sockets.setUp(this.sockets.getCurrentIp()),c.AutoSave.shared.start(),[2]}))}))},e.prototype.configApp=function(){},e.prototype.getApp=function(){return this},e}();t.default=h}.apply(t,i),void 0===o||(e.exports=o)},91042:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(9303),n(69243),n(32614),n(73802),n(34580),n(62069),n(71208),n(68166),n(86596),n(20191),n(29870),n(23441),n(4234),n(3137),n(22015),n(46003)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f,v,g,m,w,y){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseGridController=void 0,n=r(n),o=r(o),l=r(l);var b=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.setUp=function(){var e=this;this.insertInto(new a.InsertedViewData(void 0,"gridHolder"));var t=[new g.NavBar("mainNavBar"),new c.LeftMenuGridElementController("leftMenuGridEl",u.leftMenuGridElView),new o.default("VS4",d.viewBaseGridVSeparator),new o.default("VS3",d.viewBaseGridHSeparator,!1),new p.CenterViewGridElementController("CenterViewGridElementController",h.CenterGridElementControllerView),new o.default("VS1",d.viewBaseGridVSeparator),new o.default("VS2",d.viewBaseGridVSeparator,!0),new w.RightGridElementController("documentation",y.viewRightGridController),new l.default("HS1",d.viewBaseGridHSeparator),new m.KetsuLogsGridView(new f.LogsGridController("logsGridController").id,"bottomLogs",void 0),new v.BottomStatusController("bottomStatusBar")];return this.gridElements=t.map((function(t){return e.insertNewView(new a.InsertedViewData(t.id,void 0)),t.id})),this.gridDistribution=[["mainNavBar","mainNavBar","mainNavBar","mainNavBar","mainNavBar"],["VS3","VS3","VS3","VS3","VS3"],["leftMenuGridEl","VS4","CenterViewGridElementController","VS2","documentation"],["leftMenuGridEl","VS4","HS1","VS2","documentation"],["leftMenuGridEl","VS4","bottomLogs","VS2","documentation"],["bottomStatusBar","bottomStatusBar","bottomStatusBar","bottomStatusBar","bottomStatusBar"]],this.gridDesing={columns:[new i.GridElementDesign("350","px",!0,[{resize:40,range:{from:0,to:200}},{resize:350,range:{from:200,to:350}}],{min:40,max:400}),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("auto","",!0,[],{min:600,max:99999999}),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("500","px",!0,[{resize:0,range:{from:0,to:250}},{resize:500,range:{from:250,to:500}}],{min:0,max:3e3})],rows:[new i.GridElementDesign("50","px",!1),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("auto","",!0,[],{min:350,max:99999999}),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("40","px",!0,[{resize:40,range:{from:0,to:100}}]),new i.GridElementDesign("30","px",!1)]},this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this},t.prototype.setLogsViewSize=function(e){this.gridDesing.rows[this.gridDesing.rows.length-2].size="".concat(e),this.setDesign(this.gridDesing)},t.prototype.setLeftMenuViewSize=function(e){this.gridDesing.columns[0].size="".concat(e),this.setDesign(this.gridDesing)},t.prototype.setDocumnetationViewSize=function(e){this.gridDesing.columns[this.gridDesing.columns.length-1].size="".concat(e),this.setDesign(this.gridDesing)},t}(n.default);t.BaseGridController=b}.apply(t,i),void 0===o||(e.exports=o)},23441:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(19701),n(78110),n(9450),n(67214),n(19755)],o=function(e,t,n,i,o,l,a,d){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BottomStatusController=void 0,n=r(n),d=r(d);var c=function(e){function t(t){void 0===t&&(t=window.mApp.utils.makeId());var n=e.call(this,t,l.bottomStatusBarView)||this;return n.nameToViews={left:"leftMenuGridEl",right:"documentation",bottom:"bottomLogs"},window.mApp.sockets.socketsConnectionInterfaces[n.id]=n,n}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,d.default)("[".concat(this.id,"] .github")).off().on("click",(function(e){var t;e.preventDefault(),e.stopImmediatePropagation(),null===(t=window.open("https://github.com/appketsu/MODULE-CREATOR","_blank"))||void 0===t||t.focus()})),(0,d.default)("[".concat(this.id,"] .sockets")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),o.PopUpView.showPopUpViewOnBody((new a.ConnectSocketController).id)})),(0,d.default)("[".concat(this.id,"] .window-icon")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation();var n=e.currentTarget.attributes[1].name,i=t.getView(t.nameToViews[n]);i.isClosed()?i.open():i.close()})),window.mApp.sockets.connectionStatus==i.serverConnectionStatus.connected?this.connectionEnabled():this.connectionFailed()},t.prototype.updateWindowButtons=function(){var e=this;Object.keys(this.nameToViews).forEach((function(t){console.log(t);var n=e.getView(e.nameToViews[t]);console.log((0,d.default)("[".concat(e.id,"] [").concat(t,"] .connected-img"))),n.isClosed()?(0,d.default)("[".concat(e.id,"] [").concat(t,"] img")).attr("src",window.mApp.utils.getImageUrl("".concat(t,"_closed.png"))):(0,d.default)("[".concat(e.id,"] [").concat(t,"] img")).attr("src",window.mApp.utils.getImageUrl("".concat(t,"_opened.png")))}))},t.prototype.isClosed=function(){return this.getSize().height<=30},t.prototype.connectionEnabled=function(){(0,d.default)("[".concat(this.id,"] .title")).text("Connected"),(0,d.default)("[".concat(this.id,"] .bottom-status .connected-img")).attr("src",window.mApp.utils.getImageUrl("connected.png"))},t.prototype.connectionFailed=function(){(0,d.default)("[".concat(this.id,"] .title")).text("Disconnected"),(0,d.default)("[".concat(this.id,"] .bottom-status .connected-img")).attr("src",window.mApp.utils.getImageUrl("disconnected.png"))},t.prototype.finish=function(){delete window.mApp.sockets.socketsConnectionInterfaces[this.id],(0,d.default)("[".concat(this.id,"] .sockets")).off(),(0,d.default)("[".concat(this.id,"] .window-icon")).off(),(0,d.default)("[".concat(this.id,"] .github")).off(),e.prototype.finish.call(this)},t}(n.default);t.BottomStatusController=c}.apply(t,i),void 0===o||(e.exports=o)},86596:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(6993),n(34580),n(19755),n(95646)],o=function(e,t,n,i,o,l,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CenterViewGridElementController=void 0,n=r(n),l=r(l);var d=function(e){function t(t,n){var l=e.call(this,t,n)||this;return l.currentModuleDataId="",l.viewTypes=[{pathMatches:["chapters"],createView:function(e){return new i.RequestController(window.mApp.utils.makeId(15),e,"<div>hello world</div>")}}],window.mApp.moduleManager.moduleViewsExecutor[l.id]=l,l.insertViewsDefault=new o.InsertedViewData(l.id,"$idviews"),l}return s(t,e),t.prototype.viewWasInserted=function(){this.setUp()},t.prototype.setUp=function(){return e.prototype.setUp.call(this),(0,l.default)("[".concat(this.id,"]")).css("overflow","hidden"),this},t.prototype.moduleLoaded=function(){var e;this.modulePartWasSelected(null!==(e=window.mApp.moduleManager.getModuleOptions().selected)&&void 0!==e?e:"")},t.prototype.moduleDataUpdated=function(){var e;if(null!=window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId));else for(var t=0,n=this.insertedViews;t<n.length;t++)null===(e=n[t].getView())||void 0===e||e.finish()},t.prototype.modulePartWasSelected=function(e){for(var t,n,l,s=0,r=this.insertedViews;s<r.length;s++)null===(t=r[s].getView())||void 0===t||t.finish();if(""!=e){this.currentModuleDataId=e,window.mApp.utils.deepCopy(null!==(l=null===(n=window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId))||void 0===n?void 0:n.jsonPath)&&void 0!==l?l:[]).filter((function(e){if(null==window.mApp.utils.getNumberFromString(e))return e})).join();var d=window.mApp.moduleManager.moduleMap.get(e);if(null!=d){var c=!1;null!=window.mApp.utils.getNumberFromString(d.jsonPath[d.jsonPath.length-1])&&(c=!0);var u=void 0;u=c?new i.RequestController(window.mApp.utils.makeId(15),e):new a.ParamsContoller(e),this.insertNewView(new o.InsertedViewData(u.id)),u.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"})}}},t.prototype.finish=function(){e.prototype.finish.call(this)},t}(n.default);t.CenterViewGridElementController=d}.apply(t,i),void 0===o||(e.exports=o)},82376:(e,t,n)=>{var i,o;i=[n,t,n(92688),n(85509),n(80033),n(96423)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuDataset=void 0,t.leftMenuDataset=[{id:"module",selected:!0,subMenuCell:{viewId:"leftSubMenuModule",image:"./images/module.png",name:"Module"},subMenuViewer:{viewId:"leftMenuModuleView",createView:function(){return new o.TestViewController("leftMenuModuleView",'<div $id class="left-menu-viewer-view">  </div> ')}}},{id:"notes",selected:!1,subMenuCell:{viewId:"leftMenuSubMenuNotes",image:"./images/notes.png",name:"Module\nNotes"},subMenuViewer:{viewId:"leftMenuNotesView",createView:function(){return new n.ModuleNotesController("leftMenuNotesView")}}},{id:"quickDocumentation",selected:!1,subMenuCell:{viewId:"leftSubMenuquickDocumentation",image:"./images/information.png",name:"Quick Doc"},subMenuViewer:{viewId:"leftMenuQuickDocView",createView:function(){return new l.QuickDocController("leftMenuQuickDocView")}}},{id:"moduleTutorials",selected:!1,subMenuCell:{viewId:"leftSubMenuTutorials",image:"./images/tutorial.png",name:"Module Tutorials"},subMenuViewer:{viewId:"leftMenuModuleTutorials",createView:function(){return new i.ModuleTutorialsController("leftMenuModuleTutorials")}}}]}.apply(t,i),void 0===o||(e.exports=o)},71208:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(49076),n(34580),n(88408),n(832),n(31779),n(78130),n(75066),n(60378),n(82376),n(19755)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuGridElementController=void 0,n=r(n),i=r(i),f=r(f);var v=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.subMenu="",i.subMenuViewer="",i.topView="",i.leftMenuData=h.leftMenuDataset,i}return s(t,e),t.prototype.viewWasInserted=function(){this.setUp()},t.prototype.setUp=function(){e.prototype.setUp.call(this);var t=new a.LeftMenuMenuViewerController("leftMenuViewer",c.leftMenuMenuViewerView);t.leftMenuDataInterface=this,this.subMenuViewer=t.id;var n=new d.LeftMenuSubMenuController("leftMenuSubMenu",l.leftMenuSubMenuView);n.leftMenuDataInterface=this,this.subMenu=n.id;var s=new p.LeftMenuTopController("leftMenuTop",u.leftMenuTopView);return this.topView=s.id,this.insertNewView(new o.InsertedViewData(this.subMenu,void 0)),this.insertNewView(new o.InsertedViewData(this.subMenuViewer,void 0)),this.insertNewView(new o.InsertedViewData(this.topView,void 0)),this.mResizeObserver=new i.default(new o.InsertedViewData(this.id,void 0),[{name:"big",condition:function(e){return e.inlineSize>=60&&e.inlineSize<=999999}},{name:"small",condition:function(e){return e.inlineSize>=0&&e.inlineSize<=50}}]),this.mResizeObserver.interface=this,this.mResizeObserver.triggerManually(),this},t.prototype.resizeTriggered=function(e){var t=window.mApp.views.get(this.subMenuViewer);switch(e.name){case"small":null==t||t.isHidden(!0),(0,f.default)("[".concat(this.id,"]")).addClass("left-menu-small"),(0,f.default)("[".concat(this.id,"]")).removeClass("left-menu-big");break;case"big":null==t||t.isHidden(!1),(0,f.default)("[".concat(this.id,"]")).removeClass("left-menu-small"),(0,f.default)("[".concat(this.id,"]")).addClass("left-menu-big")}var n=this.getView(this.subMenu);null==n||n.parentResized(e.name);var i=this.getView("bottomStatusBar");null==i||i.updateWindowButtons()},t.prototype.resizeFinished=function(){},t.prototype.getLeftMenuData=function(e){for(var t=0,n=this.leftMenuData;t<n.length;t++){var i=n[t];if(i.id=e)return i}},t.prototype.getLeftMenuDataArrray=function(){return this.leftMenuData},t.prototype.subMenuSelected=function(e){this.getView(this.subMenuViewer).changeMenuView(e)},t.prototype.isClosed=function(){return this.getSize().width<=40},t.prototype.open=function(){window.mApp.views.get("baseGrid").setLeftMenuViewSize(350)},t.prototype.close=function(){window.mApp.views.get("baseGrid").setLeftMenuViewSize(40)},t.prototype.finish=function(){this.mResizeObserver.finished(),e.prototype.finish.call(this)},t}(n.default);t.LeftMenuGridElementController=v}.apply(t,i),void 0===o||(e.exports=o)},60378:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,l){function s(e){try{a(i.next(e))}catch(e){l(e)}}function r(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}a((i=i.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,i,o,l,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(l){return function(r){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,r])}}},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(78110),n(19755),n(23408)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuTopController=void 0,n=d(n),o=d(o);var c=function(e){function t(t,n){var i=e.call(this,t,n)||this;return window.mApp.moduleManager.moduleViewsExecutor[i.id]=i,i}return s(t,e),t.prototype.viewWasInserted=function(){this.setUp()},t.prototype.setUp=function(){var t=this;return e.prototype.setUp.call(this),console.log("creating shit"),(0,o.default)("[".concat(this.id,"] .new-button")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),i.PopUpView.showPopUpViewOnBody((new l.NewProjectController).id).clipToParent()})),(0,o.default)("[".concat(this.id,"] .load-button")).off().on("click",(function(e){return r(t,void 0,void 0,(function(){var t,n,i;return a(this,(function(o){switch(o.label){case 0:return e.preventDefault(),e.stopImmediatePropagation(),[4,this.selectFile("application/json",!1)];case 1:return t=o.sent(),i=(n=window.mApp.moduleManager).loadNewModule,[4,t.text()];case 2:return i.apply(n,[o.sent()]),[2]}}))}))})),(0,o.default)("[".concat(this.id,"] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions().projectName),this},t.prototype.selectFile=function(e,t){return r(this,void 0,void 0,(function(){return a(this,(function(n){return[2,new Promise((function(n){var i=document.createElement("input");i.type="file",i.multiple=t,i.accept=e,i.onchange=function(e){var o=Array.prototype.slice.call(i.files);n(t?o:o[0])},i.click()}))]}))}))},t.prototype.moduleLoaded=function(){this.setUp()},t.prototype.moduleDataUpdated=function(){},t.prototype.moduleProjectNameChanged=function(){(0,o.default)("[".concat(this.id,"] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions().projectName)},t.prototype.finish=function(){delete window.mApp.moduleManager.moduleViewsExecutor[this.id],(0,o.default)("[".concat(this.id,"] .new-button")).off(),(0,o.default)("[".concat(this.id,"] .load-button")).off(),e.prototype.finish.call(this)},t}(n.default);t.LeftMenuTopController=c}.apply(t,i),void 0===o||(e.exports=o)},832:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(34580),n(11166),n(55353)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuMenuViewerController=void 0;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),window.mApp.moduleManager.moduleViewsExecutor[this.id]=this},t.prototype.setUp=function(){var t;e.prototype.setUp.call(this),this.insertedViews.forEach((function(e){var t;null===(t=e.getView())||void 0===t||t.finish()}));var i=null===(t=this.leftMenuDataInterface)||void 0===t?void 0:t.getLeftMenuDataArrray();if(null!=i){for(var l=i.map((function(e){return e.subMenuViewer.createView().id})),s="",r=0,a=i;r<a.length;r++){var d=a[r];if(d.selected){s=d.subMenuViewer.viewId;break}}""==s&&i.length>0&&(i[0].selected=!0,s=i[0].subMenuCell.viewId);var c=new o.ViewsHolder("leftMenuViewsHolder",l,s);this.insertNewView(new n.InsertedViewData(c.id)),c.setConstraints({top:"0px",left:"0px",bottom:"0px",right:"0px"})}return this},t.prototype.changeMenuView=function(e){this.getView("leftMenuViewsHolder").showView(e.subMenuViewer.viewId)},t.prototype.moduleLoaded=function(){this.setUp()},t.prototype.finish=function(){this.leftMenuDataInterface=void 0,delete window.mApp.moduleManager.moduleViewsExecutor[this.id],e.prototype.finish.call(this)},t}((i=r(i)).default);t.LeftMenuMenuViewerController=l}.apply(t,i),void 0===o||(e.exports=o)},1272:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(77021),n(5219),n(80661),n(80123),n(34580),n(58509),n(88456),n(19755)],o=function(e,t,n,i,o,l,a,d,c,u,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleNotesCellController=void 0,p=r(p);var h=function(e){function t(t,n){void 0===t&&(t=u.moduleNotesCellView);var i=e.call(this,t)||this;return i.noteId=n,a.ModuleNotesManager.shared.delegates[i.id]=i,i}return s(t,e),t.prototype.viewWasInserted=function(){var t,n,i,o,l=this;e.prototype.viewWasInserted.call(this);var s=a.ModuleNotesManager.shared.getNote(this.noteId);console.log(s),""==(null!==(t=null==s?void 0:s.noteTitle)&&void 0!==t?t:"")?(0,p.default)("[".concat(this.id,"] .title")).text("Title is empty."):(0,p.default)("[".concat(this.id,"] .title")).text(null!==(n=null==s?void 0:s.noteTitle)&&void 0!==n?n:""),""==(null!==(i=null==s?void 0:s.noteDesc)&&void 0!==i?i:"")?(0,p.default)("[".concat(this.id,"] .desc")).text("The Note has no description."):(0,p.default)("[".concat(this.id,"] .desc")).text(null!==(o=null==s?void 0:s.noteDesc)&&void 0!==o?o:""),(0,p.default)("[".concat(this.id,"] .open-button")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),a.ModuleNotesManager.shared.openNote(l.noteId)})),(0,p.default)("[".concat(this.id,"] .more-button")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),l.showAreYouSureToDelete((0,p.default)("[".concat(l.id,"] .holder")),(function(){a.ModuleNotesManager.shared.deleteNote(l.noteId)}))}))},t.prototype.showAreYouSureToDelete=function(e,t){var n=e.get(0);if(null!=n){var s=new i.DropDown,r=new o.DefaultDropDownCell("Delete note",void 0,void 0,!0,c.viewDefaultDropDownCell);r.viewWasInsertedCallback=function(e){(0,p.default)("[".concat(e,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-red"])},s.addCell(r,(function(e,n){n.finish(),t()})),s.insertInto(new d.InsertedViewData(void 0,"body")),s.setUpWithElement(0,10,l.ElementModalPos.right,l.ElemModalDirection.bottom,n,e.outerWidth())}},t.prototype.noteTitleUpdated=function(e){var t,n;if(this.noteId==e){var i=a.ModuleNotesManager.shared.getNote(this.noteId);""==(null!==(t=null==i?void 0:i.noteTitle)&&void 0!==t?t:"")?(0,p.default)("[".concat(this.id,"] .title")).text("Title is empty."):(0,p.default)("[".concat(this.id,"] .title")).text(null!==(n=null==i?void 0:i.noteTitle)&&void 0!==n?n:"")}},t.prototype.noteDescriptionUpdated=function(e){var t,n;if(this.noteId==e){var i=a.ModuleNotesManager.shared.getNote(this.noteId);""==(null!==(t=null==i?void 0:i.noteDesc)&&void 0!==t?t:"")?(0,p.default)("[".concat(this.id,"] .desc")).text("The Note has no description."):(0,p.default)("[".concat(this.id,"] .desc")).text(null!==(n=null==i?void 0:i.noteDesc)&&void 0!==n?n:"")}},t.prototype.finish=function(){(0,p.default)("[".concat(this.id,"] .open-button")).off(),(0,p.default)("[".concat(this.id,"] .more-button")).off(),delete a.ModuleNotesManager.shared.delegates[this.id],e.prototype.finish.call(this)},t}(n.UICollectionViewCell);t.ModuleNotesCellController=h}.apply(t,i),void 0===o||(e.exports=o)},92688:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(43369),n(80123),n(34580),n(11166),n(40054),n(10891),n(44158),n(1272)],o=function(e,t,n,i,o,l,a,d,c,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleNotesController=void 0;var p=function(e){function t(t,o){void 0===o&&(o=d.moduleNotesView);var l=e.call(this,t,o)||this;l.notes=[],window.mApp.moduleManager.moduleViewsExecutor[l.id]=l,i.ModuleNotesManager.shared.delegates[l.id]=l;var s=new c.NotesSearchBarController;s.delegate=l;var r=new n.UICollectionView;return r.delegate=l,r.dataSourceDelegate=l,l.searchBarView=s.id,l.collectionView=r.id,l.setInsertDefaultViews(),l.emptyView=new a.EmptyView("Click + to add Notes","bg-secondary").id,l}return s(t,e),t.prototype.viewWasInserted=function(){var t;e.prototype.viewWasInserted.call(this);var n=this.getView(this.searchBarView),i=this.getView(this.collectionView);null!=n&&null!=i&&(this.insertNewView(new o.InsertedViewData(this.searchBarView)),n.setConstraints({top:"0px",left:"0px",right:"0px",height:"40px"}),this.insertNewView(new o.InsertedViewData(this.collectionView)),i.setConstraints({top:"40px",left:"0px",bottom:"0px",right:"0px"}),this.insertNewView(new o.InsertedViewData(this.emptyView)),null===(t=this.getView(this.emptyView))||void 0===t||t.setConstraints({top:"40px",left:"0px",right:"0px",bottom:"0px"}),this.reloadData())},t.prototype.reloadData=function(){var e,t;this.notes=i.ModuleNotesManager.shared.getModuleNotes().map((function(e){return e.noteId})),null===(e=this.getView(this.emptyView))||void 0===e||e.isHidden(this.notes.length>0),null===(t=this.getView(this.collectionView))||void 0===t||t.reloadData()},t.prototype.cvDidSelectItem=function(e,t){},t.prototype.cvDidSelectSection=function(e,t,n){},t.prototype.cvNumberOfItemsInSection=function(e,t){return this.notes.length},t.prototype.cvNumberOfSections=function(e){return 1},t.prototype.cvCellForItemAt=function(e,t){return new u.ModuleNotesCellController(void 0,this.notes[t.item])},t.prototype.cvCellForSectionAt=function(e,t,n){},t.prototype.getSeparator=function(e,t){},t.prototype.noteDeleted=function(e){this.reloadData()},t.prototype.didSearch=function(e){},t.prototype.moduleLoaded=function(){this.reloadData()},t.prototype.didClickAdd=function(){i.ModuleNotesManager.shared.createNote(),this.reloadData()},t.prototype.finish=function(){e.prototype.finish.call(this),delete window.mApp.moduleManager.moduleViewsExecutor[this.id]},t}((l=r(l)).default);t.ModuleNotesController=p}.apply(t,i),void 0===o||(e.exports=o)},35535:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,l){function s(e){try{a(i.next(e))}catch(e){l(e)}}function r(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}a((i=i.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,i,o,l,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(l){return function(r){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,r])}}},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(78110),n(88456),n(18475),n(19755)],o=function(e,t,i,o,l,c,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleTutorialCellController=void 0,u=d(u);var p=function(e){function t(t,n){void 0===t&&(t=l.moduleNotesCellView);var i=e.call(this,t)||this;return i.moduleTutorial=n,i}return s(t,e),t.prototype.viewWasInserted=function(){var t,n,i,l,s,r,a,d,p=this;e.prototype.viewWasInserted.call(this),(0,u.default)("[".concat(this.id,"] .buttons-holder")).css("grid-template-columns","min-content 0px 0px"),(0,u.default)("[".concat(this.id,"] .separator")).css("display","none"),(0,u.default)("[".concat(this.id,"] .more-button")).css("display","none"),(0,u.default)("[".concat(this.id,"] .open-button")).text("Load module"),""==(null!==(n=null===(t=this.moduleTutorial)||void 0===t?void 0:t.moduleName)&&void 0!==n?n:"")?(0,u.default)("[".concat(this.id,"] .title")).text("Title is empty."):(0,u.default)("[".concat(this.id,"] .title")).text(null!==(l=null===(i=this.moduleTutorial)||void 0===i?void 0:i.moduleName)&&void 0!==l?l:""),""==(null!==(r=null===(s=this.moduleTutorial)||void 0===s?void 0:s.moduleDesc)&&void 0!==r?r:"")?(0,u.default)("[".concat(this.id,"] .desc")).text("The Note has no description."):(0,u.default)("[".concat(this.id,"] .desc")).text(null!==(d=null===(a=this.moduleTutorial)||void 0===a?void 0:a.moduleDesc)&&void 0!==d?d:""),(0,u.default)("[".concat(this.id,"] .open-button")).off().on("click",(function(e){var t;e.preventDefault(),e.stopImmediatePropagation();var n=[{title:"Load Module",didClick:function(){console.log("did click load"),p.loadModule()}},{title:"Exit",didClick:function(){console.log("did click exit")}}];o.PopUpView.showPopUpViewOnBody(new c.AlertWithOptions("".concat(null===(t=p.moduleTutorial)||void 0===t?void 0:t.moduleName),"If you load this module tutorial your current project will be replaced. Its recommended to export your current project so you don`t lose it.",n).id)}))},t.prototype.loadModule=function(){var e;return r(this,void 0,void 0,(function(){var t;return a(this,(function(i){return(0,u.default)("[".concat(this.id,"] .open-button")).text("Loading..."),t=n(94699)("./".concat(null===(e=this.moduleTutorial)||void 0===e?void 0:e.moduleFileName)),window.mApp.moduleManager.loadNewModule(JSON.stringify(t)),(0,u.default)("[".concat(this.id,"] .open-button")).text("Load module"),[2]}))}))},t.prototype.finish=function(){this.moduleTutorial=void 0,e.prototype.finish.call(this)},t}(i.UICollectionViewCell);t.ModuleTutorialCellController=p}.apply(t,i),void 0===o||(e.exports=o)},85509:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(43369),n(72593),n(66448),n(34580),n(11166),n(9028),n(10891),n(44158),n(68212),n(35535)],o=function(e,t,n,i,o,l,a,d,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleTutorialsController=void 0;var f=function(e){function t(t,i){void 0===i&&(i=c.moduleNotesView);var o=e.call(this,t,i)||this,l=new n.UICollectionView,s=new u.NotesSearchBarController;return s.delegate=o,l.delegate=o,l.dataSourceDelegate=o,o.collectionView=l.id,o.searchBarView=s.id,o.setInsertDefaultViews(),o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this);var t=this.getView(this.collectionView),n=this.getView(this.searchBarView);null!=t&&null!=n&&(this.insertNewView(new l.InsertedViewData(this.collectionView)),this.insertNewView(new l.InsertedViewData(this.searchBarView)),n.disableAddButton(),t.setConstraints({top:"40px",left:"0px",bottom:"0px",right:"0px"}),t.reloadData())},t.prototype.cvDidSelectItem=function(e,t){},t.prototype.cvDidSelectSection=function(e,t,n){},t.prototype.cvNumberOfItemsInSection=function(e,t){return o.moduleTutorials[t].modules.length},t.prototype.cvNumberOfSections=function(e){return o.moduleTutorials.length},t.prototype.cvCellForItemAt=function(e,t){return new h.ModuleTutorialCellController(void 0,o.moduleTutorials[t.section].modules[t.item])},t.prototype.cvCellForSectionAt=function(e,t,n){var l;if(t==i.UICollectionViewSectionCellType.header)return new p.QuickDocSectionCell(null!==(l=o.moduleTutorials[n].sectionName)&&void 0!==l?l:"fgdsfsd",d.leftMenuViewerModuleSectionView)},t.prototype.getSeparator=function(e,t){},t.prototype.didSearch=function(e){},t.prototype.didClickAdd=function(){},t}((a=r(a)).default);t.ModuleTutorialsController=f}.apply(t,i),void 0===o||(e.exports=o)},80033:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(43369),n(72593),n(78136),n(34580),n(11166),n(23753),n(79146),n(9028),n(48889),n(10664)],o=function(e,t,n,i,o,l,a,d,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TestViewController=void 0;var f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){e.prototype.setUp.call(this);var t=new n.UICollectionView("collectionViewId",void 0,c.leftMenuViewerModuleCollectionView);return t.dataSourceDelegate=this,this.insertNewView(new l.InsertedViewData(t.id,void 0)),t.setConstraints({top:"0px",left:"0px",right:"0px",bottom:"0px"}),t.reloadData(),this},t.prototype.getSectionsNumber=function(e,t){for(var n=t,i=0,l=e;i<l.length;i++){var s=l[i];s instanceof o.ModuleSectionData&&(n=this.getSectionsNumber(s.cells,n),n+=1)}return n},t.prototype.getSectionsArray=function(e,t){void 0===t&&(t=[]);for(var n=t,i=0,l=e;i<l.length;i++){var s=l[i];s instanceof o.ModuleSectionData&&this.getSectionsArray(s.cells,[s]).forEach((function(e){n.push(e)}))}return n},t.prototype.cvNumberOfItemsInSection=function(e,t){var n=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[t].cells;return n[Math.floor(Math.random()*n.length)]instanceof o.ModuleSectionData?0:n.length},t.prototype.cvNumberOfSections=function(e){return console.log(this.getSectionsNumber(window.mApp.moduleManager.moudleParsed,0)),this.getSectionsNumber(window.mApp.moduleManager.moudleParsed,0)},t.prototype.cvCellForItemAt=function(e,t){var n=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[t.section].cells[t.item];return new p.LeftMenuModuleViewCell(n.jsonId,d.leftMenuViewerModuleCellView)},t.prototype.cvCellForSectionAt=function(e,t,n){var o=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[n];if(t==i.UICollectionViewSectionCellType.header)return new h.LeftMenuModuleViewSection(o.jsonId,u.leftMenuViewerModuleSectionView)},t.prototype.cvDidSelectItem=function(e,t){console.log(t)},t.prototype.cvDidSelectSection=function(e,t,n){console.log(t)},t}((a=r(a)).default);t.TestViewController=f}.apply(t,i),void 0===o||(e.exports=o)},48889:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(77021),n(5219),n(80661),n(34580),n(19755),n(58509)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuModuleViewCell=void 0,d=r(d);var u=function(e){function t(t,n){var i=e.call(this,n)||this;return i.canRemove=!1,i.moduleDataId=t,i}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t=this;e.prototype.setUp.call(this);var n=window.mApp.moduleManager.moduleMap.get(this.moduleDataId),i=n.getOptions();(0,d.default)("[".concat(this.id,"] .cell-holder")).css({left:"".concat(15*(n.sections.length-1),"px")});var o=n.getObjectIndex();return(0,d.default)("[".concat(this.id,"] .title")).text("".concat(i.options.name)),null!=o&&(0,d.default)("[".concat(this.id,"] .title")).text("".concat(i.options.name," ").concat(o+1)),null!=window.mApp.utils.getNumberFromString(n.jsonPath[n.jsonPath.length-1])&&(this.canRemove=!0,(0,d.default)("[".concat(this.id,"] .button-holder")).off().on("click",(function(e){var i,o;e.preventDefault(),e.stopImmediatePropagation(),(null!==(o=null===(i=n.getSection())||void 0===i?void 0:i.cells)&&void 0!==o?o:[]).length<=1||t.showAreYouSureToDelete((0,d.default)("[".concat(t.id,"]")),(function(){var e;n.finish(),null===(e=n.getSection())||void 0===e||e.updatePaths(),t.getView(t.collectionViewId).reloadData(),window.mApp.moduleManager.moduleDataUpdated()}))}))),this.canRemove?(0,d.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("code.png")):((0,d.default)("[".concat(this.id,"] .cell-distr")).css({"grid-template-columns":"25px auto"}),(0,d.default)("[".concat(this.id,"] .button-holder")).css({display:"none"}),(0,d.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("params.png"))),(0,d.default)("[".concat(this.id,"] .click-select")).off().on("click",(function(e){var i,o,l;e.preventDefault(),e.stopImmediatePropagation(),window.mApp.moduleManager.getModuleOptions().selected=n.jsonId;var s=t.getView(t.collectionViewId),r=null!==(o=null===(i=document.querySelector("[".concat(s.id,"] .left-collection-view")))||void 0===i?void 0:i.scrollTop)&&void 0!==o?o:0;s.updateCellsWithoutRedrawing(),window.mApp.views.get("CenterViewGridElementController").modulePartWasSelected(n.jsonId),null!=(null===(l=document.querySelector("[".concat(s.id,"] .left-collection-view")))||void 0===l?void 0:l.scrollTop)&&(document.querySelector("[".concat(s.id,"] .left-collection-view")).scrollTop=r)})),this.cellWasReloadedWithoutRedrawing(),this},t.prototype.showAreYouSureToDelete=function(e,t){var n=e.get(0);if(null!=n){var s=new i.DropDown,r=new o.DefaultDropDownCell("Delete",void 0,void 0,!0,c.viewDefaultDropDownCell);r.viewWasInsertedCallback=function(e){(0,d.default)("[".concat(e,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-red"])},s.addCell(r,(function(e,n){n.finish(),t()})),s.insertInto(new a.InsertedViewData(void 0,"body")),s.setUpWithElement(0,10,l.ElementModalPos.right,l.ElemModalDirection.bottom,n,e.outerWidth())}},t.prototype.cellWasReloadedWithoutRedrawing=function(){e.prototype.cellWasReloadedWithoutRedrawing.call(this);var t=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);t.getOptions(),t.isCellHidden()?(0,d.default)("[".concat(this.id,"]")).css({height:"0",display:"none"}):(0,d.default)("[".concat(this.id,"]")).css({height:"2.4rem",display:""}),t.jsonId==window.mApp.moduleManager.getModuleOptions().selected?(0,d.default)("[".concat(this.id,"] .cell-holder")).addClass("selected"):(0,d.default)("[".concat(this.id,"] .cell-holder")).removeClass("selected")},t.prototype.finish=function(){e.prototype.finish.call(this),(0,d.default)("[".concat(this.id,"] .button-holder")).off()},t}(n.UICollectionViewCell);t.LeftMenuModuleViewCell=u}.apply(t,i),void 0===o||(e.exports=o)},10664:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(39020),n(78136),n(19755),n(77021),n(5219),n(58509),n(80661),n(34580)],o=function(e,t,n,i,o,l,a,d,c,u){"use strict";var p;Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuModuleViewSection=void 0,o=r(o),function(e){e.add="Add",e.del="Del",e.none="none"}(p||(p={}));var h=function(e){function t(t,n){var i=e.call(this,n)||this;return i.hasSectionController=!0,i.sectionButton=p.add,i.moduleDataId=t,i}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t,n,l=this;e.prototype.setUp.call(this);var s=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);if(null==s)return this;(0,o.default)("[".concat(this.id,"] .cell-holder")).css({left:"".concat(15*s.sections.length,"px")});var r=s.getObjectIndex();return(0,o.default)("[".concat(this.id,"] .text")).text("".concat(null===(t=s.options)||void 0===t?void 0:t.name)),null!=r&&(0,o.default)("[".concat(this.id,"] .text")).text("".concat(null===(n=s.options)||void 0===n?void 0:n.name," ").concat(r+1)),s.canModify||window.mApp.utils.deepCopy(s.cells).pop()instanceof i.ModuleSectionData||((0,o.default)("[".concat(this.id,"] .section-controller")).css({display:"none"}),(0,o.default)("[".concat(this.id,"] .text")).css({left:"0.5rem"}),this.hasSectionController=!1),null!=window.mApp.utils.getNumberFromString(s.jsonPath[s.jsonPath.length-1])&&((0,o.default)("[".concat(this.id,"] .bh-txt")).text("Del"),this.sectionButton=p.del),this.hasSectionController||this.sectionButton!=p.add||(this.sectionButton=p.none,(0,o.default)("[".concat(this.id,"] .button-holder")).css({display:"none"})),this.hasSectionController||this.sectionButton!=p.none||(0,o.default)("[".concat(this.id,"] .section-distr")).css({"grid-template-columns":"1fr"}),this.cellWasReloadedWithoutRedrawing(),this.hasSectionController?((0,o.default)("[".concat(this.id,"] .title")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),l.showHideSection(s)})),(0,o.default)("[".concat(this.id,"] .section-controller")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),l.showHideSection(s)})),(0,o.default)("[".concat(this.id,"] .button-holder")).off().on("click",(function(e){var t,n;if(e.preventDefault(),e.stopImmediatePropagation(),l.showHideSection(s,!1),l.sectionButton==p.del){if((null!==(n=null===(t=s.getSection())||void 0===t?void 0:t.cells)&&void 0!==n?n:[]).length<=1)return;l.showAreYouSureToDelete((0,o.default)("[".concat(l.id,"]")),(function(){var e;s.finish(),null===(e=s.getSection())||void 0===e||e.updatePaths(),window.mApp.moduleManager.moduleDataUpdated(),l.getView(l.collectionViewId).reloadData()}))}else l.sectionButton==p.add&&(s.addCell(),s.updated(),l.getView(l.collectionViewId).reloadData())})),this):this},t.prototype.showHideSection=function(e,t){void 0===t&&(t=void 0),e.hideCells(null!=t?t:!e.getOptions().cellsHidden),this.getView(this.collectionViewId).updateCellsWithoutRedrawing()},t.prototype.showAreYouSureToDelete=function(e,t){var n=e.get(0);if(null!=n){var i=new l.DropDown,s=new a.DefaultDropDownCell("Delete",void 0,void 0,!0,d.viewDefaultDropDownCell);s.viewWasInsertedCallback=function(e){(0,o.default)("[".concat(e,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-red"])},i.addCell(s,(function(e,n){n.finish(),t()})),i.insertInto(new u.InsertedViewData(void 0,"body")),i.setUpWithElement(0,10,c.ElementModalPos.right,c.ElemModalDirection.bottom,n,e.outerWidth())}},t.prototype.cellWasReloadedWithoutRedrawing=function(){e.prototype.cellWasReloadedWithoutRedrawing.call(this);var t=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);t.getOptions().cellsHidden?(0,o.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-right.png"):(0,o.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-bottom.png"),t.isCellHidden()?(0,o.default)("[".concat(this.id,"]")).css({height:"0",display:"none"}):(0,o.default)("[".concat(this.id,"]")).css({height:"2.2rem",display:""})},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"] .title")).off(),(0,o.default)("[".concat(this.id,"] .section-controller")).off(),(0,o.default)("[".concat(this.id,"] .button-holder")).off(),e.prototype.finish.call(this)},t}(n.UICollectionVievSectionCell);t.LeftMenuModuleViewSection=h}.apply(t,i),void 0===o||(e.exports=o)},44158:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(14599),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NotesSearchBarController=void 0,n=r(n),o=r(o);var l=function(e){function t(t){return void 0===t&&(t=i.searchBarView),e.call(this,void 0,t)||this}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .add-button")).off().on("click",(function(e){var n;e.preventDefault(),e.stopImmediatePropagation(),null===(n=t.delegate)||void 0===n||n.didClickAdd()}))},t.prototype.disableAddButton=function(){(0,o.default)("[".concat(this.id,"]")).css("grid-template-columns","1fr 0px 0px")},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"] .add-button")).off(),e.prototype.finish.call(this)},t}(n.default);t.NotesSearchBarController=l}.apply(t,i),void 0===o||(e.exports=o)},96423:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(43369),n(72593),n(31666),n(34580),n(11166),n(9028),n(10891),n(44158),n(45835),n(68212)],o=function(e,t,n,i,o,l,a,d,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QuickDocController=void 0;var f=function(e){function t(t,i){void 0===i&&(i=c.moduleNotesView);var o=e.call(this,t,i)||this,l=new n.UICollectionView,s=new u.NotesSearchBarController;return s.delegate=o,l.delegate=o,l.dataSourceDelegate=o,o.collectionView=l.id,o.searchBarView=s.id,o.setInsertDefaultViews(),o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this);var t=this.getView(this.collectionView),n=this.getView(this.searchBarView);null!=t&&null!=n&&(this.insertNewView(new l.InsertedViewData(this.collectionView)),this.insertNewView(new l.InsertedViewData(this.searchBarView)),n.disableAddButton(),t.setConstraints({top:"40px",left:"0px",bottom:"0px",right:"0px"}),t.reloadData())},t.prototype.cvDidSelectItem=function(e,t){},t.prototype.cvDidSelectSection=function(e,t,n){},t.prototype.cvNumberOfItemsInSection=function(e,t){return o.quickDocNotes[t].notes.length},t.prototype.cvNumberOfSections=function(e){return o.quickDocNotes.length},t.prototype.cvCellForItemAt=function(e,t){return new p.QuickDocCellController(void 0,o.quickDocNotes[t.section].notes[t.item].noteId)},t.prototype.cvCellForSectionAt=function(e,t,n){var l;if(t==i.UICollectionViewSectionCellType.header)return new h.QuickDocSectionCell(null!==(l=o.quickDocNotes[n].sectionName)&&void 0!==l?l:"fgdsfsd",d.leftMenuViewerModuleSectionView)},t.prototype.getSeparator=function(e,t){},t.prototype.didSearch=function(e){throw new Error("Method not implemented.")},t.prototype.didClickAdd=function(){throw new Error("Method not implemented.")},t}((a=r(a)).default);t.QuickDocController=f}.apply(t,i),void 0===o||(e.exports=o)},45835:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(88456),n(1272),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QuickDocCellController=void 0,o=r(o);var l=function(e){function t(t,i){return void 0===t&&(t=n.moduleNotesCellView),e.call(this,t,i)||this}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .buttons-holder")).css("grid-template-columns","min-content 0px 0px"),(0,o.default)("[".concat(this.id,"] .separator")).css("display","none"),(0,o.default)("[".concat(this.id,"] .more-button")).css("display","none")},t}(i.ModuleNotesCellController);t.QuickDocCellController=l}.apply(t,i),void 0===o||(e.exports=o)},68212:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(39020),n(19755)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QuickDocSectionCell=void 0,i=r(i);var o=function(e){function t(t,n){var i=e.call(this,n)||this;return i.title=t,i}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),(0,i.default)("[".concat(this.id,"] .text")).text(this.title),(0,i.default)("[".concat(this.id,"] .section-controller")).css({display:"none"}),(0,i.default)("[".concat(this.id,"] .text")).css({left:"0.5rem"}),(0,i.default)("[".concat(this.id,"] .section-distr")).css({"grid-template-columns":"1fr 0.5rem"}),(0,i.default)("[".concat(this.id,"] .button-holder")).css({display:"none"}),(0,i.default)("[".concat(this.id,"] ")).removeClass("pointer"),(0,i.default)("[".concat(this.id,"] ")).removeClass("tc-t-primary-hover")},t}(n.UICollectionVievSectionCell);t.QuickDocSectionCell=o}.apply(t,i),void 0===o||(e.exports=o)},2737:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});i=[n,t,n(55044)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuSubMenuCellController=void 0;var i=function(e){function t(t,n,i,o){var l=this,s=o;return null!=s&&(s=(s=s.replace("$title",t.subMenuCell.name)).replace("$imageUrl",t.subMenuCell.image)),(l=e.call(this,n,i,s)||this).leftDataId=t.id,l}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){return this},t}(n.SelectionView);t.LeftMenuSubMenuCellController=i}.apply(t,i),void 0===o||(e.exports=o)},31779:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(34580),n(11166),n(98128),n(2737)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LeftMenuSubMenuController=void 0;var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.viewWasInserted=function(){this.setUp()},t.prototype.setUp=function(){return this.createCells(),this},t.prototype.createCells=function(){var e,t=null===(e=this.leftMenuDataInterface)||void 0===e?void 0:e.getLeftMenuDataArrray();if(null!=t)for(var i=0;i<t.length;i++){var s=t[i],r=new l.LeftMenuSubMenuCellController(s,s.selected,s.subMenuCell.viewId,o.leftMenuSubMenuCellView);this.insertNewView(new n.InsertedViewData(r.id,"leftMenuSubMenuHolder")),r.selectedInterface=this}},t.prototype.viewWasSelected=function(e){var t,n;console.log(e);var i=null===(t=this.leftMenuDataInterface)||void 0===t?void 0:t.getLeftMenuDataArrray();if(null!=i){for(var o=0,l=i;o<l.length;o++){var s=l[o],r=this.getView(s.subMenuCell.viewId);s.selected=!1,s.subMenuCell.viewId!=e?(r.isSelected(!1,!1),s.selected=!1):(r.isSelected(!0,!1),s.selected=!0,null===(n=this.leftMenuDataInterface)||void 0===n||n.subMenuSelected(s))}this.makeGridHolderBig()}},t.prototype.parentResized=function(e){var t,n=null===(t=this.leftMenuDataInterface)||void 0===t?void 0:t.getLeftMenuDataArrray();if(null!=n)for(var i=0,o=n;i<o.length;i++){var l=o[i],s=this.getView(l.subMenuCell.viewId);"small"==e?s.isSelectedWasSet(!1):s.isSelected(l.selected,!1)}},t.prototype.makeGridHolderBig=function(){var e=this.getView("leftMenuGridEl"),t=this.getView("baseGrid");null!=e&&"small"==e.mResizeObserver.currentCondition&&(t.gridDesing.columns[0].size="350",t.setDesign(t.gridDesing))},t.prototype.finish=function(){e.prototype.finish.call(this),this.leftMenuDataInterface=void 0},t}((i=r(i)).default);t.LeftMenuSubMenuController=a}.apply(t,i),void 0===o||(e.exports=o)},3137:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(49076),n(94095),n(34580),n(11166),n(10371),n(66254),n(38699),n(16266),n(30936),n(19755)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KetsuLogsGridView=t.KetsuLogsViewerController=void 0,i=r(i),a=r(a),f=r(f);var v=function(e){function t(t,n){void 0===t&&(t=window.mApp.utils.makeId()),void 0===n&&(n=d.KetsuLogsViewerView);var i=e.call(this,t,n)||this;return i.settingsController="",i.insertViewsDefault=new l.InsertedViewData(i.id,"$idviews"),o.LogsParser.shared.logsInterfaces[i.id]=i,i}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),this.resizeObserver=new i.default(new l.InsertedViewData(this.id,void 0),[{name:"small",condition:function(e){return e.blockSize<=41}},{name:"big",condition:function(e){return e.blockSize>=50&&e.inlineSize>100}},{name:"closed",condition:function(e){return e.inlineSize<=100}}]),this.resizeObserver.interface=this,this.resizeObserver.triggerManually(),(0,f.default)("[".concat(this.id,"] .button")).on("click",(function(e){var n;e.preventDefault(),e.stopImmediatePropagation(),"closed"==t.currentConditionName&&(null===(n=window.mApp.views.get("logsGridController"))||void 0===n||n.showKetsuLogs()),"small"==t.currentConditionName&&window.mApp.views.get("baseGrid").setLogsViewSize(400),"big"==t.currentConditionName&&window.mApp.views.get("baseGrid").setLogsViewSize(40)})),this.setUp()},t.prototype.updateButton=function(){if("closed"==this.currentConditionName)return(0,f.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-left.png"),void(0,f.default)("[".concat(this.id,"]")).addClass("closed");"small"==this.currentConditionName&&(0,f.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-top.png"),"big"==this.currentConditionName&&((0,f.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-bottom.png"),(0,f.default)("[".concat(this.id,"]")).removeClass("closed"))},t.prototype.setUp=function(){var t,n=this;e.prototype.setUp.call(this),this.deleteSubviews();for(var i=[],s=0,r=o.LogsParser.shared.logsOrder;s<r.length;s++){var a=r[s],d=o.LogsParser.shared.logs[a];d.length>0&&i.push(new p.SectionCellController(d[0].section));for(var u=function(e){var l=new g(e.action,(function(){var t,i,l;""!=(null!==(t=e.content)&&void 0!==t?t:"")&&(o.LogsParser.shared.logSelected({sectionId:null!==(i=e.sectionId)&&void 0!==i?i:"",logId:e.id}),null===(l=n.getView(n.settingsController).getCollectionView())||void 0===l||l.updateCellsWithoutRedrawing())}),e.error,null!=e.content,(null===(t=o.LogsParser.shared.selectedLog)||void 0===t?void 0:t.logId)==e.id,null!=e.content);l.logId=e.id,i.push(l)},v=0,m=d;v<m.length;v++)u(m[v])}0==i.length&&i.push(new c.JSLogsCellController("Logs are empty.",!1));var w=new h.SettingsCellController(i.map((function(e){return e.id})));return this.settingsController=w.id,w.interceptCollectionView=function(e){e.style({"overflow-x":"hidden"})},this.insertNewView(new l.InsertedViewData(w.id,void 0)),(0,f.default)("[".concat(w.id,"]")).addClass("bg-secondary"),w.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},t.prototype.logsUpdated=function(){this.setUp()},t.prototype.logSelected=function(){},t.prototype.resizeTriggered=function(e){this.currentConditionName=e.name,this.updateButton();var t=this.getView("bottomStatusBar");null==t||t.updateWindowButtons()},t.prototype.resizeFinished=function(e){},t.prototype.observerFinished=function(){},t.prototype.finish=function(){var t;null===(t=this.resizeObserver)||void 0===t||t.finished(),this.resizeObserver=void 0,(0,f.default)("[".concat(this.id,"] .button")).off(),delete o.LogsParser.shared.logsInterfaces[this.id],e.prototype.finish.call(this)},t}(a.default);t.KetsuLogsViewerController=v;var g=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.logId="",t}return s(t,e),t.prototype.cellWasReloadedWithoutRedrawing=function(){var t;e.prototype.cellWasReloadedWithoutRedrawing.call(this),(null===(t=o.LogsParser.shared.selectedLog)||void 0===t?void 0:t.logId)==this.logId?(0,f.default)("[".concat(this.id,"]")).addClass("selected"):(0,f.default)("[".concat(this.id,"]")).removeClass("selected")},t}(u.LogsCellController),m=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.open=function(){window.mApp.views.get("baseGrid").setLogsViewSize(350)},t.prototype.close=function(){window.mApp.views.get("baseGrid").setLogsViewSize(40)},t.prototype.isClosed=function(){return this.getSize().height<=40},t}(n.GridElementWithView);t.KetsuLogsGridView=m}.apply(t,i),void 0===o||(e.exports=o)},29870:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(9303),n(97321),n(69243),n(32614),n(34580),n(62069),n(36465),n(3137),n(24054),n(19755)],o=function(e,t,n,i,o,l,a,d,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogsGridController=void 0,n=r(n),l=r(l),h=r(h);var f=function(e){function t(t,n){return void 0===t&&(t=window.mApp.utils.makeId()),void 0===n&&(n=c.viewBaseGridHtml),e.call(this,t,n)||this}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t=this;e.prototype.setUp.call(this),(0,h.default)("[".concat(this.id,"]")).css("overflow","hidden");var n=[new i.GridElementWithView((new u.KetsuLogsViewerController).id,"rightLogs"),new l.default("VSBL",d.viewBaseGridVSeparator),new i.GridElementWithView(new p.LogsViewerHolderController("LogsViewerHolderController").id,"leftLogs")];return this.gridElements=n.map((function(e){return t.insertNewView(new a.InsertedViewData(e.id,void 0)),e.id})),this.gridDistribution=[["leftLogs","VSBL","rightLogs"]],this.gridDesing={columns:[new o.GridElementDesign("auto","",!0,[],{min:300,max:99999999}),new o.GridElementDesign("1","px",!1),new o.GridElementDesign("350","px",!0,[{resize:40,range:{from:0,to:150}},{resize:350,range:{from:150,to:350}}],{min:0,max:400})],rows:[new o.GridElementDesign("1","fr",!1)]},this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this},t.prototype.showKetsuLogs=function(){this.gridDesing.columns[2].size="350",this.setDesign(this.gridDesing)},t}(n.default);t.LogsGridController=f}.apply(t,i),void 0===o||(e.exports=o)},41632:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(94095),n(34580),n(11166),n(3693),n(66254),n(30936),n(19755)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CurrentLog=void 0,o=r(o),c=r(c);var u=function(e){function t(t,o){void 0===t&&(t=window.mApp.utils.makeId()),void 0===o&&(o=l.basicHtml);var s=e.call(this,t,o)||this;return s.insertViewsDefault=new i.InsertedViewData(s.id,"$idviews"),n.LogsParser.shared.logsInterfaces[s.id]=s,s}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),(0,c.default)("[".concat(this.id,"]")).addClass("bg-primary"),this.setUp()},t.prototype.setUp=function(){var t,o;e.prototype.setUp.call(this),this.deleteSubviews();var l=n.LogsParser.shared.getLog(null!==(t=n.LogsParser.shared.selectedLog)&&void 0!==t?t:{logId:"",sectionId:""}),s=[];null==l?s.push(new a.JSLogsCellController("No log selected.",!1)):s.push(new a.JSLogsCellController(null!==(o=l.content)&&void 0!==o?o:"",l.error));var r=new d.SettingsCellController(s.map((function(e){return e.id})));return r.interceptCollectionView=function(e){e.style({"overflow-x":"hidden"})},this.insertNewView(new i.InsertedViewData(r.id,void 0)),(0,c.default)("[".concat(r.id,"]")).addClass("bg-primary"),r.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},t.prototype.logsUpdated=function(){this.setUp()},t.prototype.logSelected=function(){this.setUp()},t.prototype.finish=function(){delete n.LogsParser.shared.logsInterfaces[this.id],e.prototype.finish.call(this)},t}(o.default);t.CurrentLog=u}.apply(t,i),void 0===o||(e.exports=o)},50768:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(94095),n(34580),n(11166),n(3693),n(66254),n(30936),n(19755)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSLogs=void 0,o=r(o),c=r(c);var u=function(e){function t(t,o){void 0===t&&(t=window.mApp.utils.makeId()),void 0===o&&(o=l.basicHtml);var s=e.call(this,t,o)||this;return s.insertViewsDefault=new i.InsertedViewData(s.id,"$idviews"),n.LogsParser.shared.logsInterfaces[s.id]=s,s}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t;e.prototype.setUp.call(this),this.deleteSubviews();for(var o=[],l=n.LogsParser.shared.logs[n.LogsParser.shared.logsOrder[0]],s=0,r=0,u=null!=l?l:[];r<u.length;r++){var p=u[r];if("Javascript Logs"==p.action){s+=1;var h=JSON.parse(null!==(t=p.content)&&void 0!==t?t:"[]");h.length>0&&o.push(new a.JSLogsCellController("".concat(s,". Logs:")));for(var f=0,v=h;f<v.length;f++){var g=v[f];console.log(g.value),""!=g.value&&null!=g.value&&o.push(new a.JSLogsCellController(g.value,"error"==g.type))}}}0==o.length&&o.push(new a.JSLogsCellController("No javascript logs were found.",!1));var m=new d.SettingsCellController(o.map((function(e){return e.id})));return this.collectionView=m.id,m.interceptCollectionView=function(e){e.style({"overflow-x":"hidden"})},this.insertNewView(new i.InsertedViewData(m.id,void 0)),(0,c.default)("[".concat(m.id,"]")).addClass("bg-primary"),m.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},t.prototype.logsUpdated=function(){this.setUp();var e=this.getView(this.collectionView),t=null==e?void 0:e.getCollectionView();console.log(t),null==t||t.scrollTo({section:0,item:e.cells.length-1})},t.prototype.logSelected=function(){},t.prototype.finish=function(){e.prototype.finish.call(this),delete n.LogsParser.shared.logsInterfaces[this.id]},t}(o.default);t.JSLogs=u}.apply(t,i),void 0===o||(e.exports=o)},24054:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(2360),n(94527),n(94095),n(94065),n(34580),n(11166),n(3124),n(3693),n(41632),n(50768)],o=function(e,t,n,i,o,l,a,d,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogsViewerHolderController=void 0,d=r(d);var f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.styleCellsHolder=function(e){e.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)","padding-left":"0.5rem","background-color":"#262626"})},t}(i.MenuSelectorLayout2),v=function(e){function t(t,n){void 0===t&&(t=window.mApp.utils.makeId()),void 0===n&&(n=u.basicHtml);var i=e.call(this,t,n)||this;return o.LogsParser.shared.logsInterfaces[i.id]=i,i}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t;e.prototype.setUp.call(this),null==this.menuSelector&&(null===(t=this.getView(this.menuSelector))||void 0===t||t.finish());var i=new h.JSLogs;i.viewName="JS Logs";var s=new p.CurrentLog;s.viewName="Selected Log";var r=new n.MenuSelctor(window.mApp.utils.makeId(15),[i.id,s.id]);this.menuSelector=r.id,r.interface=this,r.layout=new f,this.insertNewView(new a.InsertedViewData(r.id)),r.selectByViewName("JS Logs"),r.setConstraints({top:"0px",right:"0px",left:"0px",bottom:"0px"});var d=new c.ButtonView;return this.loadInWindowButton=d.id,this.insertNewView(new a.InsertedViewData(d.id)),d.setImage("internet.png"),d.setConstraints({top:"0px",right:"0px",width:"40px",height:"40px"}),d.addClickListener((function(){var e,t,n=o.LogsParser.shared.selectedLog;if(null!=n){var i=null!==(t=null===(e=o.LogsParser.shared.getLog(n))||void 0===e?void 0:e.content)&&void 0!==t?t:"";""!=i&&l.WindowExecutor.executeFromLog(i)}})),this.shouldDisplayLoadInWindow(),this},t.prototype.shouldDisplayLoadInWindow=function(){var e,t,n,i,l,s=this.getView(null!==(e=this.loadInWindowButton)&&void 0!==e?e:"");if(null!=s){var r=this.getView(this.menuSelector);if(null!=r)if("Selected Log"==(null!==(n=null===(t=this.getView(r.selectedView))||void 0===t?void 0:t.viewName)&&void 0!==n?n:"")){var a=o.LogsParser.shared.selectedLog;if(null!=a){var d=null!==(l=null===(i=o.LogsParser.shared.getLog(a))||void 0===i?void 0:i.action)&&void 0!==l?l:"";"Parsing Superficial Response"==d||"Executing FixedHtml"==d?s.isHidden(!1):s.isHidden(!0)}else s.isHidden(!0)}else s.isHidden(!0);else s.isHidden(!0)}},t.prototype.menuSelectorWasSelected=function(e){this.shouldDisplayLoadInWindow(),40==this.getSize().height&&window.mApp.views.get("baseGrid").setLogsViewSize(400)},t.prototype.showJSLogs=function(){this.getView(this.menuSelector).selectByViewName("JS Logs")},t.prototype.showCurrentLog=function(){this.getView(this.menuSelector).selectByViewName("Selected Log")},t.prototype.logsUpdated=function(){},t.prototype.logSelected=function(){this.showCurrentLog(),this.shouldDisplayLoadInWindow()},t.prototype.finish=function(){delete o.LogsParser.shared.logsInterfaces[this.id],e.prototype.finish.call(this)},t}(d.default);t.LogsViewerHolderController=v}.apply(t,i),void 0===o||(e.exports=o)},25317:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(9303),n(69243),n(32614),n(34580),n(37003),n(40796),n(20941),n(73802),n(36465)],o=function(e,t,n,i,o,l,a,d,c,u,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkdownController=void 0,n=r(n),o=r(o),u=r(u);var h=function(e){function t(t,n,i){void 0===n&&(n=p.viewBaseGridHtml);var o=e.call(this,t,n)||this;return o.isEditorActive=!1,o.isDataActive=!1,o.note=i,o}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this);var n=[new d.MarkdownToolBar(void 0,void 0,this),new u.default(void 0,void 0,!1),new o.default(void 0,void 0,!1),new a.MarkdownEditor(void 0,void 0,this),new c.MarkdownViewer(void 0,void 0,this)];this.toolBarView=n[0].id,this.editorView=n[3].id,this.viewerView=n[4].id,this.S1=n[1].id,this.S2=n[2].id,this.gridElements=n.map((function(e){return t.insertNewView(new l.InsertedViewData(e.id,void 0)),e.id})),this.setDistributionBasedOnSize()},t.prototype.setDistributionBasedOnSize=function(){this.getSize().width>=600?this.setHorizontalDistribution():this.setVerticalDistribution()},t.prototype.setVerticalDistribution=function(){this.gridDistribution=[[this.toolBarView],[this.S1],[this.viewerView],[this.S2],[this.editorView]],this.gridDesing={columns:[new i.GridElementDesign("1","fr",!1)],rows:[new i.GridElementDesign("39","px",!1),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("1","fr",!1),new i.GridElementDesign("0","px",!1),new i.GridElementDesign("0","px",!1)]},this.isEditorActive&&(this.gridDesing.rows[3]=new i.GridElementDesign("1","px",!1),this.gridDesing.rows[4]=new i.GridElementDesign("1","fr",!1));var e=this.getView(this.toolBarView);this.isDataActive&&(this.gridDesing.rows[0].size="300"),e.dataModeUpdated(this.isDataActive),this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this.getView(this.editorView).updateEditor()},t.prototype.setHorizontalDistribution=function(){this.gridDistribution=[[this.toolBarView,this.toolBarView,this.toolBarView],[this.S1,this.S1,this.S1],[this.editorView,this.S2,this.viewerView]],this.gridDesing={columns:[new i.GridElementDesign("0","px",!1),new i.GridElementDesign("0","px",!1),new i.GridElementDesign("1","fr",!1)],rows:[new i.GridElementDesign("39","px",!1),new i.GridElementDesign("1","px",!1),new i.GridElementDesign("1","fr",!1)]},this.isEditorActive&&(this.gridDesing.columns[0]=new i.GridElementDesign("1","fr",!1),this.gridDesing.columns[1]=new i.GridElementDesign("1","px",!1));var e=this.getView(this.toolBarView);this.isDataActive&&(this.gridDesing.rows[0].size="300"),e.dataModeUpdated(this.isDataActive),this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this.getView(this.editorView).updateEditor()},t.prototype.getController=function(){return this},t.prototype.getEditor=function(){return this.getView(this.editorView)},t.prototype.getToolBar=function(){return this.getView(this.toolBarView)},t.prototype.getViewer=function(){return this.getView(this.viewerView)},t.prototype.getNote=function(){return this.note},t.prototype.finish=function(){this.note=void 0,e.prototype.finish.call(this)},t}(n.default);t.MarkdownController=h}.apply(t,i),void 0===o||(e.exports=o)},37003:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(9091),n(97321),n(23642),n(19755),n(94601),n(16829),n(67589),n(50526),n(3693),n(96486),n(18561),n(23642)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f,v){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkdownEditor=void 0,i=r(i),l=r(l),h=r(h);var g=function(e){function t(t,n,i){void 0===n&&(n=p.basicHtml);var o=e.call(this,t,n)||this;return o.updateBuildScrollTimeout=void 0,o.scrollMap=void 0,o.syncResultScroll=h.default.debounce((function(e){var t,n,i,s;if(void 0===e&&(e=!1),null===(t=o.delegate)||void 0===t?void 0:t.getController().isEditorActive){var r=null===(n=o.delegate)||void 0===n?void 0:n.getViewer();e&&o.updateViewer();var a,d,c=(0,l.default)("[".concat(o.id,"]")),u=parseFloat((0,l.default)("[".concat(o.id,"] .cm-line")).css("line-height"));null!=c&&null!=r&&(a=Math.floor((null!==(i=null==c?void 0:c.scrollTop())&&void 0!==i?i:0)/u),o.scrollMap=null!==(s=o.buildScrollMap())&&void 0!==s?s:[],null!=o.scrollMap&&(d=o.scrollMap[a],(0,l.default)("[".concat(r.id,"] .markdown-holder")).stop(!0).animate({scrollTop:d},100,"linear")))}}),50,{maxWait:50}),o.setInsertDefaultViews(),o.delegate=i,o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t=this;return e.prototype.setUp.call(this),this.style({"overflow-y":"auto"}),(0,l.default)("[".concat(this.id,"]")).addClass("bg-primary"),(0,l.default)("[".concat(this.id,"] .fill-absolute")).addClass("bg-primary"),(0,l.default)("[".concat(this.id,"]")).off().on("scroll",(function(e){t.syncResultScroll()})),this.updateEditor(),this},t.prototype.updateEditor=function(){var e,t,i,l,s,r,p=this,h=null!==(t=null===(e=this.delegate)||void 0===e?void 0:e.getController().isEditorActive)&&void 0!==t&&t;null===(i=this.editorView)||void 0===i||i.destroy(),h&&(this.editorView=new n.EditorView({extensions:[n.basicSetup,(0,a.markdown)({base:a.markdownLanguage,codeLanguages:d.languages}),(0,u.autocompletion)({icons:!1}),v.keymap.of([f.indentWithTab]),n.EditorView.lineWrapping,c.draculaMarkdown,(0,o.placeholder)("Start editing your note here, the format is Markdown."),n.EditorView.updateListener.of((function(e){p.syncResultScroll(!0)}))],parent:document.querySelector("[".concat(this.id,"] .fill-absolute")),doc:null!==(r=null===(s=null===(l=this.delegate)||void 0===l?void 0:l.getNote())||void 0===s?void 0:s.noteData)&&void 0!==r?r:""}))},t.prototype.updateViewer=function(){var e,t,n,i,o,l=null!==(t=null===(e=this.editorView)||void 0===e?void 0:e.state.doc.toString())&&void 0!==t?t:"",s=null===(n=this.delegate)||void 0===n?void 0:n.getNote();null!=s&&(s.noteData=l),null===(o=null===(i=this.delegate)||void 0===i?void 0:i.getViewer())||void 0===o||o.udpateWithNoteText(l)},t.prototype.buildScrollMap=function(){var e,t,n,i,o,s,r,a,d,c,u,p,h,f,v,g,m,w,y,b=(0,l.default)("[".concat(this.id,"] .cm-line")),I=null===(e=this.delegate)||void 0===e?void 0:e.getViewer();if(null!=b&&null!=I){for(w=(0,l.default)("<div />").css({position:"absolute",visibility:"hidden",height:"auto",width:b[0].clientWidth,"font-size":b.css("font-size"),"font-family":b.css("font-family"),"line-height":b.css("line-height"),"white-space":b.css("white-space")}).appendTo("body"),c=(null!==(n=null===(t=(0,l.default)("[".concat(I.id,"] .markdown-holder")))||void 0===t?void 0:t.scrollTop())&&void 0!==n?n:0)-(null!==(s=null===(o=null===(i=(0,l.default)("[".concat(I.id,"] .markdown-holder")))||void 0===i?void 0:i.offset())||void 0===o?void 0:o.top)&&void 0!==s?s:0),y=[],u=[],v=[],m=0,null===(a=null===(r=this.editorView)||void 0===r?void 0:r.state.doc.toString())||void 0===a||a.split("\n").forEach((function(e){var t,n;v.push(m),0!==e.length?(w.text(e),t=parseFloat(w.css("height")),n=parseFloat(w.css("line-height")),m+=Math.round(t/n)):m++})),w.remove(),v.push(m),g=m,d=0;d<g;d++)y.push(-1);for(u.push(0),y[0]=0,(0,l.default)("[".concat(I.id,"] .line")).each((function(e,t){var n,i,o=(0,l.default)(t),s=o.data("line");null!=t&&""!==s&&(0!==(s=v[s])&&u.push(s),y[s]=Math.round((null!==(i=null===(n=o.offset())||void 0===n?void 0:n.top)&&void 0!==i?i:0)+c))})),u.push(g),y[g]=(0,l.default)("[".concat(I.id,"] .markdown-holder"))[0].scrollHeight,p=0,d=1;d<g;d++)-1===y[d]?(h=u[p],f=u[p+1],y[d]=Math.round((y[f]*(d-h)+y[h]*(f-d))/(f-h))):p++;return y}console.log("getting fucked")},t.prototype.finish=function(){var t;null===(t=this.editorView)||void 0===t||t.destroy(),this.delegate=void 0,this.editorView=void 0,e.prototype.finish.call(this)},t}(i.default);t.MarkdownEditor=g}.apply(t,i),void 0===o||(e.exports=o)},40796:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(80123),n(44360),n(19755)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MarkdownToolBar=void 0,n=r(n),l=r(l);var a=function(e){function t(t,n,i){void 0===n&&(n=o.markdownToolBarView);var l=e.call(this,t,n)||this;return l.setInsertDefaultViews(),l.delegate=i,l}return s(t,e),t.prototype.viewWasInserted=function(){var t,n,o,s=this;e.prototype.viewWasInserted.call(this),this.updateToolBarButtons();var r=null===(t=this.delegate)||void 0===t?void 0:t.getNote();null!=r&&((0,l.default)("[".concat(this.id,"] .title")).val(null!==(n=null==r?void 0:r.noteTitle)&&void 0!==n?n:""),(0,l.default)("[".concat(this.id,"] textarea")).val(null!==(o=null==r?void 0:r.noteDesc)&&void 0!==o?o:""),(0,l.default)("[".concat(this.id,"] .title")).off().on("input",(function(e){var t,n;null!=r&&(r.noteTitle=null!==(t=(0,l.default)(e.currentTarget).val())&&void 0!==t?t:"",i.ModuleNotesManager.shared.noteTitleUpdated(null!==(n=r.noteId)&&void 0!==n?n:""))})),(0,l.default)("[".concat(this.id,"] textarea")).off().on("input",(function(e){var t;null!=r&&(r.noteDesc=null!==(t=(0,l.default)(e.currentTarget).val())&&void 0!==t?t:"",i.ModuleNotesManager.shared.noteDescUpdated(r.noteId))})),(0,l.default)("[".concat(this.id,"] .edit")).off().on("click",(function(e){var t,n;e.preventDefault(),e.stopImmediatePropagation();var i=null===(t=s.delegate)||void 0===t?void 0:t.getController(),o=null===(n=s.delegate)||void 0===n?void 0:n.getEditor();null!=i&&null!=o&&(i.isEditorActive=!i.isEditorActive,i.setDistributionBasedOnSize(),s.updateToolBarButtons(),o.updateEditor())})),(0,l.default)("[".concat(this.id,"] .data")).off().on("click",(function(e){var t;e.preventDefault(),e.stopImmediatePropagation();var n=null===(t=s.delegate)||void 0===t?void 0:t.getController();null!=n&&(n.isDataActive=!n.isDataActive,n.setDistributionBasedOnSize(),s.updateToolBarButtons())})),(0,l.default)("[".concat(this.id,"] .export")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),s.exportNote()})),(0,l.default)("[".concat(this.id,"] .tb-close")).off().on("click",(function(e){var t;e.preventDefault(),e.stopImmediatePropagation();var n=null===(t=s.delegate)||void 0===t?void 0:t.getNote();null!=n?i.ModuleNotesManager.shared.closeNote(n.noteId):console.log(n)})))},t.prototype.exportNote=function(){var e,t=window.mApp.utils.deepCopy(null===(e=this.delegate)||void 0===e?void 0:e.getNote());if(null!=t){t.isDocumentation=!0;var n=new Blob([JSON.stringify(t,null,"\t")],{type:"application/json"}),i=URL.createObjectURL(n),o=document.createElement("a");o.href=i,o.download="".concat(t.noteTitle.replace(" ",""),".json"),document.body.appendChild(o),o.click(),document.body.removeChild(o)}},t.prototype.dataModeUpdated=function(e){var t;void 0===e&&(e=null===(t=this.delegate)||void 0===t?void 0:t.getController().isDataActive),null!=e&&(e?(0,l.default)("[".concat(this.id,"] .md-note-data")).css("display",""):(0,l.default)("[".concat(this.id,"] .md-note-data")).css("display","none"))},t.prototype.updateToolBarButtons=function(){var e,t=null===(e=this.delegate)||void 0===e?void 0:e.getController();null!=t&&(t.isDataActive?(0,l.default)("[".concat(this.id,"] .data")).addClass("active"):(0,l.default)("[".concat(this.id,"] .data")).removeClass("active"),t.isEditorActive?(0,l.default)("[".concat(this.id,"] .edit")).addClass("active"):(0,l.default)("[".concat(this.id,"] .edit")).removeClass("active"))},t.prototype.finish=function(){(0,l.default)("[".concat(this.id,"] .edit")).off(),(0,l.default)("[".concat(this.id,"] .data")).off(),(0,l.default)("[".concat(this.id,"] .tb-close")).off(),(0,l.default)("[".concat(this.id,"] .title")).off(),(0,l.default)("[".concat(this.id,"] textarea")).off(),this.delegate=void 0,e.prototype.finish.call(this)},t}(n.default);t.MarkdownToolBar=a}.apply(t,i),void 0===o||(e.exports=o)},20941:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(4713)],o=function(e,t,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testingMarkdown=t.MarkdownViewer=void 0;var l=function(e){function t(t,n,i){void 0===n&&(n=o.markdownView);var l=e.call(this,t,n)||this;return l.delegate=i,l}return s(t,e),t.prototype.viewWasInserted=function(){var t,n,i;e.prototype.viewWasInserted.call(this),this.udpateWithNoteText(null!==(i=null===(n=null===(t=this.delegate)||void 0===t?void 0:t.getNote())||void 0===n?void 0:n.noteData)&&void 0!==i?i:"")},t.prototype.udpateWithNoteText=function(e){var t=e;""==t&&(t="## This is the Note Viewer.\n- This note is empty, start editing the note on the Note Editor, you can toggle it by clicking on the pencil icon on the top right.\n\n- You can change the Note title and description clicking on the third button starting from the right.\n\n- If you make this window bigger, the Note editor will move from below to the side.\n\n- The format of the notes is Markdown, you can find a quick cheatsheet [here](https://devhints.io/markdown).\n        ");var i=n(42732),o=n(9980)({html:!0,linkify:!0,typographer:!0,highlight:function(e,t){if(t&&i.getLanguage(t))try{return'<pre style="color:#A7A6A6;" class="hljs"><code>'+i.highlight(e,{language:t,ignoreIllegals:!0}).value+"</code></pre>"}catch(e){}return'<pre style="color:#A7A6A6;" class="hljs"><code>'+o.utils.escapeHtml(e)+"</code></pre>"}});o.renderer.rules.paragraph_open=o.renderer.rules.heading_open=this.injectLineNumbers;var l=o.render(t),s=document.querySelector("[".concat(this.id,"views]"));null!=s&&(s.innerHTML=l,s.querySelectorAll("a").forEach((function(e){e.target="_blank"})))},t.prototype.injectLineNumbers=function(e,t,n,i,o){var l;return e[t].map&&0===e[t].level&&(l=e[t].map[0],e[t].attrJoin("class","line"),e[t].attrSet("data-line",String(l))),o.renderToken(e,t,n,i,o)},t.prototype.finish=function(){this.delegate=void 0,e.prototype.finish.call(this)},t}((i=r(i)).default);t.MarkdownViewer=l,t.testingMarkdown='\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\nresize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\ni18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n"Smartypants, double quotes" and \'single quotes\'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with `+`, `-`, or `*`\n+ Sub-lists are made by indenting 2 spaces:\n- Marker character change forces new list start:\n* Ac tristique libero volutpat at\n+ Facilisis in pretium nisl aliquet\n- Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline `code`\n\nIndented code\n\n// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n\n\nBlock code "fences"\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n``` js\nfunction $initHighlight(block, cls) {\n    try {\n      if (cls.search(/\bno-highlight\b/) != -1)\n        return process(block, true, 0x0F) +\n               ` class=""`;\n    } catch (e) {\n      /* handle exception */\n    }\n    for (var i = 0 / 2; i < classes.length; i++) {\n      if (checkCondition(classes[i]) === undefined)\n        console.log(\'undefined\');\n    }\n  \n    return (\n      <div>\n        <web-component>{block}</web-component>\n      </div>\n    )\n  }\n  \n  export  $initHighlight;\n```\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ "title text!")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg "The Stormtroopocat")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  "The Dojocat"\n\n\n\n'}.apply(t,i),void 0===o||(e.exports=o)},4234:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(97321),n(35963),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NavBar=void 0,n=r(n),o=r(o);var l=function(e){function t(t,n){void 0===n&&(n=i.navBarView);var o=e.call(this,t,n)||this;return window.mApp.moduleManager.moduleViewsExecutor[o.id]=o,o}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .save")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),window.mApp.moduleManager.saveModuleToLocalStorage(),(0,o.default)("[".concat(t.id,"] .save .test-button")).text("Saved ✓"),setTimeout((function(){(0,o.default)("[".concat(t.id,"] .save .test-button")).text("Save")}),1e3)})),(0,o.default)("[".concat(this.id,"] .export")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),window.mApp.moduleManager.saveModuleToLocalStorage(),window.mApp.moduleManager.exportModule()}))},t.prototype.moduleLoaded=function(){},t.prototype.moduleProjectNameChanged=function(){},t.prototype.moduleAutoSaved=function(){var e=this;(0,o.default)("[".concat(this.id,"] .save .test-button")).text("Auto Saved ✓"),setTimeout((function(){(0,o.default)("[".concat(e.id,"] .save .test-button")).text("Save")}),1e3)},t.prototype.finish=function(){delete window.mApp.moduleManager.moduleViewsExecutor[this.id],e.prototype.finish.call(this)},t}(n.default);t.NavBar=l}.apply(t,i),void 0===o||(e.exports=o)},95646:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(49072),n(30936),n(34580),n(11166),n(3693),n(46129),n(19755)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParamsContoller=void 0,l=r(l),c=r(c);var u=function(e){function t(t,n){void 0===n&&(n=a.basicHtml);var i=e.call(this,window.mApp.utils.makeId(),n)||this;return i.settingsController="",i.setInsertDefaultViews(),i.jsonId=t,i}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t;e.prototype.setUp.call(this);var l=new d.RouteViewController(window.mApp.utils.makeId(15),this.jsonId);this.insertNewView(new o.InsertedViewData(l.id)),l.setConstraints({top:"0px",right:"0px",left:"0px",height:"40px"});var s=[],r=window.mApp.moduleManager.moduleMap.get(this.jsonId),a=null==r?void 0:r.getObject(),u=window.mApp.moduleManager.getModuleOptions();if(null==a)return this;"moduleInfo"==(null==r?void 0:r.jsonPath[0])&&s.push(new n.ParamEditorCellController("Project Name",void 0,null!==(t=u.projectName)&&void 0!==t?t:"",!1,(function(e){u.projectName=e,Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach((function(e){var t;null===(t=e.moduleProjectNameChanged)||void 0===t||t.call(e)}))}),(function(){})));for(var p=0,h=function(e,t){if(e.includes("moduleCreator"))return"continue";var i=void 0;if(console.log(typeof t),"boolean"==typeof t&&(i=t),"string"==typeof t&&(i=t),Array.isArray(t)){var o=Array.from(t);o.length>0?"string"==typeof o[0]&&(i=o):i=[]}if("number"==typeof t&&(i=Number(t)),null==i)return"continue";s.push(new n.ParamEditorCellController(e,void 0,i,p%2!=1,(function(t){a[e]=t}),(function(){}))),p+=1},f=0,v=Object.entries(a);f<v.length;f++){var g=v[f];h(g[0],g[1])}var m=s.map((function(e){return e.id})),w=new i.SettingsCellController(m);return w.interceptCollectionView=function(e){(0,c.default)("[".concat(e.grid.getTag(),"]")).addClass("border-bottom")},this.settingsController=w.id,this.insertNewView(new o.InsertedViewData(w.id)),w.setConstraints({top:"40px",right:"0px",left:"0px",bottom:"0px"}),this},t}(l.default);t.ParamsContoller=u}.apply(t,i),void 0===o||(e.exports=o)},18475:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(34580),n(11166),n(82265),n(4370),n(19755)],o=function(e,t,n,i,o,l,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AlertWithOptions=void 0,i=r(i),a=r(a);var d=function(e){function t(t,n,i){void 0===i&&(i=[]);var o=e.call(this,void 0,l.alertWithOptionsView)||this;return o.options=[],o.title=t,o.msg=n,i.forEach((function(e){o.addOption(e)})),o}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this);var i=new o.StateManagerController(this.title,{finished:function(){t.finish()}}),l=new n.InsertedViewData(i.id,"$idstatemanager");this.insertNewView(l),i.clipToParent(),(0,a.default)("[".concat(this.id,"] .msg")).text(this.msg),this.options.reverse().forEach((function(e){e.id=window.mApp.utils.makeId();var n='<div clickId="'.concat(e.id,'"  class="option one-line center-flex">').concat(e.title,"</div>");(0,a.default)("[".concat(t.id,"] .options")).append(n)})),(0,a.default)("[".concat(this.id,"] .option")).off().on("click",(function(e){var n;e.preventDefault(),e.stopImmediatePropagation();for(var i=null!==(n=e.currentTarget.getAttribute("clickId"))&&void 0!==n?n:"",o=0,l=t.options;o<l.length;o++){var s=l[o];if(i==s.id)return s.didClick(),void t.finish()}}))},t.prototype.addOption=function(e){(0,a.default)("[".concat(this.id,"] .option")).off(),this.options.push(e)},t}(i.default);t.AlertWithOptions=d}.apply(t,i),void 0===o||(e.exports=o)},67214:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(19701),n(34580),n(11166),n(82265),n(38409),n(44333),n(19755),n(32115)],o=function(e,t,n,i,o,l,a,d,c,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectSocketController=void 0,o=r(o),c=r(c);var p=function(e){function t(t){var n=e.call(this,void 0,a.viewConnectSocket)||this;return n.spinnerOptions={lines:9,length:38,width:17,radius:45,scale:.1,corners:1,speed:1,rotate:0,animation:"spinner-line-fade-quick",direction:1,color:"#ffffff",fadeColor:"transparent",top:"50%",left:"50%"},u.keyCodesManager.shared.delegates[n.id]=n,window.mApp.sockets.socketsConnectionInterfaces[n.id]=n,n.connected=t,n}return s(t,e),t.prototype.viewWasInserted=function(){var o=this;e.prototype.viewWasInserted.call(this),t.socketsIsOnView=!0,(0,c.default)("[".concat(this.id,"] input")).trigger("focus");var s=new l.StateManagerController("App Connection",{finished:function(){o.finish()}}),r=document.querySelector("[".concat(this.id,"] .loading"));null!=r&&(this.spinner=new d.Spinner(this.spinnerOptions).spin(r));var a=new i.InsertedViewData(s.id,"$idstatemanager");this.insertNewView(a),s.clipToParent(),window.mApp.sockets.connectionStatus==n.serverConnectionStatus.connected?this.connectionEnabled():this.connectionFailed(),(0,c.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,c.default)("[".concat(this.id,"] .connect-button")).off().on("click",(function(e){var t;e.preventDefault(),e.stopImmediatePropagation();var n="".concat(null!==(t=(0,c.default)("[".concat(o.id,"] input")).val())&&void 0!==t?t:"");window.mApp.sockets.setUp(n),(0,c.default)("[".concat(o.id,"] .elem-padding-wider")).text("Retry"),(0,c.default)("[".concat(o.id,"] .loading")).css({display:""})})),(0,c.default)("[".concat(this.id,"] input")).val(window.mApp.sockets.getCurrentIp())},t.prototype.connectionEnabled=function(){var e=this;(0,c.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,c.default)("[".concat(this.id,"] .elem-padding-wider")).text("connected"),(0,c.default)("[".concat(this.id,"] .status-image")).attr({src:window.mApp.utils.getImageUrl("connected.png")}),(0,c.default)("[".concat(this.id,"] .status-image")).css({filter:"invert(73%) sepia(14%) saturate(1264%) hue-rotate(77deg) brightness(97%) contrast(87%)"}),null!=this.connected&&setTimeout((function(){var t;null===(t=e.connected)||void 0===t||t.call(e),e.finish()}),200)},t.prototype.connectionFailed=function(){(0,c.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,c.default)("[".concat(this.id,"] .elem-padding-wider")).text("Connect"),(0,c.default)("[".concat(this.id,"] .status-image")).attr({src:window.mApp.utils.getImageUrl("disconnected.png")}),(0,c.default)("[".concat(this.id,"] .status-image")).css({filter:"invert(78%) sepia(45%) saturate(7450%) hue-rotate(321deg) brightness(86%) contrast(102%)"})},t.prototype.keyDown=function(e){},t.prototype.keyUp=function(e){var t;if("Enter"==e&&(0,c.default)("[".concat(this.id,"] input")).is(":focus")){var n="".concat(null!==(t=(0,c.default)("[".concat(this.id,"] input")).val())&&void 0!==t?t:"");window.mApp.sockets.setUp(n),(0,c.default)("[".concat(this.id,"] .elem-padding-wider")).text("Retry"),(0,c.default)("[".concat(this.id,"] .loading")).css({display:""})}},t.prototype.finish=function(){t.socketsIsOnView=!1,delete u.keyCodesManager.shared.delegates[this.id],this.connected=void 0,this.spinner.stop(),delete window.mApp.sockets.socketsConnectionInterfaces[this.id],(0,c.default)("[".concat(this.id,"] .connect-button")).off(),e.prototype.finish.call(this)},t.socketsIsOnView=!1,t}(o.default);t.ConnectSocketController=p}.apply(t,i),void 0===o||(e.exports=o)},23408:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(32115),n(34580),n(11166),n(82265),n(27965),n(19755)],o=function(e,t,n,i,o,l,a,d){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NewProjectController=void 0,o=r(o),d=r(d);var c=function(e){function t(t){void 0===t&&(t=a.newProjectView);var i=e.call(this,window.mApp.utils.makeId(),t)||this;return i.canExit=!0,n.keyCodesManager.shared.delegates[i.id]=i,i}return s(t,e),t.prototype.disableExit=function(){this.canExit=!1},t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,d.default)("[".concat(this.id,"] input")).trigger("focus"),(0,d.default)("[".concat(this.id,"] .create-button")).on("click",(function(){var e,n=null!==(e=(0,d.default)("[".concat(t.id,"] input")).val())&&void 0!==e?e:"";""!=n&&(window.mApp.moduleManager.loadNewModule(window.mApp.moduleManager.getDefaultModule(),n),t.finish())}));var n=new l.StateManagerController("New Project",{finished:function(){t.finish()}});this.canExit||n.disableExit();var o=new i.InsertedViewData(n.id,"$idstatemanager");this.insertNewView(o),n.clipToParent()},t.prototype.keyUp=function(e){var t,n,i=null!==(n=null===(t=(0,d.default)("[".concat(this.id,"] input")))||void 0===t?void 0:t.val())&&void 0!==n?n:"";"Enter"==e&&""!=i&&(window.mApp.moduleManager.loadNewModule(window.mApp.moduleManager.getDefaultModule(),i),this.finish())},t.prototype.finish=function(){(0,d.default)("[".concat(this.id,"] .create-button")).off(),delete n.keyCodesManager.shared.delegates[this.id],e.prototype.finish.call(this)},t}(o.default);t.NewProjectController=c}.apply(t,i),void 0===o||(e.exports=o)},91053:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(77021),n(5219),n(80661),n(2360),n(94527),n(34580),n(11166),n(49726),n(66287),n(67015),n(19755),n(30936),n(49072)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f,v,g){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataRequestController=void 0,c=r(c),f=r(f);var m=function(e){function t(t,n,i){var o=e.call(this,t,i)||this;return o.jsonId="",o.jsonId=n,o.insertViewsDefault=new d.InsertedViewData(o.id,"$idviews"),o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t=this;e.prototype.setUp.call(this);var l=window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject();return this.setMethod(l.request.method),(0,f.default)("[".concat(this.id,"] #requesttype")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation();var l=new n.DropDown;["GET","POST","HEAD","PUT","DELETE","CONNECT","OPTIONS","TRACE","PATCH"].forEach((function(e){var n=new i.DefaultDropDownCell(e,void 0,void 0,!0,u.viewDropDownRequestType);n.viewWasInsertedCallback=function(e){(0,f.default)("[".concat(e,"]")).addClass(["bg-t-contrary-hover"])},l.addCell(n,(function(n,i){i.finish(),t.setMethod(e)}))})),l.insertInto(new d.InsertedViewData(void 0,"body")),l.setUpWithElement(0,10,o.ElementModalPos.center,o.ElemModalDirection.bottom,e.target,(0,f.default)(e.target).width())})),(0,f.default)("[".concat(this.id,"] .request-input")).val(l.request.url),(0,f.default)("[".concat(this.id,"] .request-input")).off().on("input",(function(e){var n;t.setUrl(null!==(n=(0,f.default)("[".concat(t.id,"] .request-input")).val())&&void 0!==n?n:"")})),this.setUpSubViews(),this},t.prototype.setUpSubViews=function(){var e=new p.HeadersView(this.jsonId);e.viewName="Headers";var t=new h.HttpBodyView(this.jsonId);t.viewName="Http Body";var n=[e.id,t.id],i=this.getSearchSettings();null!=i&&n.push(i);var o=new l.MenuSelctor(window.mApp.utils.makeId(15),n);o.interface=this,o.layout=new a.MenuSelectorLayout2,this.insertNewView(new d.InsertedViewData(o.id));var s=window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions();o.selectByViewName(s.openedRequestMenu),o.setConstraints({top:"0px",right:"0px",left:"0px",bottom:"0px"})},t.prototype.getSearchSettings=function(){var e,t=window.mApp.moduleManager.moduleMap.get(this.jsonId),n=t.getObject();if(null!=(null==n?void 0:n.separator)&&!(t.jsonPath.length<2)&&"search"==t.jsonPath[0]&&"0"==t.jsonPath[1]){var i=new v.SettingsCellController([new g.ParamEditorCellController("Searched Separator",void 0,null!==(e=n.separator)&&void 0!==e?e:"",!1,(function(e){n.separator=e}),(function(){})).id]);return i.viewName="Search Parameters",i.viewWasInsertedCallback=function(){(0,f.default)("[".concat(i.id,"]")).addClass("bg-primary")},i.interceptCollectionView=function(e){(0,f.default)("[".concat(e.grid.getTag(),"]")).addClass("border-bottom")},i.id}},t.prototype.setMethod=function(e){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.method=e,(0,f.default)("[".concat(this.id,"] #requesttype")).text(e.toUpperCase())},t.prototype.setUrl=function(e){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.url=e},t.prototype.menuSelectorWasSelected=function(e){var t,n;window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions().openedRequestMenu=null!==(n=null===(t=this.getView(e))||void 0===t?void 0:t.viewName)&&void 0!==n?n:""},t.prototype.finish=function(){(0,f.default)("[".concat(this.id,"] #requesttype")).off(),(0,f.default)("[".concat(this.id,"] .request-input")).off(),e.prototype.finish.call(this)},t}(c.default);t.DataRequestController=m}.apply(t,i),void 0===o||(e.exports=o)},66287:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(34580),n(11166),n(48959),n(19755)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeadersView=void 0,i=r(i),l=r(l);var a=function(e){function t(t,i){void 0===i&&(i=o.viewHtmlHeaders);var l=e.call(this,"headersView".concat(window.mApp.utils.makeId(15)),i)||this;return l.headers=new Map,l.jsonId=t,l.headersTable=new n.InsertedViewData(l.id,"$idheadersTable"),l}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.fixHeaders=function(){var e=this,t=Array.from(this.headers.keys());(t.length<=0||null==this.headers)&&this.headers.set(window.mApp.utils.makeId(15),{key:"",value:"",moduleCreatorHeaderisActive:!0});for(var n=[],i=0;i<t.length;i++){var o=t[i],l=this.headers.get(o);null!=l&&i!=t.length-1&&""==l.key&&""==l.value&&n.push(o)}n.forEach((function(t){e.headers.delete(t),e.removeListeners(t)})),t=Array.from(this.headers.keys());var s=this.headers.get(t[t.length-1]);null!=s&&""==s.key&&""==s.value||this.headers.set(window.mApp.utils.makeId(15),{key:"",value:"",moduleCreatorHeaderisActive:!0})},t.prototype.drawHeaders=function(){for(var e='<tr> <th> <div class="key-holder"> <div class="checkbox-holder"> </div> <div class="relative elem-padding-equal-wide-only center-v-flex"> Key </div> </div> </th> <th class="elem-padding-equal-wide-only">Value</th> </tr> <tr>',t=Array.from(this.headers.keys()),n=0;n<t.length;n++){var i=t[n];this.removeListeners(i),e+='\n            <tr>\n            <td>\n                <div  class="key-holder"> \n                    <div class="checkbox-holder"> \n\n                    <input $id  type=\'checkbox\' class="ignore center-absolute checkbox" checked >\n                    </div>\n                    <div class="relative"> \n                        <input $id class="input-header-key header-input" placeholder="Key">\n                    </div>\n                </div>\n            </td>\n            <td class="relative">\n                <input $id class="input-header-value header-input" placeholder="Value">\n            </td>\n            </tr>\n        '.split("$id").join(i)}for((0,l.default)("[".concat(this.id,"] [").concat(this.headersTable.getTag(),"]")).html(e),n=0;n<t.length;n++){i=t[n];var o=this.headers.get(i);null!=o&&this.addListenersToInput(i,o)}},t.prototype.addListenersToInput=function(e,t){var n,i,o=this;(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-key")).val(null!==(n=null==t?void 0:t.key)&&void 0!==n?n:""),(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-value")).val(null!==(i=null==t?void 0:t.value)&&void 0!==i?i:""),(0,l.default)("[".concat(this.id,"] [").concat(e,"].checkbox")).prop("checked",t.moduleCreatorHeaderisActive),(0,l.default)("[".concat(this.id,"] [").concat(e,"].checkbox")).off().on("click",(function(e){t.moduleCreatorHeaderisActive=(0,l.default)(e.target).is(":checked")})),(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-key")).off().on("blur",(function(t){var n,i=o.headers.get(e);null!=i&&(i.key=null!==(n=(0,l.default)(t.target).val())&&void 0!==n?n:""),o.fixHeaders(),o.drawHeaders(),o.updateModuleHeaders()})),(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-value")).off().on("blur",(function(t){var n,i=o.headers.get(e);null!=i&&(i.value=null!==(n=(0,l.default)(t.target).val())&&void 0!==n?n:""),o.fixHeaders(),o.drawHeaders(),o.updateModuleHeaders()}))},t.prototype.removeListeners=function(e){(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-key")).off(),(0,l.default)("[".concat(this.id,"] [").concat(e,"].input-header-value")).off(),(0,l.default)("[".concat(this.id,"] [").concat(e,"].checkbox")).off()},t.prototype.updateModuleHeaders=function(){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.headers=Array.from(this.headers.values())},t.prototype.setUp=function(){var t=this;return e.prototype.setUp.call(this),this.style({"overflow-y":"auto"}),window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.headers.forEach((function(e){null==e.moduleCreatorHeaderisActive&&(e.moduleCreatorHeaderisActive=!0),t.headers.set(window.mApp.utils.makeId(15),e)})),this.fixHeaders(),this.drawHeaders(),this.updateModuleHeaders(),this},t.prototype.finish=function(){for(var t=this,n=Array.from(this.headers.keys()),i=0;i<n.length;i++){var o=n[i];this.removeListeners(o)}n.forEach((function(e){t.headers.delete(e)})),e.prototype.finish.call(this)},t}(i.default);t.HeadersView=a}.apply(t,i),void 0===o||(e.exports=o)},67015:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(9091),n(11166),n(23642),n(19755)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpBodyView=void 0,i=r(i),l=r(l);var a=function(e){function t(t,n,i){void 0===n&&(n=window.mApp.utils.makeId(15)),void 0===i&&(i='<div $id> <div class="fill-absolute">  </div> </div>');var o=e.call(this,n,i)||this;o.jsonId=t;var l=window.mApp.moduleManager.moduleMap.get(o.jsonId);return o.moduleObject=l.getObject(),o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t,i=this;e.prototype.setUp.call(this),this.style({"overflow-y":"auto"}),(0,l.default)("[".concat(this.id,"]")).addClass("bg-primary");var s=n.EditorView.theme({"&":{color:"#E6E6E6",backgroundColor:"transparent"},".cm-content":{caretColor:"#E6E6E6",padding:"10px 0 10px 0"},"&.cm-focused .cm-cursor":{borderLeftColor:"#E6E6E6"},"&.cm-focused .cm-selectionBackground, ::selection":{backgroundColor:"#3B3B3B"},".cm-gutters":{backgroundColor:"transparent",color:"#A7A6A6",border:"none"},".cm-activeLine":{backgroundColor:"transparent"},".cm-activeLineGutter":{backgroundColor:"transparent"}},{dark:!0});return(0,l.default)("[".concat(this.id,"] .fill-absolute")).addClass("bg-primary"),this.editorView=new n.EditorView({extensions:[n.basicSetup,s,(0,o.placeholder)("Type the httpbody here."),n.EditorView.updateListener.of((function(e){var t=e.state.doc.toString();i.moduleObject.request.httpBody=""!=t?t:void 0}))],parent:document.querySelector("[".concat(this.id,"] .fill-absolute")),doc:null!==(t=this.moduleObject.request.httpBody)&&void 0!==t?t:""}),this},t.prototype.finish=function(){var t;this.moduleObject=void 0,null===(t=this.editorView)||void 0===t||t.destroy(),this.editorView=void 0,e.prototype.finish.call(this)},t}(i.default);t.HttpBodyView=a}.apply(t,i),void 0===o||(e.exports=o)},6840:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(34580),n(11166),n(3693),n(19045),n(30936),n(16266),n(19755)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RequestSettingsController=void 0,i=r(i),c=r(c);var u=function(e){function t(t,i,l){void 0===i&&(i=window.mApp.utils.makeId()),void 0===l&&(l=o.basicHtml);var s=e.call(this,i,l)||this;return s.finished=!1,s.insertViewsDefault=new n.InsertedViewData(s.id,"$idviews"),s.jsonId=t,window.mApp.moduleManager.moduleViewsExecutor[s.id]=s,s}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t,i,o,s,r=this;if(e.prototype.setUp.call(this),this.finished)return this;this.deleteSubviews();var u=window.mApp.moduleManager.moduleMap.get(this.jsonId);if(console.log(u),null==u)return this;var p=u.getObject();if(null==p)return this;u.getOptions();var h=[new d.SectionCellController("Javascript Settings"),new l.ClickCellController({title:"Remove Scripts",message:"Loads the html website without executring the javascript, all the &lt;script&gt; tags become &lt;p&gt; tags. The loading time is faster if its enabled."},null!==(i=null===(t=null==p?void 0:p.javascriptConfig)||void 0===t?void 0:t.removeJavascript)&&void 0!==i&&i,(function(e){var t;return e&&(p.javascriptConfig.loadInWebView=!1),p.javascriptConfig.removeJavascript=e,null===(t=r.getView("routeController"))||void 0===t||t.showHideExtendButton(),r.setUp(),!0})),new l.ClickCellController({title:"Load in WebView",message:"The javascript is injected on the website directly, loading times are slower because the website needs to load, if this option is enabled the *Remove Scripts* options wont work."},null!==(s=null===(o=null==p?void 0:p.javascriptConfig)||void 0===o?void 0:o.loadInWebView)&&void 0!==s&&s,(function(e){var t;return p.javascriptConfig.loadInWebView=e,e&&(p.javascriptConfig.removeJavascript=!1),null===(t=r.getView("routeController"))||void 0===t||t.showHideExtendButton(),r.setUp(),!0}))];this.getRequestSettings().forEach((function(e){h.push(e)}));var f=new a.SettingsCellController(h.map((function(e){return e.id})));return this.finished?(f.finish(),h.forEach((function(e){return e.finish()})),this):(this.insertNewView(new n.InsertedViewData(f.id,void 0)),(0,c.default)("[".concat(f.id,"]")).addClass("bg-primary"),f.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this)},t.prototype.getRequestSettings=function(){var e,t,n=this,i=window.mApp.moduleManager.moduleMap.get(this.jsonId),o=i.getOptions(),s=(i.getObject(),i.jsonPath),r=[new d.SectionCellController("Request Settings"),new l.ClickCellController({title:"Force Request",message:"Overrides the request data set on the javascript from the previous request to the one you set on this request tab. This option is usefull to do request to static urls."},null!==(e=null==o?void 0:o.forceRequest)&&void 0!==e&&e,(function(e){return o.forceRequest=e,!0})),new l.ClickCellController({title:"Async Request",message:"Instead of finishing the request when the website loads, manually finish the request using the code below.<br><br>window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');"},null!==(t=null==o?void 0:o.async)&&void 0!==t&&t,(function(e){return o.async=e,n.setUp(),!0}))];return"0"==s[s.length-1]?[r[0],r[2]]:r},t.prototype.moduleLoaded=function(){},t.prototype.moduleDataUpdated=function(){this.setUp()},t.prototype.finish=function(){this.finished=!0,delete window.mApp.moduleManager.moduleViewsExecutor[this.id],e.prototype.finish.call(this)},t}(i.default);t.RequestSettingsController=u}.apply(t,i),void 0===o||(e.exports=o)},1455:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(16956),n(9091),n(50526),n(18561),n(23642),n(34580),n(11166),n(67589),n(74748),n(19755)],o=function(e,t,i,o,l,a,d,c,u,p,h,f){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JavascriptController=void 0,u=r(u),f=r(f);var v=function(e){function t(t,n,i){void 0===n&&(n=window.mApp.utils.makeId()),void 0===i&&(i=h.javascriptControllerView);var o=e.call(this,n,i)||this;return o.insertViewsDefault=new c.InsertedViewData(o.id,"$idviews"),o.jsonId=t,o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t,n,s,r,c=this;e.prototype.setUp.call(this),(0,f.default)("[".concat(this.id,"]")).addClass("bg-primary");var u=window.mApp.moduleManager.moduleMap.get(this.jsonId);this.moduleObject=u.getObject();var h=this.moduleObject.javascriptConfig.javaScript;return h.split(/\n/g).length<5&&(h=this.beautifyJs(h),this.moduleObject.javascriptConfig.javaScript=h),this.editorView=new o.EditorView({extensions:[o.basicSetup,(0,i.javascript)(),i.javascriptLanguage.data.of({autocomplete:(0,i.scopeCompletionSource)(globalThis)}),p.dracula,(0,l.autocompletion)({icons:!1}),o.EditorView.lineWrapping,d.keymap.of([a.indentWithTab]),o.EditorView.updateListener.of((function(e){e.docChanged&&(c.moduleObject.javascriptConfig.javaScript=e.state.doc.toString())}))],parent:document.querySelector("[".concat(null===(t=this.insertViewsDefault)||void 0===t?void 0:t.getTag(),"]")),doc:h}),u.getOptions(),window.mApp.utils.isChrome()?(null===(r=document.querySelector("[".concat(null!==(s=null===(n=this.insertViewsDefault)||void 0===n?void 0:n.getTag())&&void 0!==s?s:"","]")))||void 0===r||r.scrollTop,this):this},t.prototype.beautifyJs=function(e){return(0,n(84204).js)(e,{indent_size:8,indent_char:" ",indent_with_tabs:!1,editorconfig:!1,eol:"\n",end_with_newline:!0,indent_level:0,preserve_newlines:!0,max_preserve_newlines:10,space_in_paren:!0,space_in_empty_paren:!0,jslint_happy:!1,space_after_anon_function:!0,space_after_named_function:!0,brace_style:"collapse",unindent_chained_methods:!0,break_chained_methods:!1,keep_array_indentation:!1,unescape_strings:!1,wrap_line_length:0,e4x:!1,comma_first:!1,operator_position:"before-newline",indent_empty_lines:!1,templating:["auto"]})},t.prototype.findFirstVisibleLine=function(){},t.prototype.finish=function(){var t,n,i,o=window.mApp.moduleManager.moduleMap.get(this.jsonId);null!=o&&(o.getOptions().javascriptEditorScroll=document.querySelector("[".concat(null!==(n=null===(t=this.insertViewsDefault)||void 0===t?void 0:t.getTag())&&void 0!==n?n:"","]")).scrollTop),null===(i=this.editorView)||void 0===i||i.destroy(),this.editorView=void 0,e.prototype.finish.call(this)},t}(u.default);t.JavascriptController=v}.apply(t,i),void 0===o||(e.exports=o)},6993:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(2360),n(34580),n(11166),n(39434),n(1455),n(46129),n(91053),n(49726),n(6840)],o=function(e,t,n,i,o,l,a,d,c,u,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RequestController=void 0;var h=function(e){function t(t,n,o){void 0===o&&(o=l.viewRequestController);var s=e.call(this,t,o)||this;return s.jsonId="",s.jsonId=n,s.insertViewsDefault=new i.InsertedViewData(s.id,"$idviews"),s}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){e.prototype.setUp.call(this);var t=new d.RouteViewController("routeController",this.jsonId);this.insertNewView(new i.InsertedViewData(t.id)),t.setConstraints({top:"0px",right:"0px",left:"0px",height:"40px"});var o=new c.DataRequestController("view1",this.jsonId,u.viewDataRequestController);o.viewName="Request";var l=new a.JavascriptController(this.jsonId);l.viewName="Javascript";var s=new p.RequestSettingsController(this.jsonId);s.viewName="Settings";var r=new n.MenuSelctor(window.mApp.utils.makeId(15),[o.id,l.id,s.id]);r.interface=this,this.insertNewView(new i.InsertedViewData(r.id));var h=window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions();return r.selectByViewName(h.openedMenu),r.setConstraints({top:"40px",right:"0px",left:"0px",bottom:"0px"}),this},t.prototype.menuSelectorWasSelected=function(e){var t,n;window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions().openedMenu=null!==(n=null===(t=this.getView(e))||void 0===t?void 0:t.viewName)&&void 0!==n?n:""},t}((o=r(o)).default);t.RequestController=h}.apply(t,i),void 0===o||(e.exports=o)},22015:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(49076),n(97321),n(2360),n(80123),n(34580),n(40054),n(25317)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RightGridElementController=void 0,n=r(n);var u=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.setInsertDefaultViews(),l.ModuleNotesManager.shared.delegates[t]=i,window.mApp.moduleManager.moduleViewsExecutor[i.id]=i,i.menuSelector=new o.MenuSelctor(window.mApp.utils.makeId(15),[]),i.menuSelector.interface=i,i.emptyView=new d.EmptyView("No Notes Opened").id,i}return s(t,e),t.prototype.viewWasInserted=function(){var t,i,o;e.prototype.viewWasInserted.call(this),this.resizeObserver=new n.default(new a.InsertedViewData(this.id,void 0),[{name:"closed",condition:function(e){return e.inlineSize<=1}},{name:"opened",condition:function(e){return e.inlineSize>=500}}]),this.resizeObserver.interface=this,this.insertNewView(new a.InsertedViewData(null!==(i=null===(t=this.menuSelector)||void 0===t?void 0:t.id)&&void 0!==i?i:"")),null===(o=this.menuSelector)||void 0===o||o.setConstraints({top:"0px",right:"0px",left:"0px",bottom:"0px"});var l=this.getView(this.emptyView);this.insertNewView(new a.InsertedViewData(this.emptyView)),null==l||l.clipToParent(),null==l||l.isHidden(!0)},t.prototype.setNotes=function(e){var t,n,i,o,s,r;void 0===e&&(e=l.ModuleNotesManager.shared.getOpenedNotes()),null===(t=this.menuSelector)||void 0===t||t.setViews([]);for(var a=0,d=e;a<d.length;a++){var u=d[a],p=l.ModuleNotesManager.shared.getNote(u);new c.MarkdownController(u,void 0,p).viewName=null!==(n=null==p?void 0:p.noteTitle)&&void 0!==n?n:""}null===(i=this.menuSelector)||void 0===i||i.setViews(e),null===(o=this.menuSelector)||void 0===o||o.selectByViewId(l.ModuleNotesManager.shared.getActiveNote()),e.length<=0?(this.close(),null===(s=this.getView(this.emptyView))||void 0===s||s.isHidden(!1)):e.length>0&&!this.isClosed()&&(this.open(),null===(r=this.getView(this.emptyView))||void 0===r||r.isHidden(!0))},t.prototype.menuSelectorWasSelected=function(e){var t,n,i;l.ModuleNotesManager.shared.openNote(null!==(i=null===(n=null===(t=this.getView(e))||void 0===t?void 0:t.note)||void 0===n?void 0:n.noteId)&&void 0!==i?i:"")},t.prototype.isClosed=function(){return this.getSize().width<=0},t.prototype.resizeTriggered=function(e){var t=this,n=this.getView("bottomStatusBar");null==n||n.updateWindowButtons(),"opened"==e.name&&l.ModuleNotesManager.shared.getOpenedNotes().forEach((function(e){var n=t.getView(e);console.log(n.viewName),n.setDistributionBasedOnSize()}))},t.prototype.resizeFinished=function(e){throw new Error("Method not implemented.")},t.prototype.observerFinished=function(){throw new Error("Method not implemented.")},t.prototype.open=function(){window.mApp.views.get("baseGrid").setDocumnetationViewSize(500)},t.prototype.close=function(){window.mApp.views.get("baseGrid").setDocumnetationViewSize(0)},t.prototype.noteClosed=function(e){var t,n;null===(t=this.menuSelector)||void 0===t||t.removeView(e),l.ModuleNotesManager.shared.getOpenedNotes().length<=0&&(this.close(),null===(n=this.getView(this.emptyView))||void 0===n||n.isHidden(!1))},t.prototype.noteOpened=function(e){var t,n,i,o,s;null===(t=this.getView(this.emptyView))||void 0===t||t.isHidden(!0);var r=l.ModuleNotesManager.shared.getNote(e);if(l.ModuleNotesManager.shared.getOpenedNotes(),this.isClosed()&&this.open(),null!=r)if(null==this.getView(e)){var a=new c.MarkdownController(e,void 0,r);a.viewName=r.noteTitle,null===(o=this.menuSelector)||void 0===o||o.addView(a.id),null===(s=this.menuSelector)||void 0===s||s.selectByViewId(e)}else(null===(n=this.menuSelector)||void 0===n?void 0:n.selectedView)!=e&&(null===(i=this.menuSelector)||void 0===i||i.selectByViewId(e))},t.prototype.noteTitleUpdated=function(e){var t;null===(t=this.menuSelector)||void 0===t||t.reloadViewNames()},t.prototype.moduleLoaded=function(){this.setNotes()},t.prototype.moduleProjectNameChanged=function(){},t.prototype.moduleAutoSaved=function(){},t.prototype.finish=function(){var t;this.menuSelector=void 0,null===(t=this.resizeObserver)||void 0===t||t.finished(),this.resizeObserver=void 0,delete l.ModuleNotesManager.shared.delegates[this.id],delete window.mApp.moduleManager.moduleViewsExecutor[this.id],e.prototype.finish.call(this)},t}((i=r(i)).default);t.RightGridElementController=u}.apply(t,i),void 0===o||(e.exports=o)},46129:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(83229),n(11166),n(78110),n(35141),n(67214),n(44333),n(19755),n(77021),n(5219),n(34580),n(80661),n(58509),n(94065),n(32115)],o=function(e,t,n,i,o,l,a,d,c,u,p,h,f,v,g,m){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RouteViewController=void 0,i=r(i),c=r(c);var w=function(e){function t(t,n,i){void 0===i&&(i=l.viewRoute);var o=e.call(this,t,i)||this;return o.jsonId="",o.spinnerOptions={lines:9,length:38,width:17,radius:30,scale:.1,corners:1,speed:1,rotate:0,animation:"spinner-line-fade-quick",direction:1,color:"#ffffff",fadeColor:"transparent",top:"50%",left:"50%"},o.jsonId=n,window.mApp.moduleManager.moduleViewsExecutor[o.jsonId]=o,window.mApp.moduleManager.moduleExecutionInterfaces[o.id]=o,m.keyCodesManager.shared.delegates[o.id]=o,o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp();var t=document.querySelector("[".concat(this.id,"] .spinner-holder"));null!=t&&(this.spinner=new d.Spinner(this.spinnerOptions).spin(t))},t.prototype.setUp=function(){var t,n,i,o,l,s=this;e.prototype.setUp.call(this);var r=window.mApp.moduleManager.moduleMap.get(this.jsonId);(0,c.default)("[".concat(this.id,"] .sub-menu")).off().on("click",(function(e){e.stopPropagation(),e.preventDefault()})),(0,c.default)("[".concat(this.id,"] .execute-button")).off().on("click",(function(e){e.stopPropagation(),e.preventDefault(),s.didClickExecute()})),(0,c.default)("[".concat(this.id,"] .route")).html(""),null==window.mApp.utils.getNumberFromString(null!==(n=null==r?void 0:r.jsonPath[(null!==(t=null==r?void 0:r.jsonPath)&&void 0!==t?t:[]).length-1])&&void 0!==n?n:"")&&((0,c.default)("[".concat(this.id,"] .execute-button")).css({display:"none"}),(0,c.default)("[".concat(this.id,"] .sub-menu")).css({display:"none"})),this.updateButtonStatus(),this.showHideExtendButton();for(var a="",d=0;d<(null!==(i=null==r?void 0:r.jsonPath)&&void 0!==i?i:[]).length;d++){var u=window.mApp.utils.capitalizeFirstLetter(null!==(o=null==r?void 0:r.jsonPath[d])&&void 0!==o?o:"");""!=u&&(a+='<div class="r-text">$name</div>'.replace("$name",u),d<(null!==(l=null==r?void 0:r.jsonPath)&&void 0!==l?l:[]).length-1&&(a+='<div class="r-separator">/</div>'))}return(0,c.default)("[".concat(this.id,"] .route")).html(a),this},t.prototype.didClickExecute=function(){var e=this;window.mApp.sockets.isConnected()?window.mApp.moduleManager.executionStatus!=n.ModuleExecutionStatus.executing?(40==window.mApp.views.get("LogsViewerHolderController").getSize().height&&window.mApp.views.get("baseGrid").setLogsViewSize(400),window.mApp.moduleManager.executeModule(this.getExecuteRoute())):window.mApp.moduleManager.cancelCurrentExecution():o.PopUpView.showPopUpViewOnBody(new a.ConnectSocketController((function(){e.didClickExecute()})).id)},t.prototype.updateButtonStatus=function(){var e,t,i=window.mApp.moduleManager.moduleMap.get(this.jsonId),o=null===(e=null==i?void 0:i.getSection())||void 0===e?void 0:e.getSection();switch(null==o&&(o=null==i?void 0:i.getSection()),window.mApp.moduleManager.executionStatus){case n.ModuleExecutionStatus.finished:(0,c.default)("[".concat(this.id,"] .title")).text("Execute ".concat(null===(t=null==o?void 0:o.options)||void 0===t?void 0:t.name)),this.stopLoading();break;case n.ModuleExecutionStatus.executing:(0,c.default)("[".concat(this.id,"] .title")).text("Cancel"),this.startLoading();break;case n.ModuleExecutionStatus.canceling:(0,c.default)("[".concat(this.id,"] .title")).text("Canceling..."),this.startLoading()}},t.prototype.showHideExtendButton=function(){(0,c.default)("[".concat(this.id,"] .route-view")).css({"grid-template-columns":"auto  min-content 0px"})},t.prototype.startLoading=function(){(0,c.default)("[".concat(this.id,"] .execute-button")).addClass("loading")},t.prototype.stopLoading=function(){(0,c.default)("[".concat(this.id,"] .execute-button")).removeClass("loading")},t.prototype.getExecuteRoute=function(){var e,t=window.mApp.moduleManager.moduleMap.get(this.jsonId),n=null!==(e=null==t?void 0:t.jsonPath)&&void 0!==e?e:void 0;return null==n?[]:n.length>2?[n[0],n[1]]:[n[0]]},t.prototype.moduleExecutionUpdated=function(){this.updateButtonStatus()},t.prototype.moduleLoaded=function(){},t.prototype.moduleDataUpdated=function(){this.setUp()},t.prototype.keyCombinationExecuted=function(e){e!=m.KeyShortcuts.executeModule||a.ConnectSocketController.socketsIsOnView||this.didClickExecute()},t.prototype.finish=function(){var t;delete window.mApp.moduleManager.moduleViewsExecutor[this.jsonId],delete window.mApp.moduleManager.moduleExecutionInterfaces[this.id],null===(t=this.spinner)||void 0===t||t.stop(),this.spinner=void 0,delete m.keyCodesManager.shared.delegates[this.id],(0,c.default)("[".concat(this.id,"] .execute-button")).off(),e.prototype.finish.call(this)},t}(i.default);t.RouteViewController=w}.apply(t,i),void 0===o||(e.exports=o)},63607:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(76752)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n=l(n),window.mApp=new n.default,window.mApp.start()}.apply(t,i),void 0===o||(e.exports=o)},49076:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(19755)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n=l(n);var i=function(){function e(e,t){this.resizeConditions=[],this.insertedIntoData=e,this.resizeConditions=t,this.setUp()}return e.prototype.setUp=function(){var e,t=this;this.resizeObserver=new ResizeObserver((function(e){for(var n,i=0,o=e;i<o.length;i++)for(var l=o[i],s=0,r=t.resizeConditions;s<r.length;s++){var a=r[s];if(0!=l.borderBoxSize.length&&a.condition(l.borderBoxSize[0]))return null===(n=t.interface)||void 0===n||n.resizeTriggered(a),void(t.currentCondition=a.name)}}));var n=null===(e=this.insertedIntoData)||void 0===e?void 0:e.getView();return null!=this.insertedIntoData&&null!=n&&null!=document.querySelector("[".concat(this.insertedIntoData.getTag(),"]"))&&(this.resizeObserver.observe(document.querySelector("[".concat(this.insertedIntoData.getTag(),"]"))),!0)},e.prototype.triggerManually=function(){null===(e=this.insertedIntoData)||void 0===e||e.getView();var e,t,i,o=(0,n.default)("[".concat(null===(t=this.insertedIntoData)||void 0===t?void 0:t.getTag(),"]"));if(null!=o){var l=o.outerWidth(),s=o.outerHeight();if(null!=l&&null!=s)for(var r={blockSize:s,inlineSize:l},a=0,d=this.resizeConditions;a<d.length;a++){var c=d[a];if(c.condition(r))return null===(i=this.interface)||void 0===i||i.resizeTriggered(c),void(this.currentCondition=c.name)}}},e.prototype.finished=function(){var e,t,n;null===(e=this.resizeObserver)||void 0===e||e.disconnect(),this.resizeConditions=[],this.resizeObserver=void 0,null!=(null===(t=this.interface)||void 0===t?void 0:t.observerFinished)&&(null===(n=this.interface)||void 0===n||n.observerFinished()),this.interface=void 0},e}();t.default=i}.apply(t,i),void 0===o||(e.exports=o)},19701:function(e,t,n){var i,o=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,l){function s(e){try{a(i.next(e))}catch(e){l(e)}}function r(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}a((i=i.apply(e,t||[])).next())}))},l=this&&this.__generator||function(e,t){var n,i,o,l,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(l){return function(r){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,r])}}};i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SocketsConnectionHandler=t.serverConnectionStatus=t.SocketMessageCallback=void 0;var n,i=function(){function e(e,t){var n=this;this.sentTimeout=1e4,this.completedTimeout=4e4,this.id="",this.finished=!1,this.sent=e,null!=this.sent&&setTimeout((function(){null!=n.sent&&(n.sent({},!0),n.sent=void 0),null==n.completion&&n.finish()}),this.sentTimeout),this.completion=t,null!=this.completion&&setTimeout((function(){null!=n.completion&&(n.completion({},!0),n.completion=void 0),null==n.sent&&n.finish()}),this.completedTimeout)}return e.prototype.sentCallback=function(e){null!=this.sent&&(this.sent(e,!1),this.sent=void 0),null==this.completion&&this.finish()},e.prototype.completionCallback=function(e){null!=this.completion&&(this.completion(e,!1),this.completion=void 0),null==this.sent&&this.finish()},e.prototype.error=function(){null!=this.sent&&(this.sent({},!0),this.sent=void 0),null!=this.completion&&(this.completion({},!0),this.completion=void 0),this.finish()},e.prototype.finish=function(){this.finished||(this.finished=!0,this.sent=void 0,this.completion=void 0,delete window.mApp.sockets.completionMessagesArray[this.id])},e}();t.SocketMessageCallback=i,function(e){e[e.connected=0]="connected",e[e.connecting=1]="connecting",e[e.notConnected=2]="notConnected"}(n=t.serverConnectionStatus||(t.serverConnectionStatus={}));var s=function(){function e(){this.socketsConnectionInterfaces={},this.connectionStatus=n.notConnected,this.completionMessagesArray={},this.currentIp=""}return e.prototype.getCurrentIp=function(){var e;return null!==(e=window.localStorage.getItem("currentIP"))&&void 0!==e?e:""},e.prototype.setCurrentIp=function(e){window.localStorage.setItem("currentIP",e)},e.prototype.isConnected=function(){return this.connectionStatus==n.connected},e.prototype.setUp=function(e){var t=this;if(this.connectionFalied(),""!=e){var i=window.mApp.utils.makeId();this.connectionTimerId=i,setTimeout((function(){t.connectionTimerId==i&&t.connectionFalied()}),1e4),this.setCurrentIp(e),this.connectionStatus=n.connecting,this.connection=new WebSocket(e),this.connection.onopen=function(){t.connectionOpened()},this.connection.onerror=function(e){t.connectionFalied()},this.connection.onclose=function(e){t.connectionFalied()},this.connection.onmessage=function(e){return o(t,void 0,void 0,(function(){var t,n,i,o;return l(this,(function(l){switch(l.label){case 0:return t=this.messageReceived,i=(n=JSON).parse,o=atob,[4,e.data.text()];case 1:return t.apply(this,[i.apply(n,[o.apply(void 0,[l.sent()])])]),[2]}}))}))}}},e.prototype.closeConnectionWithoutCallbacks=function(){var e=this;null!=this.connection&&(this.connection.onopen=function(){},this.connection.onerror=function(e){},this.connection.onclose=function(e){},this.connection.onmessage=function(t){return o(e,void 0,void 0,(function(){return l(this,(function(e){return[2]}))}))},this.connection.close())},e.prototype.connectionFalied=function(e){void 0===e&&(e=!0),this.connectionTimerId=window.mApp.utils.makeId(),this.closeConnectionWithoutCallbacks(),this.connectionStatus=n.notConnected;for(var t=0,i=Object.keys(this.completionMessagesArray);t<i.length;t++){var o=i[t];this.completionMessagesArray[o].error(),delete this.completionMessagesArray[o]}if(e){for(var l=0,s=Object.values(this.socketsConnectionInterfaces);l<s.length;l++)s[l].connectionFailed();this.connection=void 0}},e.prototype.connectionOpened=function(){this.connectionTimerId=window.mApp.utils.makeId(),this.connectionStatus=n.connected;for(var e=0,t=Object.values(this.socketsConnectionInterfaces);e<t.length;e++)t[e].connectionEnabled()},e.prototype.sendMessage=function(e,t){var i;return this.connectionStatus==n.connected&&(null!=t&&(t.id=e.id,null!=t.sent&&(e.sentCallback=!0),null!=t.completion&&(e.completionCallback=!0),this.completionMessagesArray[t.id]=t),null===(i=this.connection)||void 0===i||i.send(JSON.stringify(e)),!0)},e.prototype.messageReceived=function(e){var t=e;null!=t&&this.parseMessageReceived(t)},e.prototype.parseMessageReceived=function(e){var t,n;"CallbackSent"!=e.functionName?"CallbackCompletion"!=e.functionName||null===(n=this.completionMessagesArray[e.id])||void 0===n||n.completionCallback(e):null===(t=this.completionMessagesArray[e.id])||void 0===t||t.sentCallback(e)},e}();t.SocketsConnectionHandler=s}.apply(t,[n,t]),void 0===i||(e.exports=i)},56231:(e,t,n)=>{var i,o;i=[n,t,n(19701)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectionChecker=void 0;var i=function(){function e(){this.started=!1,this.connectionId=""}return e.prototype.setUp=function(){window.mApp.sockets.socketsConnectionInterfaces[window.mApp.utils.makeId()]=e.shared},e.prototype.start=function(){this.started||(this.started=!0,this.pingPong())},e.prototype.pingPong=function(){var e=this,t="",i=!1;setInterval((function(){console.log("ping pong");var o=new n.SocketMessageCallback((function(o,l){if(l&&window.mApp.sockets.connectionStatus==n.serverConnectionStatus.connected&&i&&t==e.connectionId&&(window.mApp.sockets.connectionFalied(),i=!1,t=""),l)return t=e.connectionId,void(i=!0);i=!1,t=""}),void 0);o.sentTimeout=5,window.mApp.sockets.sendMessage({id:window.mApp.utils.makeId(),functionName:"connectionChecker",sentCallback:!0,completionCallback:!1},o)}),6e3)},e.prototype.connectionEnabled=function(){this.connectionId=window.mApp.utils.makeId(),this.start()},e.prototype.connectionFailed=function(){this.connectionId=window.mApp.utils.makeId()},e.shared=new e,e}();t.ConnectionChecker=i}.apply(t,i),void 0===o||(e.exports=o)},94095:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogsParser=void 0;var n=function(){function e(){this.logsInterfaces={},this.implementedLogs=[],this.logsOrder=[],this.logs={},this.selectedLog=void 0,this.updatingLogs=!1,this.logsQueue=[]}return e.prototype.logsUpdated=function(e){var t,n;if(this.updatingLogs)this.logsQueue.push(e);else{this.updatingLogs=!0,this.logsOrder=e.logsOrder;for(var i=0,o=e.logsOrder;i<o.length;i++){var l=o[i];null==this.logs[l]&&(this.logs[l]=[]);for(var s=0,r=e.returnLogs[l];s<r.length;s++){var a=r[s];this.implementedLogs.includes(a.id)||(a.sectionId=l,this.logs[l].push(a),this.implementedLogs.push(a.id))}}for(var d=0,c=Object.keys(this.logs);d<c.length;d++){var u=c[d];this.logsOrder.includes(u)||delete this.logs[u]}this.removeOldLogs();var p=!1;if(this.logsOrder.length>=1)for(var h=0,f=this.logs[this.logsOrder[0]];h<f.length;h++){var v=f[h];if(v.error){this.selectedLog={logId:v.id,sectionId:this.logsOrder[0]},null===(t=window.mApp.views.get("LogsViewerHolderController"))||void 0===t||t.showCurrentLog(),p=!0;break}}p||null===(n=window.mApp.views.get("LogsViewerHolderController"))||void 0===n||n.showJSLogs();for(var g=0,m=Object.values(this.logsInterfaces);g<m.length;g++)m[g].logsUpdated();this.updatingLogs=!1,this.lookForQueueLogs()}},e.prototype.removeOldLogs=function(){for(var e=0,t=Object.keys(this.logs);e<t.length;e++){var n=t[e];if(!this.logsOrder.includes(n)){for(var i=0,o=this.logs[n];i<o.length;i++){var l=o[i];window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(l.id),this.implementedLogs)}window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(n),this.implementedLogs),delete this.logs[n]}}},e.prototype.getLog=function(e){for(var t,n=0,i=null!==(t=this.logs[e.sectionId])&&void 0!==t?t:[];n<i.length;n++){var o=i[n];if(o.id==e.logId)return o}},e.prototype.logSelected=function(e){this.selectedLog=e;for(var t=0,n=Object.values(this.logsInterfaces);t<n.length;t++)n[t].logSelected()},e.prototype.getModuleLogsToSend=function(){return{implementedLogs:this.implementedLogs,logsOrder:[],returnLogs:{}}},e.prototype.lookForQueueLogs=function(){if(this.logsQueue.length>0){var e=this.logsQueue[0];delete this.logsQueue[0],this.logsUpdated(e)}},e.shared=new e,e}();t.LogsParser=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},72872:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.setUp=function(){},e.prototype.finish=function(){},e}();t.default=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},39916:(e,t,n)=>{var i,o;i=[n,t,n(23642),n(80729)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.variant,o=e.settings,l=e.styles,s=n.EditorView.theme({"&":{backgroundColor:o.background,color:o.foreground,"font-size":"15px"},".cm-content":{caretColor:o.caret},".cm-cursor, .cm-dropCursor":{borderLeftColor:o.caret},"&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection":{backgroundColor:o.selection},".cm-activeLine":{backgroundColor:o.lineHighlight},".cm-gutters":{backgroundColor:o.gutterBackground,color:o.gutterForeground},".cm-activeLineGutter":{backgroundColor:o.lineHighlight},".cm-tooltip-autocomplete":{backgroundColor:"#262626",color:"#A7A6A6","line-height":"1","box-sizing":" border-box",border:"1px solid rgba(255,255,255,.1)"},".cm-completionMatchedText":{textDecoration:"none",color:"#FFFFFF"},".cm-tooltip-autocomplete ul li[aria-selected]":{backgroundColor:"#3B3B3B"}},{dark:"dark"===t}),r=i.HighlightStyle.define(l);return[s,(0,i.syntaxHighlighting)(r)]}}.apply(t,i),void 0===o||(e.exports=o)},67589:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(95048),n(39916)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.draculaMarkdown=t.dracula=void 0,i=l(i),t.dracula=(0,i.default)({variant:"dark",settings:{background:"#212221",foreground:"#E6E6E6",caret:"#fff",selection:"#727377",gutterBackground:"#212221",gutterForeground:"#E6E6E6",lineHighlight:"transparent"},styles:[{tag:[n.tags.comment,n.tags.quote],color:"#A7A6A6"},{tag:[n.tags.keyword],color:"#FF7AB2",fontWeight:"bold"},{tag:[n.tags.string,n.tags.meta],color:"#FF8170"},{tag:[n.tags.typeName],color:"#DABAFF"},{tag:[n.tags.definition(n.tags.variableName)],color:"#6BDFFF",fontWeight:"600"},{tag:[n.tags.name],color:"#6BAA9F"},{tag:[n.tags.variableName],color:"#ACF2E4"},{tag:[n.tags.regexp,n.tags.link],color:"#FF8170"}]}),t.draculaMarkdown=(0,i.default)({variant:"dark",settings:{background:"#212221",foreground:"#E6E6E6",caret:"#fff",selection:"#727377",gutterBackground:"#212221",gutterForeground:"#E6E6E6",lineHighlight:"transparent"},styles:[{tag:[n.tags.comment,n.tags.quote],color:"#A7A6A6"},{tag:[n.tags.keyword],color:"#FF7AB2",fontWeight:"bold"},{tag:[n.tags.string,n.tags.meta],color:"rgb(78, 128, 238)"},{tag:[n.tags.typeName],color:"#DABAFF"},{tag:[n.tags.definition(n.tags.variableName)],color:"#6BDFFF",fontWeight:"600"},{tag:[n.tags.name],color:"#6BAA9F"},{tag:[n.tags.variableName],color:"#ACF2E4"},{tag:[n.tags.regexp,n.tags.link],color:"rgb(78, 128, 238)"}]})}.apply(t,i),void 0===o||(e.exports=o)},43369:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(85446),n(34580),n(11166),n(87857),n(72593),n(19755)],o=function(e,t,n,i,o,l,a,d){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UICollectionView=void 0,o=r(o),d=r(d);var c=function(e){function t(t,o,s){void 0===t&&(t=window.mApp.utils.makeId()),void 0===s&&(s=n.viewDefaultCollectionViewView);var r=e.call(this,t,s)||this;return r.layoutDesign=new l.UICollectionViewLayoutDesign,r.scrollTop=0,r.grid=null!=o?o:new i.InsertedViewData(r.id,"$idgrid"),r}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){return e.prototype.setUp.call(this),this.designUpdated(),this},t.prototype.reloadData=function(){for(var e,t,n,o=0,l=this.insertedViews;o<l.length;o++){var s=l[o].getView();null==s||s.finish()}if(null!=this.dataSourceDelegate)for(var r=this.dataSourceDelegate.cvNumberOfSections(this),d=null===(e=this.grid)||void 0===e?void 0:e.getTag(),c=0;c<r;c++){var u=this.dataSourceDelegate.cvNumberOfItemsInSection(this,c),p=this.dataSourceDelegate.cvCellForSectionAt(this,a.UICollectionViewSectionCellType.header,c);null!=p&&(p.sectionCellType=a.UICollectionViewSectionCellType.header,p.indexPath={section:c,item:0},p.collectionViewId=this.id,this.insertNewView(new i.InsertedViewData(p.id,d))),this.setDelegatesToSectionCell(null==p?void 0:p.id,c,a.UICollectionViewSectionCellType.header);for(var h=0;h<u;h++){var f={section:c,item:h},v=this.dataSourceDelegate.cvCellForItemAt(this,f);if(v.indexPath=f,v.collectionViewId=this.id,this.insertNewView(new i.InsertedViewData(v.id,d)),this.setDelegateToCell(v.id,f),h!=u-1){var g=null===(n=(t=this.dataSourceDelegate).getSeparator)||void 0===n?void 0:n.call(t,this,f);null!=g&&this.insertNewView(new i.InsertedViewData(g.id))}}var m=this.dataSourceDelegate.cvCellForSectionAt(this,a.UICollectionViewSectionCellType.footer,c);null!=m&&(m.sectionCellType=a.UICollectionViewSectionCellType.footer,m.indexPath={section:c,item:0},m.collectionViewId=this.id,this.insertNewView(new i.InsertedViewData(m.id,d))),this.setDelegatesToSectionCell(null==m?void 0:m.id,c,a.UICollectionViewSectionCellType.footer)}},t.prototype.scrollTo=function(e){var t,n,i=document.querySelector("[".concat(null!==(n=null===(t=this.getCellAt(e))||void 0===t?void 0:t.id)&&void 0!==n?n:"asdsdfddfads","]"));console.log("Thisi is the cell"),console.log(i),null!=i&&(console.log(i.scrollHeight),i.scrollIntoView())},t.prototype.getScrollTop=function(){var e,t;return null!==(t=null===(e=document.querySelector("[".concat(this.grid.getTag(),"]")))||void 0===e?void 0:e.scrollTop)&&void 0!==t?t:0},t.prototype.setScrollTop=function(e){var t;null!=(null===(t=document.querySelector("[".concat(this.grid.getTag(),"]")))||void 0===t?void 0:t.scrollTop)&&(document.querySelector("[".concat(this.grid.getTag(),"]")).scrollTop=e)},t.prototype.getSize=function(){var e,t,n=(0,d.default)("[".concat(this.id,"] [").concat(this.grid.getTag(),"]"));return{width:null!==(e=n.width())&&void 0!==e?e:0,height:null!==(t=n.height())&&void 0!==t?t:0}},t.prototype.updateCellsWithoutRedrawing=function(){var e=this.getScrollTop();console.log("UPDATING CELLS WITHOUT READRAWWING");for(var t=0,n=this.insertedViews;t<n.length;t++){var i=n[t].getView();null==i||i.cellWasReloadedWithoutRedrawing()}this.setScrollTop(e)},t.prototype.setDelegateToCell=function(e,t){var n=this;null!=this.delegate&&(0,d.default)("[".concat(e,"]")).off("click").on("click",(function(e){var i;e.preventDefault(),e.stopImmediatePropagation(),null===(i=n.delegate)||void 0===i||i.cvDidSelectItem(n,t)}))},t.prototype.setDelegatesToSectionCell=function(e,t,n){var i=this;null!=e&&null!=this.delegate&&(0,d.default)("[".concat(e,"]")).off("click").on("click",(function(e){var o;e.stopPropagation(),e.preventDefault(),null===(o=i.delegate)||void 0===o||o.cvDidSelectSection(i,t,n)}))},t.prototype.getCellAt=function(e){var t=(0,d.default)('[UICVID="'.concat(this.id,'"][UICVSection="').concat(e.section,'"][UICVItem="').concat(e.item,'"][UICVCellType="cell"]')).attr("UICVViewId");if(null!=t)return this.getView(t)},t.prototype.getCellForSectionAt=function(e,t){var n=(0,d.default)('[UICVID="'.concat(this.id,'"][UICVSection="').concat(e,'"][UICVCellType="').concat(t,'"]')).attr("UICVViewId");if(null!=n)return this.getView(n)},t.prototype.designUpdated=function(){var e,t;null!=this.layoutDesign&&(0,d.default)("[".concat(null!==(t=null===(e=this.grid)||void 0===e?void 0:e.getTag())&&void 0!==t?t:"","]")).css(this.layoutDesign.getStyle(this))},t.prototype.finish=function(){this.layoutDesign=void 0,this.delegate=void 0,this.dataSourceDelegate=void 0,e.prototype.finish.call(this)},t}(o.default);t.UICollectionView=c}.apply(t,i),void 0===o||(e.exports=o)},4542:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(19755)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UICollectionViewCell=void 0,n=r(n),i=r(i);var o=function(e){function t(t){return e.call(this,window.mApp.utils.makeId(),t)||this}return s(t,e),t.prototype.htmlInsertionInterceptor=function(t){var n,i,o,l,s=e.prototype.htmlInsertionInterceptor.call(this,t);if(null!=s)return s.setAttribute("UICVSection","".concat(null!==(i=null===(n=this.indexPath)||void 0===n?void 0:n.section)&&void 0!==i?i:"")),s.setAttribute("UICVItem","".concat(null!==(l=null===(o=this.indexPath)||void 0===o?void 0:o.item)&&void 0!==l?l:"")),s.setAttribute("UICVID",this.collectionViewId),s.setAttribute("UICVViewId",this.id),s.setAttribute("UICVCellType","cell"),s},t.prototype.cellWasReloadedWithoutRedrawing=function(){},t.prototype.removeDelegatesFromCell=function(){(0,i.default)("[".concat(this.id,"]")).off()},t.prototype.finish=function(){this.removeDelegatesFromCell(),this.indexPath=void 0,e.prototype.finish.call(this)},t}(n.default);t.UICollectionViewCell=o}.apply(t,i),void 0===o||(e.exports=o)},87857:(e,t,n)=>{var i,o;i=[n,t,n(72593)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UICollectionViewLayoutDesign=void 0;var i=function(){function e(){this.gap="0rem",this.padding="0rem",this.flow=n.UICollectionViewFlowEnum.vertical,this.columnsTemplate="1fr",this.rowsTemplate="1fr",this.overflowX="auto",this.overflowY="auto",this.justifyContent="",this.width="",this.height="",this.backgroundColor="",this.extraStyles={}}return e.prototype.getStyle=function(e){var t,n,i={display:"grid",gap:this.gap,padding:this.padding,"grid-auto-flow":this.flow,"grid-template-columns":null!==(t=this.columnsTemplate)&&void 0!==t?t:"","grid-template-rows":null!==(n=this.rowsTemplate)&&void 0!==n?n:"","justify-content":this.justifyContent,width:this.width,height:this.height,"overflow-x":this.overflowX,"overflow-y":this.overflowY,"max-height":"100%","max-width":"100%","background-color":this.backgroundColor};return Object.entries(this.extraStyles).forEach((function(e){var t=e[0],n=e[1];i[t]=n})),i},e}();t.UICollectionViewLayoutDesign=i}.apply(t,i),void 0===o||(e.exports=o)},39020:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});i=[n,t,n(4542)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UICollectionVievSectionCell=void 0;var i=function(e){function t(t){return e.call(this,t)||this}return s(t,e),t.prototype.htmlInsertionInterceptor=function(t){var n=e.prototype.htmlInsertionInterceptor.call(this,t);if(null!=n)return n.setAttribute("UICVCellType","".concat(this.sectionCellType)),n},t.prototype.finish=function(){this.removeDelegatesFromCell(),e.prototype.finish.call(this)},t}(n.UICollectionViewCell);t.UICollectionVievSectionCell=i}.apply(t,i),void 0===o||(e.exports=o)},72593:(e,t,n)=>{var i;i=function(e,t){"use strict";var n,i;Object.defineProperty(t,"__esModule",{value:!0}),t.UICollectionViewSectionCellType=t.UICollectionViewFlowEnum=void 0,(i=t.UICollectionViewFlowEnum||(t.UICollectionViewFlowEnum={})).vertical="row",i.horizontal="column",(n=t.UICollectionViewSectionCellType||(t.UICollectionViewSectionCellType={})).header="header",n.footer="footer"}.apply(t,[n,t]),void 0===i||(e.exports=i)},77021:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(85446),n(43369),n(80661),n(34580),n(11166),n(19755),n(3693)],o=function(e,t,n,i,o,l,a,d,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DropDown=void 0,a=r(a),d=r(d);var u=function(e){function t(t){var n=e.call(this)||this;return n.cells=[],n.individualCallbacks={},n.bgView="",n.collectionViewStyles=["bg-secondary","shadow"],n.callback=t,n}return s(t,e),t.prototype.insertInto=function(t){var n=this,i=new a.default(window.mApp.utils.makeId(),c.basicHtml);return this.bgView=i.id,i.viewWasInsertedCallback=function(e){(0,d.default)("[".concat(e,"]")).on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),n.finish(),i.finish()}))},i.insertInto(new l.InsertedViewData(void 0,"body")),i.clipToParent(),e.prototype.insertInto.call(this,t)},t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this)},t.prototype.addCell=function(e,t){this.cells.push(e),null!=t&&(this.individualCallbacks[this.cells.length-1]=t)},t.prototype.setFrameAndShow=function(){var t=this;e.prototype.setFrameAndShow.call(this);var o=new i.UICollectionView("dropDownCV".concat(window.mApp.utils.makeId(15)),void 0,n.viewDefaultCollectionViewView);this.collectionView=o.id,this.insertNewView(new l.InsertedViewData(o.id,void 0)),o.clipToParent(),this.alignContent(),this.styleCollectionView(),o.dataSourceDelegate=this,o.delegate=this,o.reloadData();var s=o.getSize();(0,d.default)("body").off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),(e.clientX<t.frame.x||e.clientX>t.frame.x+s.width||e.clientY<t.frame.y||e.clientY>t.frame.y+s.height)&&t.finish()}))},t.prototype.alignContent=function(){var e=this.getView(this.collectionView);this.direction==o.ElemModalDirection.bottom&&e.style({},"[".concat(e.grid.getTag(),"]")),this.direction==o.ElemModalDirection.top&&e.style({position:"absolute",bottom:"0px",left:"0px",right:"0px"},"[".concat(e.grid.getTag(),"]"))},t.prototype.styleCollectionView=function(){var e=this.getView(this.collectionView);(0,d.default)("[".concat(e.id,"] [").concat(e.grid.getTag(),"]")).addClass(this.collectionViewStyles)},t.prototype.cvNumberOfItemsInSection=function(e,t){return this.cells.length},t.prototype.cvNumberOfSections=function(e){return 1},t.prototype.cvCellForItemAt=function(e,t){return this.cells[t.item]},t.prototype.cvCellForSectionAt=function(e,t,n){},t.prototype.getSeparator=function(e,t){},t.prototype.cvDidSelectItem=function(e,t){var n,i,o;null==this.individualCallbacks[t.item]?null===(o=this.callback)||void 0===o||o.call(this,t.item,this):null===(i=(n=this.individualCallbacks)[t.item])||void 0===i||i.call(n,t.item,this)},t.prototype.cvDidSelectSection=function(e,t,n){},t.prototype.finish=function(){var t,n=this;null===(t=this.getView(this.bgView))||void 0===t||t.finish(),(0,d.default)("body").off("click"),this.cells=[],this.callback=void 0,Object.keys(this.individualCallbacks).forEach((function(e){null!=window.mApp.utils.getNumberFromString(e)&&delete n.individualCallbacks[Number(e)]})),e.prototype.finish.call(this)},t}(o.ElementModalView);t.DropDown=u}.apply(t,i),void 0===o||(e.exports=o)},5219:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(58509),n(4542),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultDropDownCell=void 0,o=r(o);var l=function(e){function t(t,i,o,l,s){void 0===t&&(t=void 0),void 0===i&&(i=void 0),void 0===o&&(o=void 0),void 0===l&&(l=!1),void 0===s&&(s=n.viewDefaultDropDownCell);var r=e.call(this,s)||this;return r.title=null!=t?t:"",r}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){return e.prototype.setUp.call(this),(0,o.default)("[".concat(this.id,"] .title")).text(this.title),this},t}(i.UICollectionViewCell);t.DefaultDropDownCell=l}.apply(t,i),void 0===o||(e.exports=o)},80661:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11524),n(34580),n(11166)],o=function(e,t,n,i,o){"use strict";var l,a;Object.defineProperty(t,"__esModule",{value:!0}),t.ElementModalView=t.ElemModalDirection=t.ElementModalPos=void 0,o=r(o),function(e){e[e.left=0]="left",e[e.right=1]="right",e[e.center=2]="center",e[e.auto=3]="auto"}(l=t.ElementModalPos||(t.ElementModalPos={})),function(e){e[e.bottom=0]="bottom",e[e.top=1]="top",e[e.auto=2]="auto"}(a=t.ElemModalDirection||(t.ElemModalDirection={}));var d=function(e){function t(){var t=e.call(this,window.mApp.utils.makeId(15),n.viewDefaultElementModal)||this;return t.frame={x:0,y:0,height:0,width:0},t.insertViewsDefault=new i.InsertedViewData(t.id,"$idviews"),t}return s(t,e),t.prototype.setUpWithElement=function(e,t,n,i,o,s){void 0===t&&(t=e),void 0===n&&(n=l.auto),void 0===i&&(i=a.auto),this.generalSetUp(e,t,n,i,window.mApp.utils.getFrameFromElement(o),s)},t.prototype.setUpWithFrame=function(e,t,n,i,o,s){void 0===t&&(t=e),void 0===n&&(n=l.auto),void 0===i&&(i=a.auto)},t.prototype.setUpWithPoint=function(e,t,n,i,o,s){void 0===t&&(t=e),void 0===n&&(n=l.auto),void 0===i&&(i=a.auto)},t.prototype.generalSetUp=function(e,t,n,i,o,s){void 0===t&&(t=e),void 0===n&&(n=l.auto),void 0===i&&(i=a.auto),this.gap=e,this.margin=t,this.position=n,this.direction=i,this.elFrame=o;var r=this.elFrame.width;this.frame.width=null!=s?s:r,this.findAutoPositions(),this.setFrameAndShow()},t.prototype.findAutoPositions=function(){var e=window.mApp.utils.getCenter(this.elFrame),t=window.mApp.utils.windowSize();this.position==l.auto&&(e.x>t.width/2?this.position=l.left:this.position=l.right),this.direction==a.auto&&(e.y>t.height/2?this.direction=a.top:this.direction=a.bottom)},t.prototype.setFrameAndShow=function(){var e=window.mApp.utils.windowSize();this.position==l.left&&this.direction==a.bottom&&(this.frame.height=e.height-this.elFrame.y-this.margin,this.frame.x=this.elFrame.x-this.frame.width-this.gap,this.frame.y=this.elFrame.y),this.position==l.left&&this.direction==a.top&&(this.frame.height=this.elFrame.y+this.elFrame.height-this.margin,this.frame.x=this.elFrame.x-this.gap-this.frame.width,this.frame.y=this.margin),this.position==l.right&&this.direction==a.bottom&&(this.frame.height=e.height-this.margin-this.elFrame.y,this.frame.x=this.elFrame.x+this.elFrame.width+this.gap,this.frame.y=this.elFrame.y),this.position==l.right&&this.direction==a.top&&(this.frame.height=this.elFrame.y+this.elFrame.height-this.margin,this.frame.x=this.elFrame.x+this.elFrame.width+this.gap,this.frame.y=this.margin),this.position==l.center&&this.direction==a.bottom&&(this.frame.height=e.height-(this.elFrame.y+this.elFrame.height+this.gap+this.margin),this.frame.x=this.elFrame.x+this.elFrame.width/2-this.frame.width/2,this.frame.y=this.elFrame.y+this.elFrame.height+this.gap),this.position==l.center&&this.direction==a.top&&(this.frame.height=this.elFrame.y-this.gap-this.margin,this.frame.x=this.elFrame.x+this.elFrame.width/2-this.frame.width/2,this.frame.y=this.margin),this.setConstraints({left:"".concat(this.frame.x,"px"),top:"".concat(this.frame.y,"px"),height:"".concat(this.frame.height,"px"),width:"".concat(this.frame.width,"px")})},t.prototype.finish=function(){e.prototype.finish.call(this)},t}(o.default);t.ElementModalView=d}.apply(t,i),void 0===o||(e.exports=o)},35281:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(19755)],o=function(e,t,n){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.ResizingStatus=void 0,n=l(n),function(e){e[e.started=0]="started",e[e.resizing=1]="resizing",e[e.finished=2]="finished"}(i=t.ResizingStatus||(t.ResizingStatus={}));var o=function(){function e(e){this.isActive=!0,this.insertedIntoData=e,this.setUpResizing()}return e.prototype.setUpResizing=function(){var e=this,t=this.insertedIntoData.getTag();return(0,n.default)("[".concat(t,"]")).on("mousedown",(function(t){e.isActive&&e.resizingHandler(i.started,t)})),!0},e.prototype.resizingHandler=function(e,t){var o,l=this;switch(null==this.resizeData&&e!=i.started?this.resizeData={status:i.started}:null!=this.resizeData&&(this.resizeData.status=e),e){case i.started:return(0,n.default)("body").on("mouseup",(function(e){l.resizingHandler(i.finished,e)})),void(0,n.default)("body").on("mousemove",(function(e){l.resizingHandler(i.resizing,e)}));case i.resizing:return void this.resizeMiddleMan(t,this.resizeData);case i.finished:return null!=(null===(o=this.resizeData)||void 0===o?void 0:o.status)&&(this.resizeData.status=i.finished),this.resize(t,this.resizeData),this.resizeData=void 0,(0,n.default)("body").off("mousemove"),void(0,n.default)("body").off("mouseup")}},e.prototype.resizeMiddleMan=function(e,t){var n;if(e.preventDefault(),null!=t&&null!=e.clientX&&null!=e.clientY){var o=t;if(t.status==i.started?(o.startPosition={x:e.clientX,y:e.clientY},o.currentPosition={x:e.clientX,y:e.clientY},o.previousPosition={x:e.clientX,y:e.clientY},o.positionFromOrigin={x:e.clientX-o.startPosition.x,y:e.clientY-o.startPosition.y}):(o.previousPosition=o.currentPosition,o.currentPosition={x:e.clientX,y:e.clientY},o.positionFromOrigin={x:e.clientX-o.startPosition.x,y:e.clientY-o.startPosition.y}),this.resizeData=o,0==(null===(n=e.originalEvent)||void 0===n?void 0:n.buttons)&&this.resizeData.status==i.resizing)return this.resizeData.status=i.finished,void this.resizingHandler(this.resizeData.status,e);this.resize(e,this.resizeData)}},e.prototype.resize=function(e,t){var n;null===(n=this.interface)||void 0===n||n.grabberResize(e,t)},e.prototype.finished=function(){var e,t,i=this.insertedIntoData.getTag();(0,n.default)("[".concat(i,"grabber]")).off("mousedown"),(0,n.default)("body").off("mousemove"),(0,n.default)("body").off("mouseup"),(0,n.default)("[".concat(i,"]")).off(),null!=(null===(e=this.interface)||void 0===e?void 0:e.grabberFinished)&&(null===(t=this.interface)||void 0===t||t.grabberFinished()),this.interface=void 0},e}();t.default=o}.apply(t,i),void 0===o||(e.exports=o)},9303:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(19755),n(36465)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n=r(n),i=r(i);var l=function(e){function t(t,n){void 0===n&&(n=o.viewBaseGridHtml);var i=e.call(this,t,n)||this;return i.gridDistribution=[[]],i.gridElements=[],i.gridDesing={columns:[],rows:[]},i}return s(t,e),t.prototype.setDistribution=function(e){this.gridDistribution=e;for(var t={},n=1;n!=e.length+1;n++)for(var i=1;i!=e[n-1].length+1;i++){var o,l=e[n-1][i-1];null!=window.mApp.views.get(l)&&(null==t[l]?(o={column:{from:i,to:i},row:{from:n,to:n}},t[l]=o):((o=t[l]).column.to=i+1,o.row.to=n+1,t[l]=o))}for(var s=0,r=Object.entries(t);s<r.length;s++){var a=r[s],d=a[0],c=a[1];window.mApp.views.get(d).setPostion(c)}for(var u=0,p=this.gridElements;u<p.length;u++){var h=p[u],f=window.mApp.views.get(h);null==t[h]?null==f||f.isHidden(!0):null==f||f.isHidden(!1)}},t.prototype.setDesign=function(e){this.gridDesing=e;var t=e.columns.map((function(e){return"".concat(e.size).concat(e.magnitude)})).join(" "),n=e.rows.map((function(e){return"".concat(e.size).concat(e.magnitude)})).join(" ");(0,i.default)("[".concat(this.id,"]")).css({"grid-template-columns":"".concat(t),"grid-template-rows":"".concat(n)})},t}(n.default);t.default=l}.apply(t,i),void 0===o||(e.exports=o)},97321:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(37535),n(34580),n(3693),n(19755)],o=function(e,t,n,i,o,l,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GridElementWithView=void 0,n=r(n),a=r(a);var d=function(e){function t(t,n){return void 0===t&&(t=window.mApp.utils.makeId(15)),void 0===n&&(n=i.viewBaseGridElement),e.call(this,t,n)||this}return s(t,e),t.prototype.setUp=function(){return e.prototype.setUp.call(this),this},t.prototype.setPostion=function(e){this.position=e,(0,a.default)("[".concat(this.id,"]")).css({"grid-column":"".concat(e.column.from," / ").concat(e.column.to),"grid-row":"".concat(e.row.from," / ").concat(e.row.to)})},t.prototype.open=function(){},t.prototype.close=function(){},t.prototype.isClosed=function(){var e=this.getSize();return 0==e.height||0==e.width},t.prototype.finish=function(){e.prototype.finish.call(this)},t}(n.default);t.default=d;var c=function(e){function t(t,n,i){void 0===i&&(i=l.basicHtml);var o=e.call(this,n,i)||this;return o.addView=t,o.setInsertDefaultViews(),o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){e.prototype.setUp.call(this);var t=this.getView(this.addView);return this.insertNewView(new o.InsertedViewData(this.addView,void 0)),null==t||t.clipToParent(),this},t}(d);t.GridElementWithView=c}.apply(t,i),void 0===o||(e.exports=o)},69243:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GridElementDesign=void 0;var n=function(){function e(e,t,n,i,o){void 0===i&&(i=void 0),void 0===o&&(o={min:40,max:999999}),this.limitBounds={min:0,max:999999},this.size=e,this.magnitude=t,this.isResizable=n,this.limitBounds=o,this.lockSizes=i}return e.prototype.isAuto=function(){return"auto"==this.size},e.prototype.addPx=function(e,t,n,i){var o=0;if(this.isAuto()){o=n;for(var l=0,s=t;l<s.length;l++){var r=s[l];"auto"!=r.size&&(o-=Number(r.size))}}else o=Number(this.size)+e;if(o>=this.limitBounds.max&&(o=this.limitBounds.max,this.isAuto()))return!1;if(o<=this.limitBounds.min&&(o=this.limitBounds.min,this.isAuto()&&e<0))return!1;if(null!=this.lockSizes)for(var a=0,d=this.lockSizes;a<d.length;a++){var c=d[a];if(o>=c.range.from&&o<=c.range.to){if(this.isAuto())return!1;null!=c.resize&&(o=c.resize);break}}if("auto"!=this.size){if(i==o)return!1;this.size="".concat(o)}return!0},e}();t.GridElementDesign=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},73802:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(62069),n(74759),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i=r(i),o=r(o);var l=function(e){function t(t,i,o){return void 0===i&&(i=n.viewBaseGridHSeparator),void 0===o&&(o=!0),e.call(this,t,i,o)||this}return s(t,e),t.prototype.setCursorResize=function(){(0,o.default)("*").css("cursor","ns-resize")},t.prototype.getIndexSeparator=function(){if(null!=this.position)return this.position.row.from-1},t.prototype.getSpecificGridDesign=function(){var e=this.insertedInto.getView();if(null!=e.gridDesing)return e.gridDesing.rows},t.prototype.insertSpecificDesign=function(e){var t=this.insertedInto.getView();return null!=t.gridDesing&&(t.gridDesing.rows=e,t.setDesign(t.gridDesing),!0)},t.prototype.getSepcificGrabberPos=function(e){return e.y},t.prototype.getSpecificGridSize=function(){return this.getGridSize().height},t}(i.default);t.default=l}.apply(t,i),void 0===o||(e.exports=o)},74759:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,o)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),d=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(35281),n(34580),n(97321),n(19755)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n=d(n),o=c(o),l=c(l);var r=function(e){function t(t,n,i){void 0===i&&(i=!0);var o=e.call(this,t,n)||this;return o.canResize=i,o}return s(t,e),t.prototype.setCanResize=function(e){null!=this.mGrabberObserver&&(this.mGrabberObserver.isActive=e,this.mGrabberObserver.isActive?((0,l.default)("[".concat(this.id,"grabber]")).css({opacity:"1"}),(0,l.default)("[".concat(this.id,"grabber]")).css({opacity:"1"}).hasClass("cursor")||(0,l.default)("[".concat(this.id,"grabber]")).addClass("cursor")):(0,l.default)("[".concat(this.id,"grabber]")).css({opacity:"0"}).removeClass("cursor"))},t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.mGrabberObserver=new n.default(new i.InsertedViewData(this.id,"$idgrabber")),this.mGrabberObserver.interface=this,this.setCanResize(this.canResize)},t.prototype.setUp=function(){return e.prototype.setUp.call(this),this},t.prototype.finish=function(){e.prototype.finish.call(this)},t.prototype.finished=function(){var e;null===(e=this.mGrabberObserver)||void 0===e||e.finished(),this.mGrabberObserver=void 0},t.prototype.getIndexSeparator=function(){this.position},t.prototype.getSpecificGridDesign=function(){},t.prototype.getSepcificGrabberPos=function(e){return e.x},t.prototype.insertSpecificDesign=function(e){},t.prototype.insertDesing=function(e){var t=this.insertedInto.getView();return null!=t.gridDesing&&(t.gridDesing=e,t.setDesign(t.gridDesing),!0)},t.prototype.getGridSize=function(){var e={height:0,width:0},t=(0,l.default)("[".concat(this.insertedInto.view,"]"));if(null!=t){var n=t.outerHeight(),i=t.outerWidth();null!=n&&(e.height=n),null!=i&&(e.width=i)}return e},t.prototype.getSpecificGridSize=function(){return this.getGridSize().height},t.prototype.setCursorResize=function(){(0,l.default)("*").css("cursor","")},t.prototype.removeCursorResize=function(){(0,l.default)("*").css("cursor","")},t.prototype.grabberResize=function(e,t){var i,o;if(null!=t){t.status==n.ResizingStatus.started&&(this.gridDesign=null===(i=this.getSpecificGridDesign())||void 0===i?void 0:i.map((function(e){return window.mApp.utils.deepCopy(e)})),(0,l.default)("[".concat(this.id,"grabber] > div")).addClass("separator-hover-clicked"),(0,l.default)("[".concat(this.id,"grabber] > div")).removeClass("separator-hover"),this.setCursorResize()),t.status==n.ResizingStatus.finished&&((0,l.default)("[".concat(this.id,"grabber] > div")).removeClass("separator-hover-clicked"),(0,l.default)("[".concat(this.id,"grabber] > div")).addClass("separator-hover"),this.removeCursorResize());var s=[];null===(o=this.gridDesign)||void 0===o||o.forEach((function(e){s.push(window.mApp.utils.deepCopy(e))}));var r=this.getIndexSeparator(),a=null==t?void 0:t.positionFromOrigin;if(null!=s&&null!=r&&null!=a){var d=this.getSepcificGrabberPos(a),c=r-1,u=r+1;d>0&&(u=r-1,c=r+1),d<0&&(u=r+1,c=r-1);var p=s[u],h=s[c],f=this.getSpecificGridSize(),v=this.getSpecificGridDesign();if(null!=v){var g=p.addPx(this.getPositiveFromNumber(d),s,f,Number(v[u].size));h.addPx(this.getNegativeFromNumber(d),s,f,Number(v[c].size))&&g&&this.insertSpecificDesign(s)}}}},t.prototype.getPositiveFromNumber=function(e){return e<0?-1*e:e},t.prototype.getNegativeFromNumber=function(e){return e>0?-1*e:e},t}(o.default);t.default=r}.apply(t,i),void 0===o||(e.exports=o)},32614:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(62069),n(74759),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i=r(i),o=r(o);var l=function(e){function t(t,i,o){return void 0===i&&(i=n.viewBaseGridVSeparator),void 0===o&&(o=!0),e.call(this,t,i,o)||this}return s(t,e),t.prototype.setCursorResize=function(){(0,o.default)("*").css("cursor","ew-resize")},t.prototype.getIndexSeparator=function(){if(null!=this.position)return this.position.column.from-1},t.prototype.getSpecificGridDesign=function(){var e=this.insertedInto.getView();if(null!=e.gridDesing)return e.gridDesing.columns},t.prototype.insertSpecificDesign=function(e){var t=this.insertedInto.getView();return null!=t.gridDesing&&(t.gridDesing.columns=e,t.setDesign(t.gridDesing),!0)},t.prototype.getSepcificGrabberPos=function(e){return e.x},t.prototype.getSpecificGridSize=function(){return this.getGridSize().width},t}(i.default);t.default=l}.apply(t,i),void 0===o||(e.exports=o)},32115:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(19755)],o=function(e,t,n){"use strict";var i;Object.defineProperty(t,"__esModule",{value:!0}),t.keyCodesManager=t.KeyShortcuts=void 0,n=l(n),function(e){e.executeModule="Shift Alt Enter"}(i=t.KeyShortcuts||(t.KeyShortcuts={}));var o=function(){function e(){var e=this;this.delegates={},this.shortcouts={checkKeys:[],keysStatus:{}},this.setShortcouts(),(0,n.default)(document).on("keyup",(function(t){e.updateShortcouts(t.key,!1),Object.values(e.delegates).forEach((function(e){var n;null===(n=e.keyUp)||void 0===n||n.call(e,t.key)}))})),(0,n.default)(document).on("keydown",(function(t){e.updateShortcouts(t.key,!0),e.lookForShortcouts(t.key),Object.values(e.delegates).forEach((function(e){var n;null===(n=e.keyDown)||void 0===n||n.call(e,t.key)}))}))}return e.prototype.updateShortcouts=function(e,t){this.shortcouts.checkKeys.includes(e)&&(this.shortcouts.keysStatus[e].isDown=t)},e.prototype.setShortcouts=function(){var e=this;console.log(Object.values(i)),Object.values(i).forEach((function(t){t.split(" ").forEach((function(t){e.shortcouts.checkKeys.includes(t)||(e.shortcouts.checkKeys.push(t),e.shortcouts.keysStatus[t]={keyName:t,isDown:!1,shortCuts:[]})}))})),console.log(Object.values(i)),Object.values(i).forEach((function(t){var n=t.split(" ");n.forEach((function(i){e.shortcouts.keysStatus[i].shortCuts.push({id:t,keys:n})}))})),console.log(this.shortcouts)},e.prototype.lookForShortcouts=function(e){if(this.shortcouts.keysStatus.Shift.isDown&&this.shortcouts.checkKeys.includes(e))for(var t=function(e){for(var t=!0,i=0,o=e.keys;i<o.length;i++){var l=o[i];if(!n.shortcouts.keysStatus[l].isDown){t=!1;break}}if(t)return Object.values(n.delegates).forEach((function(t){var n;null===(n=t.keyCombinationExecuted)||void 0===n||n.call(t,e.id)})),{value:void 0}},n=this,i=0,o=this.shortcouts.keysStatus[e].shortCuts;i<o.length;i++){var l=t(o[i]);if("object"==typeof l)return l.value}},e.shared=new e,e}();t.keyCodesManager=o}.apply(t,i),void 0===o||(e.exports=o)},2360:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(48144),n(34580),n(11166),n(94527)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MenuSelctor=void 0;var a=function(e){function t(t,o,s,r){void 0===r&&(r=n.viewDefaultMenuSelector);var a=e.call(this,t,r)||this;return a.cellsHolderId="",a.viewsHolderId="",a.menuViews=[],a.layout=new l.MenuSelectorLayout,a.menuViews=o,null==s&&o.length>0&&(a.selectedView=o[0]),a.insertViewsDefault=new i.InsertedViewData(a.id,"$idviews"),a}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){return e.prototype.setUp.call(this),this.setUpCellsHolder(),this.setUpViewsHolder(),this},t.prototype.setUpCellsHolder=function(){var e=this.layout.getCellsHolderCollectionView();this.cellsHolderId=e.id,e.delegate=this,e.dataSourceDelegate=this,this.insertNewView(new i.InsertedViewData(e.id)),this.layout.styleCellsHolder(e),e.setConstraints(this.layout.getCellsHolderConstraints()),e.reloadData()},t.prototype.setUpViewsHolder=function(){var e=this.layout.getViewsHolder(this.menuViews);this.viewsHolderId=e.id,this.insertNewView(new i.InsertedViewData(e.id)),e.setConstraints(this.layout.getViewsHolderConstraints())},t.prototype.selectByViewId=function(e){var t;this.selectedView=e,null===(t=this.interface)||void 0===t||t.menuSelectorWasSelected(e);var n=this.getView(this.viewsHolderId);null==n||n.showView(this.selectedView),this.getView(this.cellsHolderId).reloadData()},t.prototype.setViews=function(e){for(var t=this,n=window.mApp.utils.deepCopy(e),i=[],o=0,l=this.menuViews;o<l.length;o++){var s=l[o];e.includes(s)?window.mApp.utils.deleteFromArray(n.indexOf(s),n):i.push(s)}n.forEach((function(e){t.addView(e,!1)})),i.forEach((function(e){t.removeView(e,!1)})),this.reloadData()},t.prototype.addView=function(e,t){if(void 0===t&&(t=!0),!this.menuViews.includes(e)){var n=this.getView(this.viewsHolderId);null!=n&&(n.addView(e),this.menuViews.push(e),t&&this.reloadData())}},t.prototype.removeView=function(e,t){if(void 0===t&&(t=!0),this.menuViews.includes(e)){var n=this.getView(this.viewsHolderId);null!=n&&(n.removeView(e),window.mApp.utils.deleteFromArray(this.menuViews.indexOf(e),this.menuViews),t&&this.reloadData())}},t.prototype.reloadData=function(){this.selectByViewId(this.selectedView)},t.prototype.reloadViewNames=function(){this.getView(this.cellsHolderId).updateCellsWithoutRedrawing()},t.prototype.selectByViewName=function(e){var t;console.log(e);for(var n=0,i=this.menuViews;n<i.length;n++){var o=i[n],l=this.getView(o);if(null!=l&&null!==(t=e==l.viewName)&&void 0!==t&&t)return void this.selectByViewId(o)}},t.prototype.cvNumberOfItemsInSection=function(e,t){return this.menuViews.length},t.prototype.cvNumberOfSections=function(e){return 1},t.prototype.cvCellForItemAt=function(e,t){return this.layout.getCell(e,t,this.menuViews,this.menuViews[t.item]==this.selectedView)},t.prototype.cvCellForSectionAt=function(e,t,n){},t.prototype.cvDidSelectItem=function(e,t){var n=this.menuViews[t.item];this.selectedView!=n&&this.selectByViewId(n)},t.prototype.cvDidSelectSection=function(e,t,n){console.log(t)},t.prototype.finish=function(){this.interface=void 0,e.prototype.finish.call(this)},t}((o=r(o)).default);t.MenuSelctor=a}.apply(t,i),void 0===o||(e.exports=o)},22738:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(19755)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleSelectorCell=void 0,i=r(i);var o=function(e){function t(t,n,i,o,l){var s=e.call(this,l)||this;return s.selected=!1,s.menuSelectorViewId=i,s.selected=o,s}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasCreated.call(this),this.setUp()},t.prototype.setUp=function(){return e.prototype.setUp.call(this),this.updateTitle(),this.selected&&(0,i.default)("[".concat(this.id,"]")).addClass("selected"),this},t.prototype.updateTitle=function(){var e,t,n=null!==(t=null===(e=this.getView(this.menuSelectorViewId))||void 0===e?void 0:e.viewName)&&void 0!==t?t:"";""==n&&(n="empty"),(0,i.default)("[".concat(this.id,"] .one-line")).text(n)},t.prototype.cellWasReloadedWithoutRedrawing=function(){this.updateTitle()},t}(n.UICollectionViewCell);t.ModuleSelectorCell=o}.apply(t,i),void 0===o||(e.exports=o)},94527:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});i=[n,t,n(48144),n(43369),n(72593),n(55353),n(22738)],o=function(e,t,n,i,o,l,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MenuSelectorLayout2=t.MenuSelectorLayout=void 0;var a=function(){function e(){}return e.prototype.getCellsHolderCollectionView=function(){var e=new i.UICollectionView("menuSelector".concat(window.mApp.utils.makeId(15)));return null==e.layoutDesign||(e.layoutDesign.flow=o.UICollectionViewFlowEnum.horizontal,e.layoutDesign.columnsTemplate="auto",e.layoutDesign.justifyContent="start",e.layoutDesign.height="100%",e.layoutDesign.width="100%",e.layoutDesign.overflowY="visible",e.layoutDesign.overflowX="visible",e.layoutDesign.extraStyles={display:"flex","flex-flow":"row nowrap"}),e},e.prototype.getCellsHolderConstraints=function(){return{top:"0px",right:"0px",left:"0px",height:"40px"}},e.prototype.getViewsHolder=function(e){return new l.ViewsHolder("cvcell"+window.mApp.utils.makeId(15),e,void 0,void 0)},e.prototype.getViewsHolderConstraints=function(){return{top:"40px",right:"0px",bottom:"0px",left:"0px"}},e.prototype.getCell=function(e,t,i,o){return new r.ModuleSelectorCell(t,e.id,i[t.item],o,n.viewDefaultMenuSelectorCell)},e.prototype.styleViewsHolder=function(e){},e.prototype.styleCellsHolder=function(e){e.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)"})},e.prototype.getView=function(e){return window.mApp.views.get(e)},e}();t.MenuSelectorLayout=a;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.styleCellsHolder=function(e){e.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)","padding-left":"0.5rem"})},t.prototype.getCell=function(e,t,i,o){return new r.ModuleSelectorCell(t,e.id,i[t.item],o,n.viewDefaultMenuSelectorCell2)},t.prototype.getCellsHolderConstraints=function(){return{top:"0px",right:"0px",left:"0px",height:"40px"}},t.prototype.getViewsHolderConstraints=function(){return{top:"40px",right:"0px",bottom:"0px",left:"0px"}},t}(a);t.MenuSelectorLayout2=d}.apply(t,i),void 0===o||(e.exports=o)},51199:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AutoSave=void 0;var n=function(){function e(){this.stopAutoSave=!1}return e.prototype.start=function(){var e=this;setInterval((function(){null==window.mApp.moduleManager.moduleObject||e.stopAutoSave?console.log("falied saving the module."):(console.log("AutoSaving the module."),window.mApp.moduleManager.saveModuleToLocalStorage(),Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach((function(e){var t;return null===(t=e.moduleAutoSaved)||void 0===t?void 0:t.call(e)})))}),3e4)},e.shared=new e,e}();t.AutoSave=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},96393:(e,t,n)=>{var i;i=function(e,t){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleDataTypeEnum=void 0,(n=t.ModuleDataTypeEnum||(t.ModuleDataTypeEnum={})).section="section",n.cell="cell"}.apply(t,[n,t]),void 0===i||(e.exports=i)},72265:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleJavascriptGenerator=void 0;var n=function(){function e(){}return e.prototype.addJsIndicators=function(e){return"/* JAVASCRIPT STARTS */ ".concat(e," /* JAVASCRIPT ENDS */")},e.prototype.generateUpdatedJs=function(e,t,n,i,o){if(!n&&!i&&!o)return e;var l=e,s="\n            function setModuleCreatorSettings() {\n    \n                let object = document.querySelector('#ketsu-final-data').textContent;\n                if (object == undefined) {return;}\n                let parsedObject = JSON.parse(object);\n                if (parsedObject == undefined) {return;}\n                \n                if (".concat(n,") {\n                let updatedRequest = atob(`").concat(t,"`);\n                    if (updatedRequest != '') {\n                        parsedObject['request'] =  JSON.parse(updatedRequest);\n                    }\n                }\n        \n                if (").concat(i,") {\n                    parsedObject['javascriptConfig']['removeJavascript'] = true;\n                    parsedObject['javascriptConfig']['loadInWebView'] = false;\n                }\n        \n                if (").concat(o,") {\n                    parsedObject['javascriptConfig']['loadInWebView'] = true;\n                    parsedObject['javascriptConfig']['removeJavascript'] = false;\n                }\n        \n                document.querySelector('#ketsu-final-data').textContent = JSON.stringify(parsedObject);\n\n                if (typeof KETSU_ASYNC === 'undefined') {\n                    return;\n                }\n\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n\n            }\n\n\n        ");return e.includes("window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');")?l=s+(l=l.replace(/window.*EXECUTE_KETSU_ASYNC.+\).*;/g,"\n            \n            setModuleCreatorSettings();\n            \n            ")):(l=s+l,l+="\n        \n        setModuleCreatorSettings();\n        \n        ")},e.prototype.setDebug=function(e){return"\n        try {\n\n            ".concat(e,"\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        ")},e.prototype.setAsync=function(e){return" \n\n        var KETSU_ASYNC = true;\n        \n        "+e},e}();t.ModuleJavascriptGenerator=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},60323:(e,t,n)=>{var i,o;i=[n,t,n(96393)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleData=void 0;var i=function(){function e(e,t){this.jsonId="",this.sections=[],this.jsonPath=e,this.options=t,this.classType=n.ModuleDataTypeEnum.cell}return e.prototype.getSection=function(){return window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length-1])},e.prototype.setUp=function(e){return this.jsonId=this.getId(e),window.mApp.moduleManager.moduleMap.has(this.jsonId)||window.mApp.moduleManager.moduleMap.set(this.jsonId,this),this},e.prototype.isCellHidden=function(){return 0!=Object.keys(this.getOptions().sectionsHidden).length},e.prototype.getObjectIndex=function(){return window.mApp.utils.getNumberFromString(this.jsonPath[this.jsonPath.length-1])},e.prototype.checkIfIdExist=function(e){var t;return t=window.mApp.utils.getObjectFromPath(this.jsonPath,e),this.jsonId in t},e.prototype.getObject=function(){return window.mApp.utils.getObjectFromPath(this.jsonPath,window.mApp.moduleManager.moduleObject)},e.prototype.getId=function(e){var t=this;void 0===e&&(e=window.mApp.moduleManager.moduleObject);var n=e;n=window.mApp.utils.getObjectFromPath(this.jsonPath,e);var i="moduleCreatorId".concat(window.mApp.utils.makeId()),o={path:window.mApp.utils.makeId(5),id:this.jsonPath.join()+this.classType,sectionsHidden:[],options:this.options,cellsHidden:!1},l=this.jsonPath;Array.isArray(n)&&(o.path="".concat(this.jsonPath[this.jsonPath.length-1]),l=window.mApp.utils.deepCopy(this.jsonPath).filter((function(e,n){if(n!=t.jsonPath.length-1)return e})),n=window.mApp.utils.getObjectFromPath(l,e));for(var s=0,r=Object.keys(n);s<r.length;s++){var a=r[s];if(a.includes("moduleCreatorId")&&this.jsonPath.join()+this.classType==n[a].id)return window.mApp.utils.addMissingObjectKeys(n[a],o),a}return this.jsonId in n?this.jsonId:(n[i]=o,i)},e.prototype.getOptions=function(){var e=this,t=window.mApp.moduleManager.moduleObject,n=window.mApp.utils.getObjectFromPath(this.jsonPath,t);if(Array.isArray(n)){var i=window.mApp.utils.deepCopy(this.jsonPath).filter((function(t,n){if(n!=e.jsonPath.length-1)return t}));n=window.mApp.utils.getObjectFromPath(i,t)}return n[this.jsonId]},e.prototype.updatePath=function(e){void 0===e&&(e=window.mApp.moduleManager.moduleObject);var t=!1;""==this.jsonPath[this.jsonPath.length-1]&&(t=!0);var n=window.mApp.utils.getPath(this.jsonId,e),i=window.mApp.utils.getObjectFromPath(n,e);n.pop(),n.push(i.path),null==window.mApp.utils.getObjectFromPath(n,e)&&n.pop(),this.jsonPath=n,t&&this.jsonPath.push(""),this.getOptions().id=this.jsonPath.join()+this.classType},e.prototype.finish=function(e){void 0===e&&(e=this.jsonId);for(var t=window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length-1]),n=window.mApp.moduleManager.moduleObject,i=this.jsonPath,o=n,l=0;l<i.length;l++){var s=i[l];if(l==i.length-1){if(Array.isArray(o)){window.mApp.utils.deleteFromArray(Number(s),o);continue}delete o[s]}else o=o[s]}if(null!=t)for(l=0;l<t.cells.length;l++)if(this.jsonId==t.cells[l].jsonId){window.mApp.utils.deleteFromArray(l,t.cells);break}i=window.mApp.utils.getPath(this.jsonId,window.mApp.moduleManager.moduleObject),o=n;for(var r=0;r>i.length;r++){var a=i[r];i.length-1!=r?o=o[a]:delete o[a]}this.options=void 0,window.mApp.moduleManager.moduleMap.delete(this.jsonId)},e}();t.ModuleData=i}.apply(t,i),void 0===o||(e.exports=o)},78136:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});i=[n,t,n(96393),n(60323)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleSectionData=void 0;var o=function(e){function t(t,i,o){var l=e.call(this,t,o)||this;return l.canModify=!1,l.parsed=!1,l.savedCells=[],l.cells=i,l.classType=n.ModuleDataTypeEnum.section,l}return s(t,e),t.prototype.setUp=function(n){var i,o;e.prototype.setUp.call(this,n);var l=window.mApp.utils.getObjectFromPath(this.jsonPath,n);this.savedCells=window.mApp.utils.deepCopy(this.cells);var s=window.mApp.utils.deepCopy(this.cells).pop()instanceof t;if(this.cells=[],Array.isArray(l)){this.canModify=!0;for(var r=0;r<l.length;r++)(u=window.mApp.utils.deepCopy(this.jsonPath)).push("".concat(r)),s?this.cells.push(this.createSection(u,this.savedCells).setUp(n)):this.cells.push(this.createCell(u).setUp(n))}else for(var a=0,d=this.savedCells;a<d.length;a++){var c=d[a],u=window.mApp.utils.deepCopy(this.jsonPath);for(c instanceof t||(c.options={name:null!==(o=null===(i=this.options)||void 0===i?void 0:i.listName)&&void 0!==o?o:""}),c.sections=window.mApp.utils.deepCopy(this.sections),c.sections.push(this.jsonId),r=0;r<c.jsonPath.length;r++)u[r]!=c.jsonPath[r]&&u.push(c.jsonPath[r]);c.jsonPath=u,this.cells.push(c.setUp(n))}return this.parsed=!0,this},t.prototype.updated=function(e){void 0===e&&(e=window.mApp.moduleManager.moduleObject);var n=window.mApp.utils.getObjectFromPath(this.jsonPath,e),i=window.mApp.utils.deepCopy(this.cells).pop()instanceof t;if(Array.isArray(n))for(var o=0;o<n.length;o++){for(var l=n[o],s=!1,r=0,a=Object.keys(l);r<a.length;r++)a[r].includes("moduleCreator")&&(s=!0);if(!s){var d=window.mApp.utils.deepCopy(this.jsonPath);if(d.push("".concat(o)),i){this.cells.push(this.createSection(d,this.savedCells).setUp(e));break}this.cells.push(this.createCell(d).setUp(e))}}else for(var c=0,u=this.cells;c<u.length;c++){var p=u[c];p instanceof t&&p.updated(e)}},t.prototype.createSection=function(e,n){var i,o,l=new t(e,n,{name:null!==(o=null===(i=this.options)||void 0===i?void 0:i.listName)&&void 0!==o?o:""});return l.sections=window.mApp.utils.deepCopy(this.sections),l.sections.push(this.jsonId),l},t.prototype.createCell=function(e){var t,n,o=new i.ModuleData(e,{name:null!==(n=null===(t=this.options)||void 0===t?void 0:t.listName)&&void 0!==n?n:""});return o.sections=window.mApp.utils.deepCopy(this.sections),o.sections.push(this.jsonId),o},t.prototype.addCell=function(){var e,t,n=this.cells[this.cells.length-1],i=window.mApp.utils.deepCopy(window.mApp.utils.getObjectFromPath(n.jsonPath,window.mApp.moduleManager.moduleObject));null!=(null===(e=null==i?void 0:i.javascriptConfig)||void 0===e?void 0:e.loadInWebView)&&(i.javascriptConfig.loadInWebView=!1),null!=(null===(t=null==i?void 0:i.javascriptConfig)||void 0===t?void 0:t.removeJavascript)&&(i.javascriptConfig.removeJavascript=!1),window.mApp.utils.removeKeysThatMatch("moduleCreator",i);var o=window.mApp.moduleManager.moduleObject;this.jsonPath.forEach((function(e){o=o[e]})),Array.isArray(o)&&o.push(i)},t.prototype.hideCells=function(e,n){var i;void 0===n&&(n=this.jsonId),n==this.jsonId&&null!=(null===(i=this.getOptions())||void 0===i?void 0:i.cellsHidden)&&(this.getOptions().cellsHidden=e);for(var o=0,l=this.cells;o<l.length;o++){var s=l[o],r=s.getOptions().sectionsHidden;s instanceof t&&s.hideCells(e,n),e&&!r.includes(n)?r.push(n):window.mApp.utils.deleteFromArray(r.indexOf(n),r)}console.log(this.getOptions()),console.log(this.jsonPath)},t.prototype.updatePaths=function(e){void 0===e&&(e=window.mApp.moduleManager.moduleObject);for(var n=0,i=this.cells;n<i.length;n++){var o=i[n];o instanceof t&&o.updatePaths(e),o.updatePath(e)}},t.prototype.updateCells=function(){},t.prototype.getAllCells=function(){for(var e=[],n=0,i=this.cells;n<i.length;n++){var o=i[n];e.push(o.jsonId),o instanceof t&&o.getAllCells().forEach((function(t){e.push(t)}))}return e},t.prototype.finish=function(t){if(void 0===t&&(t=this.jsonId),this.jsonId!=t)e.prototype.finish.call(this);else{var n=this.getAllCells();n.reverse();for(var i=0,o=n;i<o.length;i++){var l=o[i],s=window.mApp.moduleManager.moduleMap.get(l);null==s||s.finish("skrrrskfjdskjfskljflksjdl")}e.prototype.finish.call(this,"sdfsdffdssf")}},t}(i.ModuleData);t.ModuleSectionData=o}.apply(t,i),void 0===o||(e.exports=o)},83229:(e,t,n)=>{var i,o;i=[n,t,n(78136),n(79388),n(2271),n(19701),n(94095),n(72265)],o=function(e,t,n,i,o,l,s,r){"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleManager=t.ModuleExecutionStatus=void 0,function(e){e[e.executing=0]="executing",e[e.canceling=1]="canceling",e[e.finished=2]="finished"}(a=t.ModuleExecutionStatus||(t.ModuleExecutionStatus={}));var d=function(){function e(){this.moduleObject=void 0,this.moduleViewsExecutor={},this.moudleParsed=[],this.moduleMap=new Map,this.executionStatus=a.finished,this.moduleExecutionInterfaces={},this.currentExecutionId=""}return e.prototype.getModuleOptions=function(){if(null==this.moduleObject)return{};var e={selected:"",notesData:{openedNotes:["oFwjzvDpdfxlaKQrGUwc"],activeNote:"oFwjzvDpdfxlaKQrGUwc",notes:{}},hideViews:[],id:window.mApp.utils.makeId(15),projectName:"New Project"};null==this.moduleObject.moduleCreatorGlobalOptions&&(this.moduleObject.moduleCreatorGlobalOptions=e);for(var t=0,n=Object.keys(e);t<n.length;t++){var i=n[t];null==this.moduleObject.moduleCreatorGlobalOptions[i]&&(this.moduleObject.moduleCreatorGlobalOptions[i]=e[i])}return this.moduleObject.moduleCreatorGlobalOptions},e.prototype.getDebugModule=function(){for(var e,t,i,o,l,s,a,d,c,u=window.mApp.utils.deepCopy(this.moduleObject),p=0,h=window.mApp.utils.getPathsThatMatchKey("moduleCreatorHeaderisActive",[],window.mApp.moduleManager.moduleObject);p<h.length;p++){var f=h[p];window.mApp.utils.deleteFromArray(f.length-1,f);var v=window.mApp.utils.getObjectFromPath(f,u);v.moduleCreatorHeaderisActive||(v.key="",v.value="")}for(var g=new r.ModuleJavascriptGenerator,m=[],w=0,y=Array.from(this.moduleMap.values());w<y.length;w++){var b=y[w];if(b instanceof n.ModuleSectionData){var I=b;if(!(I.cells.length<=0||I.cells[0]instanceof n.ModuleSectionData)){if(null==I.cells[0].getObject().request)continue;m.push(I)}}}for(var C=0,V=m;C<V.length;C++)for(var W=V[C],S=void 0,x=0;x<W.cells.length;x++){var Z=W.cells[x],A=Z.getOptions(),G=window.mApp.utils.getObjectFromPath(Z.jsonPath,u);if(null!=(null===(e=null==G?void 0:G.javascriptConfig)||void 0===e?void 0:e.javaScript))if(G.javascriptConfig.javaScript=g.addJsIndicators(G.javascriptConfig.javaScript),1==(null!==(t=null==A?void 0:A.async)&&void 0!==t&&t)&&(G.javascriptConfig.javaScript=g.setAsync(G.javascriptConfig.javaScript)),1==W.cells.length&&(G.javascriptConfig.javaScript=g.setDebug(G.javascriptConfig.javaScript)),null!=S){var _=window.mApp.utils.getObjectFromPath(null==S?void 0:S.jsonPath,u);if(null!=(null===(i=null==_?void 0:_.javascriptConfig)||void 0===i?void 0:i.javaScript)){var j=g.generateUpdatedJs(_.javascriptConfig.javaScript,btoa(JSON.stringify(null!==(o=G.request)&&void 0!==o?o:"")),null!==(l=A.forceRequest)&&void 0!==l&&l,null!==(a=null===(s=null==G?void 0:G.javascriptConfig)||void 0===s?void 0:s.removeJavascript)&&void 0!==a&&a,null!==(c=null===(d=null==G?void 0:G.javascriptConfig)||void 0===d?void 0:d.loadInWebView)&&void 0!==c&&c);_.javascriptConfig.javaScript=j,_.javascriptConfig.javaScript=g.setDebug(_.javascriptConfig.javaScript),x==W.cells.length-1&&(G.javascriptConfig.javaScript=g.setDebug(G.javascriptConfig.javaScript)),console.log(_.javascriptConfig.javaScript),S=Z}}else S=Z}return JSON.stringify(u)},e.prototype.loadNewModule=function(e,t){if(void 0===t&&(t=void 0),null!=this.moduleObject){var n=window.mApp.views.get("leftMenuSubMenu");null!=n&&(null==n||n.viewWasSelected("leftSubMenuModule"))}for(var i=0,o=this.moudleParsed;i<o.length;i++)o[i].finish();this.moduleObject=JSON.parse(e),this.parseModule(t)},e.prototype.moduleUpdatedJavascript=function(){},e.prototype.getDefaultModule=function(){return atob(i.testModuleString)},e.prototype.saveModuleToLocalStorage=function(){window.localStorage.setItem("savedModule",JSON.stringify(this.moduleObject))},e.prototype.getLocalStotrageModule=function(){var e;return null!==(e=window.localStorage.getItem("savedModule"))&&void 0!==e?e:void 0},e.prototype.exportModule=function(){var e,t=this.getModuleOptions(),n=this.getDebugModule(),i=new Blob([n],{type:"application/json"}),o=URL.createObjectURL(i),l=document.createElement("a");l.href=o,l.download="".concat((null!==(e=t.projectName)&&void 0!==e?e:"module").replace(" ",""),".json"),document.body.appendChild(l),l.click(),document.body.removeChild(l)},e.prototype.parseModule=function(e){void 0===e&&(e=void 0);var t=!1;null==this.moduleObject.moduleCreatorGlobalOptions&&(t=!0);var n=this.getModuleOptions();null!=e&&(n.projectName=e),this.moudleParsed=window.mApp.utils.deepCopy(o.parseModuleStructure).filter((function(e){var t;if(!n.hideViews.includes(null!==(t=window.mApp.utils.deepCopy(e.jsonPath).pop())&&void 0!==t?t:""))return e}));for(var i=0,l=this.moudleParsed;i<l.length;i++)l[i].setUp(this.moduleObject);t&&this.disableOptionsFirstReadModules(),this.filterJavascriptFromRequests(),Object.entries(this.moduleViewsExecutor).forEach((function(e){e[0],e[1].moduleLoaded()}))},e.prototype.disableOptionsFirstReadModules=function(){for(var e=[],t=0,i=Array.from(this.moduleMap.values());t<i.length;t++){var o=i[t];if(o instanceof n.ModuleSectionData){var l=o;if(!(l.cells.length<=0||l.cells[0]instanceof n.ModuleSectionData)){if(null==l.cells[0].getObject().request)continue;e.push(l)}}}for(var s=0,r=e;s<r.length;s++)for(var a=r[s],d=0;d<a.cells.length;d++)if(0!=d){var c=a.cells[d].getObject();c.javascriptConfig.removeJavascript=!1,c.javascriptConfig.loadInWebView=!1}},e.prototype.filterJavascriptFromRequests=function(){for(var e,t,i,o=[],l=0,s=Array.from(this.moduleMap.values());l<s.length;l++){var r=s[l];if(r instanceof n.ModuleSectionData){var a=r;if(!(a.cells.length<=0||a.cells[0]instanceof n.ModuleSectionData)){if(null==a.cells[0].getObject().request)continue;o.push(a)}}}for(var d=0,c=o;d<c.length;d++)for(var u=c[d],p=0;p<u.cells.length;p++){var h=u.cells[p].getObject(),f=null===(e=null==h?void 0:h.javascriptConfig)||void 0===e?void 0:e.javaScript;if(null!=f){var v=null===(i=null===(t=f.match(/\/\* JAVASCRIPT STARTS \*\/(?<result>(.|\n)*)\/\* JAVASCRIPT ENDS \*\//))||void 0===t?void 0:t.groups)||void 0===i?void 0:i.result;null!=v&&(h.javascriptConfig.javaScript=v)}}},e.prototype.moduleDataUpdated=function(){Object.entries(this.moduleViewsExecutor).forEach((function(e){e[0];var t,n=e[1];null===(t=n.moduleDataUpdated)||void 0===t||t.call(n)}))},e.prototype.cancelCurrentExecution=function(){var e=this;this.executionStatus=a.canceling,this.updateModuleExecutionInterfaces(),this.currentExecutionId=window.mApp.utils.makeId();var t=this.currentExecutionId,n={id:window.mApp.utils.makeId(),functionName:"CancelExecution",logs:s.LogsParser.shared.getModuleLogsToSend(),sentCallback:!1,completionCallback:!1},i=new l.SocketMessageCallback((function(n,i){i&&t==e.currentExecutionId&&(e.executionStatus=a.finished,e.updateModuleExecutionInterfaces())}),(function(n,i){if(t==e.currentExecutionId){e.executionStatus=a.finished,e.updateModuleExecutionInterfaces();var o=n.logs;null!=o&&s.LogsParser.shared.logsUpdated(o)}}));window.mApp.sockets.sendMessage(n,i)},e.prototype.executeModule=function(e){var t=this;this.currentExecutionId=window.mApp.utils.makeId();var n=this.currentExecutionId;this.executionStatus=a.executing,this.updateModuleExecutionInterfaces();var i={id:window.mApp.utils.makeId(),functionName:"ExecuteModule",data:{moduleEncoded:this.getDebugModule(),executePath:e},logs:s.LogsParser.shared.getModuleLogsToSend(),sentCallback:!1,completionCallback:!1},o=new l.SocketMessageCallback((function(e,i){i&&n==t.currentExecutionId&&(t.executionStatus=a.finished,t.updateModuleExecutionInterfaces())}),(function(e,i){if(n==t.currentExecutionId){t.executionStatus=a.finished,t.updateModuleExecutionInterfaces();var o=e.logs;null!=o&&s.LogsParser.shared.logsUpdated(o)}}));window.mApp.sockets.sendMessage(i,o)},e.prototype.updateModuleExecutionInterfaces=function(){for(var e=0,t=Object.values(this.moduleExecutionInterfaces);e<t.length;e++)t[e].moduleExecutionUpdated()},e}();t.ModuleManager=d}.apply(t,i),void 0===o||(e.exports=o)},2271:(e,t,n)=>{var i,o;i=[n,t,n(60323),n(78136)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseModuleStructure=void 0,t.parseModuleStructure=[new i.ModuleSectionData(["moduleInfo"],[new n.ModuleData([])],{name:"Module Info",listName:"Parameters"}),new i.ModuleSectionData(["mainPage"],[new n.ModuleData([])],{name:"Main Page",listName:"Request"}),new i.ModuleSectionData(["search"],[new n.ModuleData([])],{name:"Search Page",listName:"Request"}),new i.ModuleSectionData(["info"],[new n.ModuleData([])],{name:"Info Page",listName:"Request"}),new i.ModuleSectionData(["chapters"],[new n.ModuleData([])],{name:"Chapters",listName:"Request"}),new i.ModuleSectionData(["moduleResolvers"],[new i.ModuleSectionData(["resolverInfo"],[new n.ModuleData([])],{name:"Resolver Parameters",listName:"parameters"}),new i.ModuleSectionData(["resolver"],[new n.ModuleData([])],{name:"Resolver Request",listName:"Request"})],{name:"Resolvers",listName:"Resolver"}),new i.ModuleSectionData(["responseCodeFunctions"],[new i.ModuleSectionData([""],[new n.ModuleData([])],{name:"Function Parameters",listName:"Parameters"}),new i.ModuleSectionData(["functions"],[new n.ModuleData([])],{name:"Function Requests",listName:"Request"})],{name:"Response Code Funtions",listName:"Function"}),new i.ModuleSectionData(["helperFunctions"],[new i.ModuleSectionData([""],[new n.ModuleData([])],{name:"Function Parameters",listName:"Parameters"}),new i.ModuleSectionData(["functions"],[new n.ModuleData([])],{name:"Function Requests",listName:"Request"})],{name:"Helper Functions",listName:"Request"})]}.apply(t,i),void 0===o||(e.exports=o)},79388:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.testModuleString=void 0,t.testModuleString="eyJtb2R1bGVJbmZvIjp7Im1vZHVsZU5hbWUiOiIiLCJtb2R1bGVJbml0aWFscyI6IiIsIm1vZHVsZURlc2MiOiIiLCJkZXZlbG9wZXIiOiIiLCJtb2R1bGVJRCI6IiIsIm1vZHVsZUltYWdlIjoiIiwibW9kdWxlVmVyc2lvbiI6MSwibW9kdWxlTGVuZ3VhZ2UiOiJFTkciLCJtb2R1bGVUeXBlIjoiVmlkZW8iLCJiYXNlVVJMIjoiIiwibW9kdWxlRGV2ZWxvcGVyU2l0ZSI6IiIsIlVwZGF0ZVNpdGUiOiIiLCJwcmVmZXJlZFNlcnZlciI6IiIsInByZWZlcmVkRG93bmxvYWRTZXJ2ZXIiOiIiLCJibGFja0xpc3RlZCI6WyIiXSwibW9kdWxlQ3JlYXRvcklkbnZuVVZnQ3ZQV1prcEdxRk5xSk4iOnsicGF0aCI6IklpTHdUIiwiaWQiOiJtb2R1bGVJbmZvc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiTW9kdWxlIEluZm8iLCJsaXN0TmFtZSI6IlBhcmFtZXRlcnMifSwiY2VsbHNIaWRkZW4iOmZhbHNlfSwibW9kdWxlQ3JlYXRvcklkdFZ2VXZmRE9uV1FRWUNrZHNhTXEiOnsicGF0aCI6IkZMTVphIiwiaWQiOiJtb2R1bGVJbmZvY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUGFyYW1ldGVycyJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fSwiZ2xvYmFsIjp7InZhcmlhYmxlcyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV0sImNvb2tpZXMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dLCJoZWFkZXJzIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XX0sIm1haW5QYWdlIjpbeyJyZXF1ZXN0Ijp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6IiIsInZhbHVlIjoiIiwibW9kdWxlQ3JlYXRvckhlYWRlcmlzQWN0aXZlIjp0cnVlfV19LCJleHRyYSI6eyJjb21tYW5kcyI6W3siY29tbWFuZE5hbWUiOiIiLCJwYXJhbXMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfV0sImV4dHJhSW5mbyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV19LCJqYXZhc2NyaXB0Q29uZmlnIjp7InJlbW92ZUphdmFzY3JpcHQiOnRydWUsImxvYWRJbldlYlZpZXciOmZhbHNlLCJqYXZhU2NyaXB0IjoiXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIC8qIEpBVkFTQ1JJUFQgU1RBUlRTICovICAgY29uc3QgRGVmYXVsdExheW91dHMgPSB7XG4gICAgICAgICAgdWx0cmFXaWRlRnVsbDogJ3VsdHJhV2lkZUZ1bGwnLFxuICAgICAgICAgIHVsdHJhV2lkZTogJ3VsdHJhV2lkZScsXG4gICAgICAgICAgd2lkZUZ1bGw6ICd3aWRlRnVsbCcsXG4gICAgICAgICAgd2lkZTogJ3dpZGUnLFxuICAgICAgICAgIHdpZGVTdHJlY2hlZEZ1bGw6ICd3aWRlU3RyZWNoZWRGdWxsJyxcbiAgICAgICAgICB3aWRlU3RyZWNoZWRGdWxsRG91YmxlOiAnV2lkZVN0cmVjaGVkRnVsbERvdWJsZScsXG4gICAgICAgICAgd2lkZVN0cmVjaGVkOiAnd2lkZVN0cmVjaGVkJyxcbiAgICAgICAgICB3aWRlU3RyZWNoZWREb3VibGU6ICd3aWRlU3RyZWNoZWREb3VibGUnLFxuICAgICAgICAgIHdpZGVTdHJlY2hlZEZ1bGxMaXN0OiAnd2lkZVN0cmVjaGVkRnVsbExpc3QnLFxuICAgICAgICAgIHdpZGVTdHJlY2hlZExpc3Q6ICd3aWRlU3RyZWNoZWRMaXN0JyxcbiAgICAgICAgICBkb3VibGV0czogJ2RvdWJsZXRzJyxcbiAgICAgICAgICBkb3VibGV0c0RvdWJsZTogJ2RvdWJsZXRzRG91YmxlJyxcbiAgICAgICAgICBkb3VibGV0c0Z1bGw6ICdkb3VibGV0c0Z1bGwnLFxuICAgICAgICAgIGRvdWJsZXRzRnVsbERvdWJsZTogJ2RvdWJsZXRzRnVsbERvdWJsZScsXG4gICAgICAgICAgZG91YmxldHNDb25zdGFudDogJ2RvdWJsZXRzQ29uc3RhbnQnLFxuICAgICAgICAgIGRvdWJsZXRzRG91YmxlQ29uc3RhbnQ6ICdkb3VibGV0c0RvdWJsZUNvbnN0YW50JyxcbiAgICAgICAgICBkb3VibGV0c0Z1bGxDb25zdGFudDogJ2RvdWJsZXRzRnVsbENvbnN0YW50JyxcbiAgICAgICAgICBkb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudDogJ2RvdWJsZXRzRnVsbERvdWJsZUNvbnN0YW50JyxcbiAgICAgICAgICBsb25nRG91YmxldHM6ICdsb25nRG91YmxldHMnLFxuICAgICAgICAgIGxvbmdEb3VibGV0c0RvdWJsZTogJ2xvbmdEb3VibGV0c0RvdWJsZScsXG4gICAgICAgICAgbG9uZ0RvdWJsZXRzRnVsbDogJ2xvbmdEb3VibGV0c0Z1bGwnLFxuICAgICAgICAgIGxvbmdEb3VibGV0c0Z1bGxEb3VibGU6ICdsb25nRG91YmxldHNGdWxsRG91YmxlJyxcbiAgICAgICAgICBsb25nRG91YmxldHNDb25zdGFudDogJ2xvbmdEb3VibGV0c0NvbnN0YW50JyxcbiAgICAgICAgICBsb25nRG91YmxldHNEb3VibGVDb25zdGFudDogJ2xvbmdEb3VibGV0c0RvdWJsZUNvbnN0YW50JyxcbiAgICAgICAgICBsb25nRG91YmxldHNGdWxsQ29uc3RhbnQ6ICdsb25nRG91YmxldHNGdWxsQ29uc3RhbnQnLFxuICAgICAgICAgIGxvbmdEb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudDogJ2xvbmdEb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudCcsXG4gICAgICAgICAgdHJpcGxldHM6ICd0cmlwbGV0cycsXG4gICAgICAgICAgdHJpcGxldHNEb3VibGU6ICd0cmlwbGV0c0RvdWJsZScsXG4gICAgICAgICAgdHJpcGxldHNGdWxsOiAndHJpcGxldHNGdWxsJyxcbiAgICAgICAgICB0cmlwbGV0c0Z1bGxEb3VibGU6ICd0cmlwbGV0c0Z1bGxEb3VibGUnLFxuICAgICAgICAgIHRyaXBsZXRzQ29uc3RhbnQ6ICd0cmlwbGV0c0NvbnN0YW50JyxcbiAgICAgICAgICB0cmlwbGV0c0RvdWJsZUNvbnN0YW50OiAndHJpcGxldHNEb3VibGVDb25zdGFudCcsXG4gICAgICAgICAgdHJpcGxldHNGdWxsQ29uc3RhbnQ6ICd0cmlwbGV0c0Z1bGxDb25zdGFudCcsXG4gICAgICAgICAgdHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQ6ICd0cmlwbGV0c0Z1bGxEb3VibGVDb25zdGFudCcsXG4gICAgICAgICAgbG9uZ1RyaXBsZXRzOiAnbG9uZ1RyaXBsZXRzJyxcbiAgICAgICAgICBsb25nVHJpcGxldHNEb3VibGU6ICdsb25nVHJpcGxldHNEb3VibGUnLFxuICAgICAgICAgIGxvbmdUcmlwbGV0c0Z1bGw6ICdsb25nVHJpcGxldHNGdWxsJyxcbiAgICAgICAgICBsb25nVHJpcGxldHNGdWxsRG91YmxlOiAnbG9uZ1RyaXBsZXRzRnVsbERvdWJsZScsXG4gICAgICAgICAgbG9uZ1RyaXBsZXRzQ29uc3RhbnQ6ICdsb25nVHJpcGxldHNDb25zdGFudCcsXG4gICAgICAgICAgbG9uZ1RyaXBsZXRzRG91YmxlQ29uc3RhbnQ6ICdsb25nVHJpcGxldHNEb3VibGVDb25zdGFudCcsXG4gICAgICAgICAgbG9uZ1RyaXBsZXRzRnVsbENvbnN0YW50OiAnbG9uZ1RyaXBsZXRzRnVsbENvbnN0YW50JyxcbiAgICAgICAgICBsb25nVHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQ6ICdsb25nVHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQnLFxuICAgICAgICAgIG5vbmU6ICcnXG4gIH07XG4gIGNvbnN0IENlbGxEZXNpbmdzID0ge1xuICAgICAgICAgIFNwZWNpYWwxOiAnU3BlY2lhbDEnLFxuICAgICAgICAgIFNwZWNpYWwyOiAnU3BlY2lhbDInLFxuICAgICAgICAgIFNwZWNpYWwzOiAnU3BlY2lhbDMnLFxuICAgICAgICAgIENFTExIZWxwZXJUZXh0OiAnQ0VMTEhlbHBlclRleHQnLFxuICAgICAgICAgIHNtYWxsMTogJ3NtYWxsMScsXG4gICAgICAgICAgc21hbGwyOiAnc21hbGwyJyxcbiAgICAgICAgICBub3JtYWwxOiAnbm9ybWFsMScsXG4gICAgICAgICAgbm9ybWFsMjogJ25vcm1hbDInLFxuICAgICAgICAgIG5vcm1hbDM6ICdub3JtYWwzJyxcbiAgICAgICAgICBub3JtYWw0OiAnbm9ybWFsNCcsXG4gICAgICAgICAgbm9ybWFsNTogJ25vcm1hbDUnLFxuICAgICAgICAgIG5vcm1hbDY6ICdub3JtYWw2JyxcbiAgICAgICAgICBub3JtYWw3OiAnbm9ybWFsNycsXG4gICAgICAgICAgd2lkZTE6ICd3aWRlMScsXG4gICAgICAgICAgd2lkZTI6ICd3aWRlMicsXG4gICAgICAgICAgd2lkZTM6ICd3aWRlMycsXG4gICAgICAgICAgd2lkZTQ6ICd3aWRlNCcsXG4gICAgICAgICAgd2lkZTU6ICd3aWRlNScsXG4gICAgICAgICAgd2lkZTY6ICd3aWRlNicsXG4gICAgICAgICAgd2lkZTc6ICd3aWRlNycsXG4gICAgICAgICAgd2lkZTg6ICd3aWRlOCcsXG4gICAgICAgICAgd2lkZTk6ICd3aWRlOScsXG4gICAgICAgICAgd2lkZTEwOiAnd2lkZTEwJyxcbiAgICAgICAgICB3aWRlMTE6ICd3aWRlMTEnXG4gIH07XG4gIGNvbnN0IFBhZ2luZyA9IHtcbiAgICAgICAgICBsZWFkaW5nOiAnbGVhZGluZycsXG4gICAgICAgICAgY2VudGVyZWQ6ICdjZW50ZXJlZCcsXG4gICAgICAgICAgbm9uZTogJydcbiAgfTtcbiAgY29uc3QgT3JpZW50YXRpb24gPSB7XG4gICAgICAgICAgaG9yaXpvbnRhbDogJ2hvcml6b250YWwnLFxuICAgICAgICAgIHZlcnRpY2FsOiAndmVydGljYWwnXG4gIH07XG5cbiAgZnVuY3Rpb24gTWFpblBhZ2UgKCByZXF1ZXN0LCBleHRyYSwgamF2YXNjcmlwdENvbmZpZywgb3V0cHV0ICkge1xuICAgICAgICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICAgICAgdGhpcy5leHRyYSA9IGV4dHJhO1xuICAgICAgICAgIHRoaXMuamF2YXNjcmlwdENvbmZpZyA9IGphdmFzY3JpcHRDb25maWc7XG4gICAgICAgICAgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBNb2R1bGVSZXF1ZXN0ICggdXJsLCBtZXRob2QsIGhlYWRlcnMsIGh0dHBCb2R5ICkge1xuICAgICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgICAgdGhpcy5odHRwQm9keSA9IGh0dHBCb2R5O1xuICB9XG5cbiAgZnVuY3Rpb24gRXh0cmEgKCBjb21tYW5kcywgZXh0cmFJbmZvICkge1xuICAgICAgICAgIHRoaXMuY29tbWFuZHMgPSBjb21tYW5kcztcbiAgICAgICAgICB0aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbztcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbW1hbmRzICggY29tbWFuZE5hbWUsIHBhcmFtcyApIHtcbiAgICAgICAgICB0aGlzLmNvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7XG4gICAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gIH1cblxuICBmdW5jdGlvbiBKYXZhc2NyaXB0Q29uZmlnICggcmVtb3ZlSmF2YXNjcmlwdCwgbG9hZEluV2ViVmlldywgamF2YVNjcmlwdCApIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUphdmFzY3JpcHQgPSByZW1vdmVKYXZhc2NyaXB0O1xuICAgICAgICAgIHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7XG4gICAgICAgICAgdGhpcy5qYXZhU2NyaXB0ID0gamF2YVNjcmlwdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEtleVZhbHVlICgga2V5LCB2YWx1ZSApIHtcbiAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBPdXRwdXQgKCBjZWxsRGVzaW5nLCBvcmllbnRhdGlvbiwgZGVmYXVsdExheW91dCwgcGFnaW5nLCBzZWN0aW9uLCBsYXlvdXQsIGRhdGEgKSB7XG4gICAgICAgICAgdGhpcy5jZWxsRGVzaW5nID0gY2VsbERlc2luZztcbiAgICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgICAgdGhpcy5kZWZhdWx0TGF5b3V0ID0gZGVmYXVsdExheW91dDtcbiAgICAgICAgICB0aGlzLnBhZ2luZyA9IHBhZ2luZztcbiAgICAgICAgICB0aGlzLnNlY3Rpb24gPSBzZWN0aW9uO1xuICAgICAgICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBTZWN0aW9uICggc2VjdGlvbk5hbWUsIHNlcGFyYXRvciApIHtcbiAgICAgICAgICB0aGlzLnNlY3Rpb25OYW1lID0gc2VjdGlvbk5hbWU7XG4gICAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBzZXBhcmF0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBMYXlvdXQgKCBpbnNldHMsIHZpc2libGVDZWxsc1dpZHRoUywgdmlzaWJsZUNlbGxzV2lkdGhNLCB2aXNpYmxlQ2VsbHNXaWR0aEwsIHZpc2libGVDZWxsc0hlaWdodCwgaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzLCBjZWxsU2l6ZSwgcmF0aW8sIGNvbnN0YW50LCBob3Jpem9udGFsU3BhY2luZywgdmVydGljYWxTcGFjaW5nICkge1xuICAgICAgICAgIHRoaXMuaW5zZXRzID0gaW5zZXRzO1xuICAgICAgICAgIHRoaXMudmlzaWJsZUNlbGxzV2lkdGhTID0gdmlzaWJsZUNlbGxzV2lkdGhTO1xuICAgICAgICAgIHRoaXMudmlzaWJsZUNlbGxzV2lkdGhNID0gdmlzaWJsZUNlbGxzV2lkdGhNO1xuICAgICAgICAgIHRoaXMudmlzaWJsZUNlbGxzV2lkdGhMID0gdmlzaWJsZUNlbGxzV2lkdGhMO1xuICAgICAgICAgIHRoaXMudmlzaWJsZUNlbGxzSGVpZ2h0ID0gdmlzaWJsZUNlbGxzSGVpZ2h0O1xuICAgICAgICAgIHRoaXMuaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzID0gaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzO1xuICAgICAgICAgIHRoaXMuY2VsbFNpemUgPSBjZWxsU2l6ZTtcbiAgICAgICAgICB0aGlzLnJhdGlvID0gcmF0aW87XG4gICAgICAgICAgdGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbFNwYWNpbmcgPSBob3Jpem9udGFsU3BhY2luZztcbiAgICAgICAgICB0aGlzLnZlcnRpY2FsU3BhY2luZyA9IHZlcnRpY2FsU3BhY2luZztcbiAgfVxuXG4gIGZ1bmN0aW9uIEluc2V0cyAoIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCApIHtcbiAgICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgICB0aGlzLmJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNpemUgKCB3aWR0aCwgaGVpZ2h0ICkge1xuICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJhdGlvICggaW5SZWxhdGlvbiwgbnVtYmVyMSwgbnVtYmVyMiApIHtcbiAgICAgICAgICB0aGlzLmluUmVsYXRpb24gPSBpblJlbGF0aW9uO1xuICAgICAgICAgIHRoaXMubnVtYmVyMSA9IG51bWJlcjE7XG4gICAgICAgICAgdGhpcy5udW1iZXIyID0gbnVtYmVyMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIERhdGEgKCBpbWFnZSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmaWVsZDEsIGZpZWxkMiwgZmllbGQzLCBmaWVsZDQsIGlzQ2hhcHRlciwgbGluaywgb3BlbkluV2ViVmlldyApIHtcbiAgICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XG4gICAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICB0aGlzLmZpZWxkMSA9IGZpZWxkMTtcbiAgICAgICAgICB0aGlzLmZpZWxkMiA9IGZpZWxkMjtcbiAgICAgICAgICB0aGlzLmZpZWxkMyA9IGZpZWxkMztcbiAgICAgICAgICB0aGlzLmZpZWxkNCA9IGZpZWxkNDtcbiAgICAgICAgICB0aGlzLmlzQ2hhcHRlciA9IGlzQ2hhcHRlcjtcbiAgICAgICAgICB0aGlzLmxpbmsgPSBsaW5rO1xuICAgICAgICAgIHRoaXMub3BlbkluV2ViVmlldyA9IG9wZW5JbldlYlZpZXc7XG4gIH1cblxuICBmdW5jdGlvbiBxdWlja0RhdGEgKCBsaW5rLCBpbWFnZSwgdGl0bGUsIGZpZWxkMSApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IERhdGEoIGltYWdlLCB0aXRsZSwgJ3Vua25vd24nLCBmaWVsZDEsICd1bmtub3duJywgJ3Vua25vd24nLCAndW5rbm93bicsIGZhbHNlLCBsaW5rICk7XG4gIH1cblxuICBmdW5jdGlvbiBzaHVmZmxlICggYSApIHtcbiAgICAgICAgICB2YXIgaiwgeCwgaTtcbiAgICAgICAgICBmb3IgKCBpID0gYS5sZW5ndGggLSAxOyBpID4gMDsgaS0tICkge1xuICAgICAgICAgICAgICAgICAgaiA9IE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCApICogKCBpICsgMSApICk7XG4gICAgICAgICAgICAgICAgICB4ID0gYVsgaSBdO1xuICAgICAgICAgICAgICAgICAgYVsgaSBdID0gYVsgaiBdO1xuICAgICAgICAgICAgICAgICAgYVsgaiBdID0geDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGE7XG4gIH1cbiAgdmFyIHNhdmVkRGF0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAna2V0c3UtZmluYWwtZGF0YScgKTtcbiAgdmFyIHBhcnNlZEpzb24gPSBKU09OLnBhcnNlKCBzYXZlZERhdGEuaW5uZXJIVE1MICk7XG4gIGxldCBvdXRwdXQgPSBbIF07XG4gIGxldCBlbXB0eUtleVZhbHVlID0gWyBuZXcgS2V5VmFsdWUoICcnLCAnJyApIF07XG4gIGxldCBNYWluUGFnZU9iamVjdCA9IG5ldyBNYWluUGFnZSggbmV3IE1vZHVsZVJlcXVlc3QoICcnLCAnZ2V0JywgZW1wdHlLZXlWYWx1ZSwgbnVsbCApLCBuZXcgRXh0cmEoIFsgbmV3IENvbW1hbmRzKCAnJywgZW1wdHlLZXlWYWx1ZSApIF0sIGVtcHR5S2V5VmFsdWUgKSwgbmV3IEphdmFzY3JpcHRDb25maWcoIHRydWUsIGZhbHNlLCAnJyApLCBvdXRwdXQgKTtcbiAgdmFyIGZpbmFsSnNvbiA9IEpTT04uc3RyaW5naWZ5KCBNYWluUGFnZU9iamVjdCApO1xuICBzYXZlZERhdGEuaW5uZXJIVE1MID0gZmluYWxKc29uO1xuIC8qIEpBVkFTQ1JJUFQgRU5EUyAqL1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLRVRTVV9BU1lOQyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5FWEVDVVRFX0tFVFNVX0FTWU5DLnBvc3RNZXNzYWdlKCcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAifSwib3V0cHV0IjpbeyJjZWxsRGVzaW5nIjoibm9ybWFsMSIsIm9yaWVudGF0aW9uIjoidmVydGljYWwiLCJkZWZhdWx0TGF5b3V0Ijoid2lkZSIsInBhZ2luZyI6IiIsInNlY3Rpb24iOnsic2VjdGlvbk5hbWUiOiIiLCJzZXBhcmF0b3IiOmZhbHNlfSwibGF5b3V0Ijp7Imluc2V0cyI6eyJ0b3AiOjAsImJvdHRvbSI6MCwibGVmdCI6MCwicmlnaHQiOjB9LCJ2aXNpYmxlQ2VsbHNXaWR0aFMiOjIsInZpc2libGVDZWxsc1dpZHRoTSI6MiwidmlzaWJsZUNlbGxzV2lkdGhMIjoyLCJ2aXNpYmxlQ2VsbHNIZWlnaHQiOjIsImhlaWdodEZvclZpc2libGVDZWxscyI6NDAwLCJjZWxsU2l6ZSI6eyJ3aWR0aCI6MzAwLCJoZWlnaHQiOjMwMH0sInJhdGlvIjp7ImluUmVsYXRpb24iOiJ3aWR0aCIsIm51bWJlcjEiOjEsIm51bWJlcjIiOjJ9LCJjb25zdGFudCI6eyJ3aWR0aCI6MSwiaGVpZ2h0IjoyfSwiaG9yaXpvbnRhbFNwYWNpbmciOjAsInZlcnRpY2FsU3BhY2luZyI6MH0sImRhdGEiOlt7ImltYWdlIjp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dLCJodHRwQm9keSI6bnVsbH0sInRpdGxlIjoiIiwiZGVzY3JpcHRpb24iOiIiLCJmaWVsZDEiOiIiLCJmaWVsZDIiOiIiLCJmaWVsZDMiOiIiLCJmaWVsZDQiOiIiLCJvcGVuSW5XZWJWaWV3IjpmYWxzZSwiaXNDaGFwdGVyIjpmYWxzZSwibGluayI6eyJ1cmwiOiIiLCJtZXRob2QiOiIiLCJoZWFkZXJzIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XSwiaHR0cEJvZHkiOm51bGx9fV19XSwibW9kdWxlQ3JlYXRvcklkZ1RlalZNVmd2a3RSQWFneHFnS08iOnsicGF0aCI6Ik5oUUx0IiwiaWQiOiJtYWluUGFnZSwwY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2UsImphdmFzY3JpcHRFZGl0b3JTY3JvbGwiOjB9fV0sInNlYXJjaCI6W3sicmVxdWVzdCI6eyJ1cmwiOiIiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XSwiaHR0cEJvZHkiOm51bGx9LCJzZXBhcmF0b3IiOiIiLCJleHRyYSI6eyJjb21tYW5kcyI6W3siY29tbWFuZE5hbWUiOiIiLCJwYXJhbXMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfV0sImV4dHJhSW5mbyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV19LCJqYXZhc2NyaXB0Q29uZmlnIjp7InJlbW92ZUphdmFzY3JpcHQiOnRydWUsImxvYWRJbldlYlZpZXciOmZhbHNlLCJqYXZhU2NyaXB0IjoiXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIC8qIEpBVkFTQ1JJUFQgU1RBUlRTICovICBjb25zdCBEZWZhdWx0TGF5b3V0cyA9IHsgdWx0cmFXaWRlRnVsbCA6ICd1bHRyYVdpZGVGdWxsJywgdWx0cmFXaWRlIDogJ3VsdHJhV2lkZScsIHdpZGVGdWxsIDogJ3dpZGVGdWxsJywgd2lkZSA6ICd3aWRlJywgd2lkZVN0cmVjaGVkRnVsbCA6ICd3aWRlU3RyZWNoZWRGdWxsJywgd2lkZVN0cmVjaGVkRnVsbERvdWJsZSA6ICdXaWRlU3RyZWNoZWRGdWxsRG91YmxlJywgd2lkZVN0cmVjaGVkIDogJ3dpZGVTdHJlY2hlZCcsIHdpZGVTdHJlY2hlZERvdWJsZSA6ICd3aWRlU3RyZWNoZWREb3VibGUnLCB3aWRlU3RyZWNoZWRGdWxsTGlzdCA6ICd3aWRlU3RyZWNoZWRGdWxsTGlzdCcsIHdpZGVTdHJlY2hlZExpc3QgOiAnd2lkZVN0cmVjaGVkTGlzdCcsIGRvdWJsZXRzIDogJ2RvdWJsZXRzJywgZG91YmxldHNEb3VibGUgOiAnZG91YmxldHNEb3VibGUnLCBkb3VibGV0c0Z1bGwgOiAnZG91YmxldHNGdWxsJywgZG91YmxldHNGdWxsRG91YmxlIDogJ2RvdWJsZXRzRnVsbERvdWJsZScsIGRvdWJsZXRzQ29uc3RhbnQgOiAnZG91YmxldHNDb25zdGFudCcsIGRvdWJsZXRzRG91YmxlQ29uc3RhbnQgOiAnZG91YmxldHNEb3VibGVDb25zdGFudCcsIGRvdWJsZXRzRnVsbENvbnN0YW50IDogJ2RvdWJsZXRzRnVsbENvbnN0YW50JywgZG91YmxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAnZG91YmxldHNGdWxsRG91YmxlQ29uc3RhbnQnLCBsb25nRG91YmxldHMgOiAnbG9uZ0RvdWJsZXRzJywgbG9uZ0RvdWJsZXRzRG91YmxlIDogJ2xvbmdEb3VibGV0c0RvdWJsZScsIGxvbmdEb3VibGV0c0Z1bGwgOiAnbG9uZ0RvdWJsZXRzRnVsbCcsIGxvbmdEb3VibGV0c0Z1bGxEb3VibGUgOiAnbG9uZ0RvdWJsZXRzRnVsbERvdWJsZScsIGxvbmdEb3VibGV0c0NvbnN0YW50IDogJ2xvbmdEb3VibGV0c0NvbnN0YW50JywgbG9uZ0RvdWJsZXRzRG91YmxlQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzRG91YmxlQ29uc3RhbnQnLCBsb25nRG91YmxldHNGdWxsQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzRnVsbENvbnN0YW50JywgbG9uZ0RvdWJsZXRzRnVsbERvdWJsZUNvbnN0YW50IDogJ2xvbmdEb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIHRyaXBsZXRzIDogJ3RyaXBsZXRzJywgdHJpcGxldHNEb3VibGUgOiAndHJpcGxldHNEb3VibGUnLCB0cmlwbGV0c0Z1bGwgOiAndHJpcGxldHNGdWxsJywgdHJpcGxldHNGdWxsRG91YmxlIDogJ3RyaXBsZXRzRnVsbERvdWJsZScsIHRyaXBsZXRzQ29uc3RhbnQgOiAndHJpcGxldHNDb25zdGFudCcsIHRyaXBsZXRzRG91YmxlQ29uc3RhbnQgOiAndHJpcGxldHNEb3VibGVDb25zdGFudCcsIHRyaXBsZXRzRnVsbENvbnN0YW50IDogJ3RyaXBsZXRzRnVsbENvbnN0YW50JywgdHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAndHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQnLCBsb25nVHJpcGxldHMgOiAnbG9uZ1RyaXBsZXRzJywgbG9uZ1RyaXBsZXRzRG91YmxlIDogJ2xvbmdUcmlwbGV0c0RvdWJsZScsIGxvbmdUcmlwbGV0c0Z1bGwgOiAnbG9uZ1RyaXBsZXRzRnVsbCcsIGxvbmdUcmlwbGV0c0Z1bGxEb3VibGUgOiAnbG9uZ1RyaXBsZXRzRnVsbERvdWJsZScsIGxvbmdUcmlwbGV0c0NvbnN0YW50IDogJ2xvbmdUcmlwbGV0c0NvbnN0YW50JywgbG9uZ1RyaXBsZXRzRG91YmxlQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzRG91YmxlQ29uc3RhbnQnLCBsb25nVHJpcGxldHNGdWxsQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzRnVsbENvbnN0YW50JywgbG9uZ1RyaXBsZXRzRnVsbERvdWJsZUNvbnN0YW50IDogJ2xvbmdUcmlwbGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIG5vbmU6ICcnIH07IGNvbnN0IENlbGxEZXNpbmdzID0geyBTcGVjaWFsMSA6ICdTcGVjaWFsMScsIFNwZWNpYWwyIDogJ1NwZWNpYWwyJywgU3BlY2lhbDMgOiAnU3BlY2lhbDMnLCBDRUxMSGVscGVyVGV4dCA6ICdDRUxMSGVscGVyVGV4dCcsIHNtYWxsMSA6ICdzbWFsbDEnLCBzbWFsbDIgOiAnc21hbGwyJywgbm9ybWFsMSA6ICdub3JtYWwxJywgbm9ybWFsMiA6ICdub3JtYWwyJywgbm9ybWFsMyA6ICdub3JtYWwzJywgbm9ybWFsNCA6ICdub3JtYWw0Jywgbm9ybWFsNSA6ICdub3JtYWw1Jywgbm9ybWFsNiA6ICdub3JtYWw2Jywgbm9ybWFsNyA6ICdub3JtYWw3Jywgd2lkZTEgOiAnd2lkZTEnLCB3aWRlMiA6ICd3aWRlMicsIHdpZGUzIDogJ3dpZGUzJywgd2lkZTQgOiAnd2lkZTQnLCB3aWRlNSA6ICd3aWRlNScsIHdpZGU2IDogJ3dpZGU2Jywgd2lkZTcgOiAnd2lkZTcnLCB3aWRlOCA6ICd3aWRlOCcsIHdpZGU5IDogJ3dpZGU5Jywgd2lkZTEwIDogJ3dpZGUxMCcsIHdpZGUxMSA6ICd3aWRlMTEnIH07IGNvbnN0IFBhZ2luZyA9IHsgbGVhZGluZyA6ICdsZWFkaW5nJywgY2VudGVyZWQgOiAnY2VudGVyZWQnLCBub25lIDogJycgfTsgY29uc3QgT3JpZW50YXRpb24gPSB7IGhvcml6b250YWwgOiAnaG9yaXpvbnRhbCcsIHZlcnRpY2FsIDogJ3ZlcnRpY2FsJyB9OyBmdW5jdGlvbiBTZWFyY2gocmVxdWVzdCxleHRyYSxzZXBhcmF0b3IsamF2YXNjcmlwdENvbmZpZyxvdXRwdXQpIHsgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDsgdGhpcy5leHRyYSA9IGV4dHJhOyB0aGlzLnNlcGFyYXRvciA9IHNlcGFyYXRvcjsgdGhpcy5qYXZhc2NyaXB0Q29uZmlnID0gamF2YXNjcmlwdENvbmZpZzsgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7IH0gZnVuY3Rpb24gTW9kdWxlUmVxdWVzdCh1cmwsbWV0aG9kLGhlYWRlcnMsaHR0cEJvZHkpIHsgdGhpcy51cmwgPSB1cmw7IHRoaXMubWV0aG9kID0gbWV0aG9kOyB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzOyB0aGlzLmh0dHBCb2R5ID0gaHR0cEJvZHk7IH0gZnVuY3Rpb24gRXh0cmEoY29tbWFuZHMsZXh0cmFJbmZvKSB7IHRoaXMuY29tbWFuZHMgPSBjb21tYW5kczsgdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87IH0gZnVuY3Rpb24gQ29tbWFuZHMoY29tbWFuZE5hbWUscGFyYW1zKSB7IHRoaXMuY29tbWFuZE5hbWUgPSBjb21tYW5kTmFtZTsgdGhpcy5wYXJhbXMgPSBwYXJhbXM7IH0gZnVuY3Rpb24gSmF2YXNjcmlwdENvbmZpZyhyZW1vdmVKYXZhc2NyaXB0LGxvYWRJbldlYlZpZXcsamF2YVNjcmlwdCkgeyB0aGlzLnJlbW92ZUphdmFzY3JpcHQgPSByZW1vdmVKYXZhc2NyaXB0OyB0aGlzLmxvYWRJbldlYlZpZXcgPSBsb2FkSW5XZWJWaWV3OyB0aGlzLmphdmFTY3JpcHQgPSBqYXZhU2NyaXB0OyB9IGZ1bmN0aW9uIEtleVZhbHVlKGtleSx2YWx1ZSkgeyB0aGlzLmtleSA9IGtleTsgdGhpcy52YWx1ZSA9IHZhbHVlOyB9IGZ1bmN0aW9uIE91dHB1dChjZWxsRGVzaW5nLG9yaWVudGF0aW9uLGRlZmF1bHRMYXlvdXQscGFnaW5nLHNlY3Rpb24sbGF5b3V0LGRhdGEpIHsgdGhpcy5jZWxsRGVzaW5nID0gY2VsbERlc2luZzsgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uOyB0aGlzLmRlZmF1bHRMYXlvdXQgPSBkZWZhdWx0TGF5b3V0OyB0aGlzLnBhZ2luZyA9IHBhZ2luZzsgdGhpcy5zZWN0aW9uID0gc2VjdGlvbjsgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7IHRoaXMuZGF0YSA9IGRhdGE7IH0gZnVuY3Rpb24gU2VjdGlvbihzZWN0aW9uTmFtZSxzZXBhcmF0b3IpIHsgdGhpcy5zZWN0aW9uTmFtZSA9IHNlY3Rpb25OYW1lOyB0aGlzLnNlcGFyYXRvciA9IHNlcGFyYXRvcjsgfSBmdW5jdGlvbiBMYXlvdXQoaW5zZXRzLCB2aXNpYmxlQ2VsbHNXaWR0aFMsdmlzaWJsZUNlbGxzV2lkdGhNLHZpc2libGVDZWxsc1dpZHRoTCwgdmlzaWJsZUNlbGxzSGVpZ2h0LCBoZWlnaHRGb3JWaXNpYmxlQ2VsbHMsIGNlbGxTaXplLCByYXRpbywgY29uc3RhbnQsIGhvcml6b250YWxTcGFjaW5nLCB2ZXJ0aWNhbFNwYWNpbmcpIHsgdGhpcy5pbnNldHMgPSBpbnNldHM7IHRoaXMudmlzaWJsZUNlbGxzV2lkdGhTID0gdmlzaWJsZUNlbGxzV2lkdGhTOyB0aGlzLnZpc2libGVDZWxsc1dpZHRoTSA9IHZpc2libGVDZWxsc1dpZHRoTTsgdGhpcy52aXNpYmxlQ2VsbHNXaWR0aEwgPSB2aXNpYmxlQ2VsbHNXaWR0aEw7IHRoaXMudmlzaWJsZUNlbGxzSGVpZ2h0ID0gdmlzaWJsZUNlbGxzSGVpZ2h0OyB0aGlzLmhlaWdodEZvclZpc2libGVDZWxscyA9IGhlaWdodEZvclZpc2libGVDZWxsczsgdGhpcy5jZWxsU2l6ZSA9IGNlbGxTaXplOyB0aGlzLnJhdGlvID0gcmF0aW87IHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDsgdGhpcy5ob3Jpem9udGFsU3BhY2luZyA9IGhvcml6b250YWxTcGFjaW5nOyB0aGlzLnZlcnRpY2FsU3BhY2luZyA9IHZlcnRpY2FsU3BhY2luZzsgfSBmdW5jdGlvbiBJbnNldHModG9wLGJvdHRvbSxsZWZ0LHJpZ2h0KSB7IHRoaXMudG9wID0gdG9wOyB0aGlzLmJvdHRvbSA9IGJvdHRvbTsgdGhpcy5sZWZ0ID0gbGVmdDsgdGhpcy5yaWdodCA9IHJpZ2h0OyB9IGZ1bmN0aW9uIFNpemUod2lkdGgsaGVpZ2h0KSB7IHRoaXMud2lkdGggPSB3aWR0aDsgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7IH0gZnVuY3Rpb24gUmF0aW8oaW5SZWxhdGlvbixudW1iZXIxLG51bWJlcjIpIHsgdGhpcy5pblJlbGF0aW9uID0gaW5SZWxhdGlvbjsgdGhpcy5udW1iZXIxID0gbnVtYmVyMTsgdGhpcy5udW1iZXIyID0gbnVtYmVyMjsgfSBmdW5jdGlvbiBEYXRhKGltYWdlLHRpdGxlLGRlc2NyaXB0aW9uLGZpZWxkMSxmaWVsZDIsZmllbGQzLGZpZWxkNCxpc0NoYXB0ZXIsbGluayxvcGVuSW5XZWJWaWV3KSB7IHRoaXMuaW1hZ2UgPSBpbWFnZTsgdGhpcy50aXRsZSA9IHRpdGxlOyB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247IHRoaXMuZmllbGQxID0gZmllbGQxOyB0aGlzLmZpZWxkMiA9IGZpZWxkMjsgdGhpcy5maWVsZDMgPSBmaWVsZDM7IHRoaXMuZmllbGQ0ID0gZmllbGQ0OyB0aGlzLmlzQ2hhcHRlciA9IGlzQ2hhcHRlcjsgdGhpcy5saW5rID0gbGluazsgdGhpcy5vcGVuSW5XZWJWaWV3ID0gb3BlbkluV2ViVmlldzsgfSBmdW5jdGlvbiBxdWlja0RhdGEobGluayxpbWFnZSx0aXRsZSxmaWVsZDEpIHsgcmV0dXJuIG5ldyBEYXRhKGltYWdlLHRpdGxlLCd1bmtub3duJyxmaWVsZDEsJ3Vua25vd24nLCd1bmtub3duJywndW5rbm93bicsZmFsc2UsbGluayk7IH0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7IHZhciBqLCB4LCBpOyBmb3IgKGkgPSBhLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHsgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpOyB4ID0gYVtpXTsgYVtpXSA9IGFbal07IGFbal0gPSB4OyB9IHJldHVybiBhOyB9IHZhciBzYXZlZERhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna2V0c3UtZmluYWwtZGF0YScpOyB2YXIgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2Uoc2F2ZWREYXRhLmlubmVySFRNTCk7IGxldCBvdXRwdXQgPSBbXTsgbGV0IGVtcHR5S2V5VmFsdWUgPSBbbmV3IEtleVZhbHVlKCcnLCcnKV07IGxldCBzZWFyY2hQYWdlT2JqZWN0ID0gbmV3IFNlYXJjaChuZXcgTW9kdWxlUmVxdWVzdCgnJywnJyxlbXB0eUtleVZhbHVlLG51bGwpLG5ldyBFeHRyYShbbmV3IENvbW1hbmRzKCcnLGVtcHR5S2V5VmFsdWUpXSxlbXB0eUtleVZhbHVlKSwnJyxuZXcgSmF2YXNjcmlwdENvbmZpZyh0cnVlLGZhbHNlLCcnKSxvdXRwdXQpOyB2YXIgZmluYWxKc29uID0gSlNPTi5zdHJpbmdpZnkoc2VhcmNoUGFnZU9iamVjdCk7IHNhdmVkRGF0YS5pbm5lckhUTUwgPSBmaW5hbEpzb247ICAvKiBKQVZBU0NSSVBUIEVORFMgKi9cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgS0VUU1VfQVNZTkMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdC5tZXNzYWdlSGFuZGxlcnMuRVhFQ1VURV9LRVRTVV9BU1lOQy5wb3N0TWVzc2FnZSgnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgIn0sIm91dHB1dCI6W3siY2VsbERlc2luZyI6Im5vcm1hbDEiLCJvcmllbnRhdGlvbiI6InZlcnRpY2FsIiwiZGVmYXVsdExheW91dCI6IndpZGUiLCJwYWdpbmciOiIiLCJzZWN0aW9uIjp7InNlY3Rpb25OYW1lIjoiIiwic2VwYXJhdG9yIjpmYWxzZX0sImxheW91dCI6eyJpbnNldHMiOnsidG9wIjowLCJib3R0b20iOjAsImxlZnQiOjAsInJpZ2h0IjowfSwidmlzaWJsZUNlbGxzV2lkdGhTIjoyLCJ2aXNpYmxlQ2VsbHNXaWR0aE0iOjIsInZpc2libGVDZWxsc1dpZHRoTCI6MiwidmlzaWJsZUNlbGxzSGVpZ2h0IjoyLCJoZWlnaHRGb3JWaXNpYmxlQ2VsbHMiOjQwMCwiY2VsbFNpemUiOnsid2lkdGgiOjMwMCwiaGVpZ2h0IjozMDB9LCJyYXRpbyI6eyJpblJlbGF0aW9uIjoid2lkdGgiLCJudW1iZXIxIjoxLCJudW1iZXIyIjoyfSwiY29uc3RhbnQiOnsid2lkdGgiOjEsImhlaWdodCI6Mn0sImhvcml6b250YWxTcGFjaW5nIjowLCJ2ZXJ0aWNhbFNwYWNpbmciOjB9LCJkYXRhIjpbeyJpbWFnZSI6eyJ1cmwiOiIiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XSwiaHR0cEJvZHkiOm51bGx9LCJ0aXRsZSI6IiIsImRlc2NyaXB0aW9uIjoiIiwiZmllbGQxIjoiIiwiZmllbGQyIjoiIiwiZmllbGQzIjoiIiwiZmllbGQ0IjoiIiwib3BlbkluV2ViVmlldyI6ZmFsc2UsImlzQ2hhcHRlciI6ZmFsc2UsImxpbmsiOnsidXJsIjoiZW1wdHkiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiJrZXkiLCJ2YWx1ZSI6InZhbHVlIn1dLCJodHRwQm9keSI6bnVsbH19XX1dLCJtb2R1bGVDcmVhdG9ySWRyWE94cFBLVkxEV0JNbHZ2V0h3RSI6eyJwYXRoIjoiWklxRGYiLCJpZCI6InNlYXJjaCwwY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fV0sImluZm8iOlt7InJlcXVlc3QiOnsidXJsIjoiIiwibWV0aG9kIjoiZ2V0IiwiaGVhZGVycyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV0sImh0dHBCb2R5IjpudWxsfSwiZXh0cmEiOnsiY29tbWFuZHMiOlt7ImNvbW1hbmROYW1lIjoiIiwicGFyYW1zIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XX1dLCJleHRyYUluZm8iOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfSwiamF2YXNjcmlwdENvbmZpZyI6eyJyZW1vdmVKYXZhc2NyaXB0Ijp0cnVlLCJsb2FkSW5XZWJWaWV3IjpmYWxzZSwiamF2YVNjcmlwdCI6IlxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAvKiBKQVZBU0NSSVBUIFNUQVJUUyAqLyAgZnVuY3Rpb24gSW5mbyhyZXF1ZXN0LCBleHRyYSwgamF2YXNjcmlwdENvbmZpZywgb3V0cHV0KSB7IHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7IHRoaXMuZXh0cmEgPSBleHRyYTsgdGhpcy5qYXZhc2NyaXB0Q29uZmlnID0gamF2YXNjcmlwdENvbmZpZzsgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7fWZ1bmN0aW9uIE1vZHVsZVJlcXVlc3QodXJsLCBtZXRob2QsIGhlYWRlcnMsIGh0dHBCb2R5KSB7IHRoaXMudXJsID0gdXJsOyB0aGlzLm1ldGhvZCA9IG1ldGhvZDsgdGhpcy5oZWFkZXJzID0gaGVhZGVyczsgdGhpcy5odHRwQm9keSA9IGh0dHBCb2R5O31mdW5jdGlvbiBFeHRyYShjb21tYW5kcywgZXh0cmFJbmZvKSB7IHRoaXMuY29tbWFuZHMgPSBjb21tYW5kczsgdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87fWZ1bmN0aW9uIENvbW1hbmRzKGNvbW1hbmROYW1lLCBwYXJhbXMpIHsgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lOyB0aGlzLnBhcmFtcyA9IHBhcmFtczt9ZnVuY3Rpb24gSmF2YXNjcmlwdENvbmZpZyhyZW1vdmVKYXZhc2NyaXB0LCBsb2FkSW5XZWJWaWV3LCBqYXZhU2NyaXB0KSB7IHRoaXMucmVtb3ZlSmF2YXNjcmlwdCA9IHJlbW92ZUphdmFzY3JpcHQ7IHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7IHRoaXMuamF2YVNjcmlwdCA9IGphdmFTY3JpcHQ7fWZ1bmN0aW9uIEtleVZhbHVlKGtleSwgdmFsdWUpIHsgdGhpcy5rZXkgPSBrZXk7IHRoaXMudmFsdWUgPSB2YWx1ZTt9ZnVuY3Rpb24gQ2hhcHRlcihjaGFwTmFtZSwgbGluayxvcGVuSW5XZWJWaWV3KSB7IHRoaXMuY2hhcE5hbWUgPSBjaGFwTmFtZTsgdGhpcy5saW5rID0gbGluazsgdGhpcy5vcGVuSW5XZWJWaWV3ID0gb3BlbkluV2ViVmlldzt9ZnVuY3Rpb24gT3V0cHV0KGltYWdlLCB0aXRsZSwgbGluaywgZGVzY3JpcHRpb24sIGdlbnJlcywgZmllbGQxLCBmaWVsZDIsIGZpZWxkMywgZmllbGQ0LCBjaGFwdGVycykgeyB0aGlzLmltYWdlID0gaW1hZ2U7IHRoaXMubGluayA9IGxpbms7IHRoaXMudGl0bGUgPSB0aXRsZTsgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uOyB0aGlzLmdlbnJlcyA9IGdlbnJlczsgdGhpcy5maWVsZDEgPSBmaWVsZDE7IHRoaXMuZmllbGQyID0gZmllbGQyOyB0aGlzLmZpZWxkMyA9IGZpZWxkMzsgdGhpcy5maWVsZDQgPSBmaWVsZDQ7IHRoaXMuY2hhcHRlcnMgPSBjaGFwdGVyczt9ZnVuY3Rpb24gZ2V0U3R1ZmYoYXJyYXksbWF0Y2gpIHsgZm9yICh2YXIgeCA9IDAgOyB4PCBhcnJheS5sZW5ndGg7eCsrKSB7IGxldCBkYXRhID0gYXJyYXlbeF0uaW5uZXJUZXh0OyBpZiAoZGF0YS5pbmNsdWRlcyhtYXRjaCkpIHsgcmV0dXJuIGRhdGEucmVwbGFjZShtYXRjaCwnJykudHJpbSgpOyB9IH0gfWZ1bmN0aW9uIGdldEh0bWxTdHVmZihhcnJheSxtYXRjaCkgeyBmb3IgKHZhciB4ID0gMCA7IHg8IGFycmF5Lmxlbmd0aDt4KyspIHsgbGV0IGRhdGEgPSBhcnJheVt4XS5pbm5lclRleHQ7IGlmIChkYXRhLmluY2x1ZGVzKG1hdGNoKSkgeyByZXR1cm4gYXJyYXlbeF07IH0gfX12YXIgc2F2ZWREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tldHN1LWZpbmFsLWRhdGEnKTt2YXIgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2Uoc2F2ZWREYXRhLmlubmVySFRNTCk7bGV0IGVtcHR5S2V5VmFsdWUgPSBbbmV3IEtleVZhbHVlKCcnLCAnJyldO3ZhciBlcGlzb2RlcyA9IFtdO3ZhciB0eXBlID0gJ2VtcHR5Jzt2YXIgc3RhdHVzID0gJ1Vua25vd24nO3ZhciBnZW5yZXMgPSBbXTt2YXIgZGVzYyA9ICcnO3ZhciB0aXRsZSA9ICcnO3ZhciBpbWFnZSA9ICcnO2ltYWdlID0gbmV3IE1vZHVsZVJlcXVlc3QoaW1hZ2UsJ2dldCcsZW1wdHlLZXlWYWx1ZSxudWxsKTt2YXIgZ2VucmVzQXJyYXkgPSBbXTtsZXQgaW5mb1BhZ2VPYmplY3QgPSBuZXcgSW5mbyhuZXcgTW9kdWxlUmVxdWVzdCgnJywgJycsIGVtcHR5S2V5VmFsdWUsIG51bGwpLCBuZXcgRXh0cmEoW25ldyBDb21tYW5kcygnJywgZW1wdHlLZXlWYWx1ZSldLCBlbXB0eUtleVZhbHVlKSwgbmV3IEphdmFzY3JpcHRDb25maWcoZmFsc2UsIGZhbHNlLCAnJyksIG5ldyBPdXRwdXQoaW1hZ2UsIHRpdGxlLCBwYXJzZWRKc29uLnJlcXVlc3QsIGRlc2MsIGdlbnJlcywgc3RhdHVzLCAnQW5pbWUnLCB0eXBlLCAnRXBzOiAnICsgZXBpc29kZXMubGVuZ3RoLCBlcGlzb2RlcykpO3ZhciBmaW5hbEpzb24gPSBKU09OLnN0cmluZ2lmeShpbmZvUGFnZU9iamVjdCk7c2F2ZWREYXRhLmlubmVySFRNTCA9IGZpbmFsSnNvbjsgIC8qIEpBVkFTQ1JJUFQgRU5EUyAqL1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLRVRTVV9BU1lOQyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5FWEVDVVRFX0tFVFNVX0FTWU5DLnBvc3RNZXNzYWdlKCcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAifSwib3V0cHV0Ijp7ImltYWdlIjp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dLCJodHRwQm9keSI6bnVsbH0sImxpbmsiOnsidXJsIjoiIiwibWV0aG9kIjoiZ2V0IiwiaGVhZGVycyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV0sImh0dHBCb2R5IjpudWxsfSwidGl0bGUiOiIiLCJkZXNjcmlwdGlvbiI6IiIsImdlbnJlcyI6WyIiXSwiZmllbGQxIjoiIiwiZmllbGQyIjoiIiwiZmllbGQzIjoiIiwiZmllbGQ0IjoiIiwiY2hhcHRlcnMiOlt7ImNoYXBOYW1lIjoiIiwib3BlbkluV2ViVmlldyI6ZmFsc2UsImxpbmsiOnsidXJsIjoiZW1wdHkiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiJrZXkiLCJ2YWx1ZSI6InZhbHVlIn1dLCJodHRwQm9keSI6bnVsbH19XX0sIm1vZHVsZUNyZWF0b3JJZHdjVG56c05Gc29tVnhXWldPWkVkIjp7InBhdGgiOiJKSUZLYSIsImlkIjoiaW5mbywwY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fV0sImNoYXB0ZXJzIjpbeyJyZXF1ZXN0Ijp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6ImtleSIsInZhbHVlIjoidmFsdWUifV0sImh0dHBCb2R5IjpudWxsfSwiZXh0cmEiOnsiY29tbWFuZHMiOlt7ImNvbW1hbmROYW1lIjoiIiwicGFyYW1zIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XX1dLCJleHRyYUluZm8iOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfSwiamF2YXNjcmlwdENvbmZpZyI6eyJyZW1vdmVKYXZhc2NyaXB0Ijp0cnVlLCJsb2FkSW5XZWJWaWV3IjpmYWxzZSwiamF2YVNjcmlwdCI6IlxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICAvKiBKQVZBU0NSSVBUIFNUQVJUUyAqLyAgIGZ1bmN0aW9uIENoYXB0ZXJzKHJlcXVlc3QsIGV4dHJhLCBqYXZhc2NyaXB0Q29uZmlnLCBvdXRwdXQpIHsgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDsgdGhpcy5leHRyYSA9IGV4dHJhOyB0aGlzLmphdmFzY3JpcHRDb25maWcgPSBqYXZhc2NyaXB0Q29uZmlnOyB0aGlzLm91dHB1dCA9IG91dHB1dDsgfSBmdW5jdGlvbiBNb2R1bGVSZXF1ZXN0KHVybCwgbWV0aG9kLCBoZWFkZXJzLCBodHRwQm9keSkgeyB0aGlzLnVybCA9IHVybDsgdGhpcy5tZXRob2QgPSBtZXRob2Q7IHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7IHRoaXMuaHR0cEJvZHkgPSBodHRwQm9keTsgfSBmdW5jdGlvbiBFeHRyYShjb21tYW5kcywgZXh0cmFJbmZvKSB7IHRoaXMuY29tbWFuZHMgPSBjb21tYW5kczsgdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87IH0gZnVuY3Rpb24gQ29tbWFuZHMoY29tbWFuZE5hbWUsIHBhcmFtcykgeyB0aGlzLmNvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7IHRoaXMucGFyYW1zID0gcGFyYW1zOyB9IGZ1bmN0aW9uIEphdmFzY3JpcHRDb25maWcocmVtb3ZlSmF2YXNjcmlwdCwgbG9hZEluV2ViVmlldywgamF2YVNjcmlwdCkgeyB0aGlzLnJlbW92ZUphdmFzY3JpcHQgPSByZW1vdmVKYXZhc2NyaXB0OyB0aGlzLmxvYWRJbldlYlZpZXcgPSBsb2FkSW5XZWJWaWV3OyB0aGlzLmphdmFTY3JpcHQgPSBqYXZhU2NyaXB0OyB9IGZ1bmN0aW9uIEtleVZhbHVlKGtleSwgdmFsdWUpIHsgdGhpcy5rZXkgPSBrZXk7IHRoaXMudmFsdWUgPSB2YWx1ZTsgfSBmdW5jdGlvbiBPdXRwdXQoIHZpZGVvcywgaW1hZ2VzLCB0ZXh0KSB7IHRoaXMudmlkZW9zID0gdmlkZW9zOyB0aGlzLmltYWdlcyA9IGltYWdlczsgdGhpcy50ZXh0ID0gdGV4dDsgfSBmdW5jdGlvbiBWaWRlb3MobmVlZHNSZXNvbHZlciwgcmF3VmlkZW8pIHsgdGhpcy5uZWVkc1Jlc29sdmVyID0gbmVlZHNSZXNvbHZlcjsgdGhpcy5yYXdWaWRlbyA9IHJhd1ZpZGVvOyB9IGZ1bmN0aW9uIE5lZWRzUmVzb2x2ZXIocmVzb2x2ZXJJZGVudGlmaWVyLCBsaW5rKSB7IHRoaXMucmVzb2x2ZXJJZGVudGlmaWVyID0gcmVzb2x2ZXJJZGVudGlmaWVyOyB0aGlzLmxpbmsgPSBsaW5rOyB9IGZ1bmN0aW9uIFJhd1ZpZGVvKHZpZGVvKSB7IHRoaXMudmlkZW8gPSB2aWRlbzsgfSBmdW5jdGlvbiBWaWRlbyh2aWRlb1F1YWxpdHksIHZpZGVvTGluaykgeyB0aGlzLnZpZGVvUXVhbGl0eSA9IHZpZGVvUXVhbGl0eTsgdGhpcy52aWRlb0xpbmsgPSB2aWRlb0xpbms7IH0gZnVuY3Rpb24gVGV4dCh0ZXh0KSB7IHRoaXMudGV4dCA9IHRleHQ7IH0gdmFyIG91dHB1dCA9IFtdOyB2YXIgc2F2ZWREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tldHN1LWZpbmFsLWRhdGEnKTsgdmFyIHBhcnNlZEpzb24gPSBKU09OLnBhcnNlKHNhdmVkRGF0YS5pbm5lckhUTUwpOyB2YXIgZW1wdHlLZXlWYWx1ZSA9IFtuZXcgS2V5VmFsdWUoJycsICcnKV07IGxldCBlbXB0eUV4dHJhID0gbmV3IEV4dHJhKFtuZXcgQ29tbWFuZHMoJycsIGVtcHR5S2V5VmFsdWUpXSwgZW1wdHlLZXlWYWx1ZSk7IHZhciBjaGFwdGVyc09iamVjdCA9IG5ldyBDaGFwdGVycyhuZXcgTW9kdWxlUmVxdWVzdCgnJywgJycsIGVtcHR5S2V5VmFsdWUsIG51bGwpLCBlbXB0eUV4dHJhLCBuZXcgSmF2YXNjcmlwdENvbmZpZyhmYWxzZSwgZmFsc2UsICcnKSwgbmV3IE91dHB1dChuZXcgVmlkZW9zKG51bGwsIG91dHB1dCksIG51bGwsIG51bGwpKTsgdmFyIGZpbmFsSnNvbiA9IEpTT04uc3RyaW5naWZ5KGNoYXB0ZXJzT2JqZWN0KTsgc2F2ZWREYXRhLmlubmVySFRNTCA9IGZpbmFsSnNvbjsgIC8qIEpBVkFTQ1JJUFQgRU5EUyAqL1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLRVRTVV9BU1lOQyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5FWEVDVVRFX0tFVFNVX0FTWU5DLnBvc3RNZXNzYWdlKCcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAifSwib3V0cHV0Ijp7InZpZGVvcyI6eyJuZWVkc1Jlc29sdmVyIjpbeyJyZXNvbHZlcklkZW50aWZpZXIiOiIiLCJsaW5rIjp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6ImtleSIsInZhbHVlIjoidmFsdWUifV0sImh0dHBCb2R5IjpudWxsfX1dLCJyYXdWaWRlbyI6W3sidmlkZW8iOlt7InZpZGVvUXVhbGl0eSI6IiIsInZpZGVvTGluayI6eyJ1cmwiOiJodHRwOi8vY29tbW9uZGF0YXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZ3R2LXZpZGVvcy1idWNrZXQvc2FtcGxlL0JpZ0J1Y2tCdW5ueS5tcDQiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiJrZXkiLCJ2YWx1ZSI6InZhbHVlIn1dLCJodHRwQm9keSI6bnVsbH19XX1dfSwiaW1hZ2VzIjpbeyJ1cmwiOiJlbXB0eSIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6ImtleSIsInZhbHVlIjoidmFsdWUifV0sImh0dHBCb2R5IjpudWxsfV0sInRleHQiOnsidGV4dCI6IiJ9fSwibW9kdWxlQ3JlYXRvcklkbWtzalRBRGJHQVRHbmdrUFp1RkIiOnsicGF0aCI6IllMS0pxIiwiaWQiOiJjaGFwdGVycywwY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fV0sIm1vZHVsZVJlc29sdmVycyI6W3sicmVzb2x2ZXJJbmZvIjp7InJlc29sdmVyTmFtZSI6IiIsIm5hbWVNYXRjaGVzIjpbIiJdLCJkZXZlbG9wZXIiOiIiLCJtb2R1bGVJRCI6IiIsInJlc29sdmVyVmVyc2lvbiI6MSwiYmFzZVVSTCI6IiIsIm1vZHVsZUNyZWF0b3JJZEVHR05EcHFNekRxalFxQm1CWGtvIjp7InBhdGgiOiJ4VVRveCIsImlkIjoibW9kdWxlUmVzb2x2ZXJzLDAscmVzb2x2ZXJJbmZvc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVzb2x2ZXIgUGFyYW1ldGVycyIsImxpc3ROYW1lIjoicGFyYW1ldGVycyJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9LCJtb2R1bGVDcmVhdG9ySWRlc0NGVmpJbk1OQ3ZRZ2JjTm53cyI6eyJwYXRoIjoiZG5Zb08iLCJpZCI6Im1vZHVsZVJlc29sdmVycywwLHJlc29sdmVySW5mb2NlbGwiLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6InBhcmFtZXRlcnMifSwiY2VsbHNIaWRkZW4iOmZhbHNlfX0sInJlc29sdmVyIjpbeyJyZXF1ZXN0Ijp7InVybCI6IiIsIm1ldGhvZCI6ImdldCIsImhlYWRlcnMiOlt7ImtleSI6ImtleSIsInZhbHVlIjoidmFsdWUifV0sImh0dHBCb2R5IjpudWxsfSwiZXh0cmEiOnsiY29tbWFuZHMiOlt7ImNvbW1hbmROYW1lIjoiIiwicGFyYW1zIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XX1dLCJleHRyYUluZm8iOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfSwiamF2YXNjcmlwdENvbmZpZyI6eyJyZW1vdmVKYXZhc2NyaXB0IjpmYWxzZSwibG9hZEluV2ViVmlldyI6ZmFsc2UsImphdmFTY3JpcHQiOiJcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgLyogSkFWQVNDUklQVCBTVEFSVFMgKi8gIGZ1bmN0aW9uIFJlc29sdmVyICggcmVxdWVzdCwgZXh0cmEsIGphdmFzY3JpcHRDb25maWcsIG91dHB1dCApIHsgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDsgdGhpcy5leHRyYSA9IGV4dHJhOyB0aGlzLmphdmFzY3JpcHRDb25maWcgPSBqYXZhc2NyaXB0Q29uZmlnOyB0aGlzLm91dHB1dCA9IG91dHB1dDt9ZnVuY3Rpb24gTW9kdWxlUmVxdWVzdCAoIHVybCwgbWV0aG9kLCBoZWFkZXJzLCBodHRwQm9keSApIHsgdGhpcy51cmwgPSB1cmw7IHRoaXMubWV0aG9kID0gbWV0aG9kOyB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzOyB0aGlzLmh0dHBCb2R5ID0gaHR0cEJvZHk7fWZ1bmN0aW9uIEV4dHJhICggY29tbWFuZHMsIGV4dHJhSW5mbyApIHsgdGhpcy5jb21tYW5kcyA9IGNvbW1hbmRzOyB0aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbzt9ZnVuY3Rpb24gQ29tbWFuZHMgKCBjb21tYW5kTmFtZSwgcGFyYW1zICkgeyB0aGlzLmNvbW1hbmROYW1lID0gY29tbWFuZE5hbWU7IHRoaXMucGFyYW1zID0gcGFyYW1zO31mdW5jdGlvbiBKYXZhc2NyaXB0Q29uZmlnICggcmVtb3ZlSmF2YXNjcmlwdCwgbG9hZEluV2ViVmlldywgamF2YVNjcmlwdCApIHsgdGhpcy5yZW1vdmVKYXZhc2NyaXB0ID0gcmVtb3ZlSmF2YXNjcmlwdDsgdGhpcy5sb2FkSW5XZWJWaWV3ID0gbG9hZEluV2ViVmlldzsgdGhpcy5qYXZhU2NyaXB0ID0gamF2YVNjcmlwdDt9ZnVuY3Rpb24gS2V5VmFsdWUgKCBrZXksIHZhbHVlICkgeyB0aGlzLmtleSA9IGtleTsgdGhpcy52YWx1ZSA9IHZhbHVlO31mdW5jdGlvbiBPdXRwdXQgKCB2aWRlbyApIHsgdGhpcy52aWRlbyA9IHZpZGVvO31mdW5jdGlvbiBWaWRlbyAoIHZpZGVvUXVhbGl0eSwgdmlkZW9MaW5rICkgeyB0aGlzLnZpZGVvUXVhbGl0eSA9IHZpZGVvUXVhbGl0eTsgdGhpcy52aWRlb0xpbmsgPSB2aWRlb0xpbms7fWZ1bmN0aW9uIGdldE5leHQgKCBtYXRjaCwgYXJyYXkgKSB7IGZvciAoIHZhciB4ID0gMDsgeCA8IGFycmF5Lmxlbmd0aDsgeCsrICkgeyBsZXQgbU1hdGNoID0gYXJyYXlbIHggXTsgaWYgKCBtTWF0Y2guaW5jbHVkZXMoIG1hdGNoICkgKSB7IHJldHVybiBhcnJheVsgeCArIDEgXTsgfSB9fXZhciBzYXZlZERhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2tldHN1LWZpbmFsLWRhdGEnICk7dmFyIHBhcnNlZEpzb24gPSBKU09OLnBhcnNlKCBzYXZlZERhdGEuaW5uZXJIVE1MICk7dmFyIGVtcHR5S2V5VmFsdWUgPSBbIG5ldyBLZXlWYWx1ZSggJ1JlZmVyZXInLCBwYXJzZWRKc29uLnJlcXVlc3QudXJsICkgXTt2YXIgdmlkZW9zID0gWyBdO2xldCBlbXB0eUV4dHJhID0gbmV3IEV4dHJhKCBbIG5ldyBDb21tYW5kcyggJycsIGVtcHR5S2V5VmFsdWUgKSBdLCBlbXB0eUtleVZhbHVlICk7dmFyIGNoYXB0ZXJzT2JqZWN0ID0gbmV3IFJlc29sdmVyKCBuZXcgTW9kdWxlUmVxdWVzdCggJycsICcnLCBlbXB0eUtleVZhbHVlLCBudWxsICksIGVtcHR5RXh0cmEsIG5ldyBKYXZhc2NyaXB0Q29uZmlnKCBmYWxzZSwgZmFsc2UsICcnICksIG5ldyBPdXRwdXQoIHZpZGVvcyApICk7dmFyIGZpbmFsSnNvbiA9IEpTT04uc3RyaW5naWZ5KCBjaGFwdGVyc09iamVjdCApO3NhdmVkRGF0YS5pbm5lckhUTUwgPSBmaW5hbEpzb247ICAvKiBKQVZBU0NSSVBUIEVORFMgKi9cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgS0VUU1VfQVNZTkMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdC5tZXNzYWdlSGFuZGxlcnMuRVhFQ1VURV9LRVRTVV9BU1lOQy5wb3N0TWVzc2FnZSgnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgIn0sIm91dHB1dCI6eyJtb2R1bGVJRCI6IiIsInZpZGVvIjpbeyJ2aWRlb1F1YWxpdHkiOiI3MjAiLCJ2aWRlb0xpbmsiOnsidXJsIjoiaHR0cDovL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2d0di12aWRlb3MtYnVja2V0L3NhbXBsZS9CaWdCdWNrQnVubnkubXA0IiwibWV0aG9kIjoiZ2V0IiwiaGVhZGVycyI6W3sia2V5Ijoia2V5IiwidmFsdWUiOiJ2YWx1ZSJ9XSwiaHR0cEJvZHkiOm51bGx9fV19LCJtb2R1bGVDcmVhdG9ySWRMRk1vbXNZY1ZMWG1pSHdjanJoRSI6eyJwYXRoIjoialBoS0IiLCJpZCI6Im1vZHVsZVJlc29sdmVycywwLHJlc29sdmVyLDBjZWxsIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX19XSwibW9kdWxlQ3JlYXRvcklkZERZRFVOSWhCbHFERVdidGlzdVMiOnsicGF0aCI6IlhPTW5KIiwiaWQiOiJtb2R1bGVSZXNvbHZlcnMsMHNlY3Rpb24iLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IlJlc29sdmVyIn0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZE96RGZqTHFUY0lPSFl3Y2lDd1ZLIjp7InBhdGgiOiJyZXNvbHZlciIsImlkIjoibW9kdWxlUmVzb2x2ZXJzLDAscmVzb2x2ZXJzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJSZXNvbHZlciBSZXF1ZXN0IiwibGlzdE5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX19XSwicmVzcG9uc2VDb2RlRnVuY3Rpb25zIjpbeyJjb2RlIjowLCJtc2dUaXRsZSI6IiIsIm1zZ0JvZHkiOiIiLCJ0eXBlIjoibm9ybWFsIiwiZnVuY3Rpb25zIjpbeyJyZXF1ZXN0Ijp7InVybCI6ImVtcHR5IiwibWV0aG9kIjoiZ2V0IiwiaGVhZGVycyI6W3sia2V5Ijoia2V5IiwidmFsdWUiOiJ2YWx1ZSJ9XSwiaHR0cEJvZHkiOm51bGx9LCJleHRyYSI6eyJjb21tYW5kcyI6W3siY29tbWFuZE5hbWUiOiIiLCJwYXJhbXMiOlt7ImtleSI6IiIsInZhbHVlIjoiIn1dfV0sImV4dHJhSW5mbyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV19LCJqYXZhc2NyaXB0Q29uZmlnIjp7InJlbW92ZUphdmFzY3JpcHQiOnRydWUsImxvYWRJbldlYlZpZXciOmZhbHNlLCJqYXZhU2NyaXB0IjoiXG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIC8qIEpBVkFTQ1JJUFQgU1RBUlRTICovICAgIC8qIEpBVkFTQ1JJUFQgRU5EUyAqL1xuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLRVRTVV9BU1lOQyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0Lm1lc3NhZ2VIYW5kbGVycy5FWEVDVVRFX0tFVFNVX0FTWU5DLnBvc3RNZXNzYWdlKCcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAifSwibW9kdWxlQ3JlYXRvcklka1p1TGNlQVl3WW5ac0ZtUVBCWkkiOnsicGF0aCI6Inl3dVlNIiwiaWQiOiJyZXNwb25zZUNvZGVGdW5jdGlvbnMsMCxmdW5jdGlvbnMsMGNlbGwiLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IlJlcXVlc3QifSwiY2VsbHNIaWRkZW4iOmZhbHNlfX1dLCJtb2R1bGVDcmVhdG9ySWRxdFF3VGFRTFJxZXN4ek50a3NidyI6eyJwYXRoIjoiYmRLZmwiLCJpZCI6InJlc3BvbnNlQ29kZUZ1bmN0aW9ucywwc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiRnVuY3Rpb24ifSwiY2VsbHNIaWRkZW4iOmZhbHNlfSwibW9kdWxlQ3JlYXRvcklkaWR0VXhKcUhKSUJ5QkVDZWppTXgiOnsicGF0aCI6Ik5ZSFljIiwiaWQiOiJyZXNwb25zZUNvZGVGdW5jdGlvbnMsMCxzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJGdW5jdGlvbiBQYXJhbWV0ZXJzIiwibGlzdE5hbWUiOiJQYXJhbWV0ZXJzIn0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZEttaHlCY25wdGZkYVpkYkZmRHpJIjp7InBhdGgiOiJjelV3RiIsImlkIjoicmVzcG9uc2VDb2RlRnVuY3Rpb25zLDAsY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUGFyYW1ldGVycyJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9LCJtb2R1bGVDcmVhdG9ySWR4ak1nb0VCQXFNQktzSkNPdmtMWSI6eyJwYXRoIjoiZnVuY3Rpb25zIiwiaWQiOiJyZXNwb25zZUNvZGVGdW5jdGlvbnMsMCxmdW5jdGlvbnNzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJGdW5jdGlvbiBSZXF1ZXN0cyIsImxpc3ROYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fV0sImhlbHBlckZ1bmN0aW9ucyI6W3siZnVuY3Rpb25OYW1lIjoiZXhhbXBsZSIsIm1zZ1RpdGxlIjoiIiwibXNnQm9keSI6IiIsInR5cGUiOiJub3JtYWwiLCJmdW5jdGlvbnMiOlt7InJlcXVlc3QiOnsidXJsIjoiZW1wdHkiLCJtZXRob2QiOiJnZXQiLCJoZWFkZXJzIjpbeyJrZXkiOiJrZXkiLCJ2YWx1ZSI6InZhbHVlIn1dLCJodHRwQm9keSI6bnVsbH0sImV4dHJhIjp7ImNvbW1hbmRzIjpbeyJjb21tYW5kTmFtZSI6IiIsInBhcmFtcyI6W3sia2V5IjoiIiwidmFsdWUiOiIifV19XSwiZXh0cmFJbmZvIjpbeyJrZXkiOiIiLCJ2YWx1ZSI6IiJ9XX0sImphdmFzY3JpcHRDb25maWciOnsicmVtb3ZlSmF2YXNjcmlwdCI6dHJ1ZSwibG9hZEluV2ViVmlldyI6ZmFsc2UsImphdmFTY3JpcHQiOiJcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgLyogSkFWQVNDUklQVCBTVEFSVFMgKi8gICAgLyogSkFWQVNDUklQVCBFTkRTICovXG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtFVFNVX0FTWU5DICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXQubWVzc2FnZUhhbmRsZXJzLkVYRUNVVEVfS0VUU1VfQVNZTkMucG9zdE1lc3NhZ2UoJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICJ9LCJtb2R1bGVDcmVhdG9ySWR4cHRZd1FrTlJCQkVDQ2dLWEFXbCI6eyJwYXRoIjoiVUtDZW0iLCJpZCI6ImhlbHBlckZ1bmN0aW9ucywwLGZ1bmN0aW9ucywwY2VsbCIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9fV0sIm1vZHVsZUNyZWF0b3JJZHJRR3hmQXRNWnZRekhsZUFYVnR0Ijp7InBhdGgiOiJNbkxEUiIsImlkIjoiaGVscGVyRnVuY3Rpb25zLDBzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZG51VWFGQWtES3RMQWdVdUtEandaIjp7InBhdGgiOiJvb0lDciIsImlkIjoiaGVscGVyRnVuY3Rpb25zLDAsc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiRnVuY3Rpb24gUGFyYW1ldGVycyIsImxpc3ROYW1lIjoiUGFyYW1ldGVycyJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9LCJtb2R1bGVDcmVhdG9ySWRUdW1GRkdKSGdPWXdaRUd5alFvRyI6eyJwYXRoIjoic1hOR3UiLCJpZCI6ImhlbHBlckZ1bmN0aW9ucywwLGNlbGwiLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IlBhcmFtZXRlcnMifSwiY2VsbHNIaWRkZW4iOmZhbHNlfSwibW9kdWxlQ3JlYXRvcklkSm1tT2VwTE9zRGRPcU1wUGZpSkciOnsicGF0aCI6ImZ1bmN0aW9ucyIsImlkIjoiaGVscGVyRnVuY3Rpb25zLDAsZnVuY3Rpb25zc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiRnVuY3Rpb24gUmVxdWVzdHMiLCJsaXN0TmFtZSI6IlJlcXVlc3QifSwiY2VsbHNIaWRkZW4iOmZhbHNlfX1dLCJtb2R1bGVDcmVhdG9yR2xvYmFsT3B0aW9ucyI6eyJzZWxlY3RlZCI6Im1vZHVsZUNyZWF0b3JJZHRWdlV2ZkRPbldRUVlDa2RzYU1xIiwibm90ZXNEYXRhIjp7Im9wZW5lZE5vdGVzIjpbIm9Gd2p6dkRwZGZ4bGFLUXJHVXdjIl0sImFjdGl2ZU5vdGUiOiJvRndqenZEcGRmeGxhS1FyR1V3YyIsIm5vdGVzIjp7fX0sImhpZGVWaWV3cyI6W10sImlkIjoid1JVWmtyaHJrY2ZkUmNjIiwicHJvamVjdE5hbWUiOiJOZXcgUHJvamVjdCJ9LCJtb2R1bGVDcmVhdG9ySWRBRlNuVUJyUlRKQmV3Vmp4c3Z3diI6eyJwYXRoIjoibWFpblBhZ2UiLCJpZCI6Im1haW5QYWdlc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiTWFpbiBQYWdlIiwibGlzdE5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZHVISFpMWnZkdURJRllHckNjcEdQIjp7InBhdGgiOiJzZWFyY2giLCJpZCI6InNlYXJjaHNlY3Rpb24iLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IlNlYXJjaCBQYWdlIiwibGlzdE5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZHdQZ1NaT0lrZUtubFZla3J0Y2FzIjp7InBhdGgiOiJpbmZvIiwiaWQiOiJpbmZvc2VjdGlvbiIsInNlY3Rpb25zSGlkZGVuIjpbXSwib3B0aW9ucyI6eyJuYW1lIjoiSW5mbyBQYWdlIiwibGlzdE5hbWUiOiJSZXF1ZXN0In0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZG9uVm5qdmhvV21kTEJRQWlZRkxpIjp7InBhdGgiOiJjaGFwdGVycyIsImlkIjoiY2hhcHRlcnNzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJDaGFwdGVycyIsImxpc3ROYW1lIjoiUmVxdWVzdCJ9LCJjZWxsc0hpZGRlbiI6ZmFsc2V9LCJtb2R1bGVDcmVhdG9ySWRmeUF5bkd2ZFFBYWxMZEJsQVdIYyI6eyJwYXRoIjoibW9kdWxlUmVzb2x2ZXJzIiwiaWQiOiJtb2R1bGVSZXNvbHZlcnNzZWN0aW9uIiwic2VjdGlvbnNIaWRkZW4iOltdLCJvcHRpb25zIjp7Im5hbWUiOiJSZXNvbHZlcnMiLCJsaXN0TmFtZSI6IlJlc29sdmVyIn0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZE5LUUtyT29sWEFRTE50dmVyRWxlIjp7InBhdGgiOiJyZXNwb25zZUNvZGVGdW5jdGlvbnMiLCJpZCI6InJlc3BvbnNlQ29kZUZ1bmN0aW9uc3NlY3Rpb24iLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IlJlc3BvbnNlIENvZGUgRnVudGlvbnMiLCJsaXN0TmFtZSI6IkZ1bmN0aW9uIn0sImNlbGxzSGlkZGVuIjpmYWxzZX0sIm1vZHVsZUNyZWF0b3JJZGRNTGpHQmNUU09BT0JDU2JyaGhRIjp7InBhdGgiOiJoZWxwZXJGdW5jdGlvbnMiLCJpZCI6ImhlbHBlckZ1bmN0aW9uc3NlY3Rpb24iLCJzZWN0aW9uc0hpZGRlbiI6W10sIm9wdGlvbnMiOnsibmFtZSI6IkhlbHBlciBGdW5jdGlvbnMiLCJsaXN0TmFtZSI6IlJlcXVlc3QifSwiY2VsbHNIaWRkZW4iOmZhbHNlfX0K"}.apply(t,[n,t]),void 0===i||(e.exports=i)},94065:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WindowExecutor=void 0;var n=function(){function e(){}return e.executeFromModuleData=function(e){var t,n;if(null!=e){var i=e.getObject(),o=(JSON.stringify(i),null!==(n=null===(t=null==i?void 0:i.request)||void 0===t?void 0:t.url)&&void 0!==n?n:"about:blank"),l='<!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="UTF-8">\n            <meta name="viewport" content="width=device-width, initial-scale=1.0">\n            <meta http-equiv="X-UA-Compatible" content="ie=edge">\n            <title>Module Creator</title>\n            <style> \n\n            * {\n                margin: 0;\n                padding: 0;\n                font-family:  $m-font;\n            }\n        \n\n            body {\n                position : relative;\n            }\n\n            iframe {\n                width : 100%;\n                height: 100vh;\n                position: absolute;\n                top : 0px;\n                left : 0px;\n                right : 0px;\n                bottom: 0px;\n            }\n\n            </style>\n          </head>\n          <body>\n        \n            <script>\n            let iframe = document.createElement(\'iframe\');\n            iframe.src = \''.concat(o,'\';\n            document.body.appendChild(iframe);\n            iframe.onload = function () {\n                console.log("JAJAJAJAJ")\n                const iframeWin = iframe.contentWindow || iframe;\n                const iframeDoc = iframe.contentDocument || iframeWin.document;\n                console.log(iframeDoc)\n                var script = iframeDoc.createElement("script");\n                script.append(`\n                    window.onload = function() {\n                        alert("hello world");\n                }\n                `);\n                iframeDoc.documentElement.appendChild(script);\n            };\n        \n            <\/script>\n          </body>\n        </html>'),s=URL.createObjectURL(new Blob([l],{type:"text/html"}));window.open(s,"_blank")}},e.executeFromLog=function(e){var t=e="\n        ".concat(e,"\n        "),n=URL.createObjectURL(new Blob([t],{type:"text/html"}));window.open(n,"_blank")},e}();t.WindowExecutor=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},80123:(e,t,n)=>{var i,o;i=[n,t,n(31666)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModuleNotesManager=void 0;var i=function(){function e(){this.delegates={},this.documentationNotes=[]}return e.prototype.noteTitleUpdated=function(e){var t,n,i=window.mApp.views.get(e);null!=i&&(i.viewName=null!==(n=null===(t=this.getNote(e))||void 0===t?void 0:t.noteTitle)&&void 0!==n?n:""),Array.from(Object.values(this.delegates)).forEach((function(t){var n;null===(n=null==t?void 0:t.noteTitleUpdated)||void 0===n||n.call(t,e)}))},e.prototype.noteDescUpdated=function(e){Array.from(Object.values(this.delegates)).forEach((function(t){var n;null===(n=null==t?void 0:t.noteDescriptionUpdated)||void 0===n||n.call(t,e)}))},e.prototype.getAllNotes=function(){return this.getModuleNotes().concat(this.getDocumentationNotes())},e.prototype.getDocumentationNotes=function(){if(this.documentationNotes.length>0)return this.documentationNotes;var e=[];return n.quickDocNotes.forEach((function(t){e=e.concat(t.notes)})),this.documentationNotes=e,e},e.prototype.getModuleNotes=function(){var e,t;return null!==(t=Array.from(Object.values(null!==(e=window.mApp.moduleManager.getModuleOptions().notesData.notes)&&void 0!==e?e:{})))&&void 0!==t?t:[]},e.prototype.getNote=function(e){for(var t=0,n=this.getAllNotes();t<n.length;t++){var i=n[t];if(i.noteId==e)return i}},e.prototype.createNote=function(){var e=window.mApp.moduleManager.getModuleOptions(),t=this.getModuleNotes(),n={noteId:window.mApp.utils.makeId(),noteTitle:"Note ".concat(t.length+1),noteDesc:"",noteData:"",isDocumentation:!1};return e.notesData.notes[n.noteId]=n,console.log(this.getModuleNotes()),Array.from(Object.values(this.delegates)).forEach((function(e){var t;null===(t=null==e?void 0:e.noteCreated)||void 0===t||t.call(e,n.noteId)})),this.openNote(n.noteId),n},e.prototype.getActiveNote=function(){var e;return null!==(e=window.mApp.moduleManager.getModuleOptions().notesData.activeNote)&&void 0!==e?e:""},e.prototype.openNote=function(e){var t;if(this.getAllNotes().map((function(e){return e.noteId})).includes(e)){var n=window.mApp.moduleManager.getModuleOptions();n.notesData.activeNote=e,(null!==(t=n.notesData.openedNotes)&&void 0!==t?t:[]).includes(e)||n.notesData.openedNotes.push(e),Array.from(Object.values(this.delegates)).forEach((function(t){var n;null===(n=null==t?void 0:t.noteOpened)||void 0===n||n.call(t,e)}))}},e.prototype.getOpenedNotes=function(){var e,t=window.mApp.moduleManager.getModuleOptions();return 0==Object.keys(t).length?[]:null!==(e=t.notesData.openedNotes)&&void 0!==e?e:[]},e.prototype.deleteNote=function(e){var t=window.mApp.moduleManager.getModuleOptions();this.closeNote(e),delete t.notesData.notes[e],Array.from(Object.values(this.delegates)).forEach((function(t){var n;null===(n=null==t?void 0:t.noteDeleted)||void 0===n||n.call(t,e)}))},e.prototype.closeNote=function(e){var t,n,i,o=window.mApp.moduleManager.getModuleOptions(),l=null!==(t=o.notesData.openedNotes)&&void 0!==t?t:[],s=null!==(n=o.notesData.activeNote)&&void 0!==n?n:"",r=l.indexOf(e);l.includes(e)&&window.mApp.utils.deleteFromArray(r,l),Array.from(Object.values(this.delegates)).forEach((function(t){var n;null===(n=null==t?void 0:t.noteClosed)||void 0===n||n.call(t,e)})),l=null!==(i=o.notesData.openedNotes)&&void 0!==i?i:[],console.log(l),l.length>0&&s==e&&(0!=r&&(r-=1),this.openNote(l[r%l.length]))},e.shared=new e,e}();t.ModuleNotesManager=i}.apply(t,i),void 0===o||(e.exports=o)},66448:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.moduleTutorials=void 0,t.moduleTutorials=[{sectionName:"Example",modules:[{moduleName:"Example Module Tutorial",moduleDesc:"The use of module tutorials is to prepare a module with notes and code inside them so the user can follow up and learn how to create, fix or learn about modules in general.",moduleFileName:"ExampleModuleTutorial.json"}]}]}.apply(t,[n,t]),void 0===i||(e.exports=i)},31666:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.quickDocNotes=void 0,t.quickDocNotes=[{sectionName:"Welcome",notes:[{noteId:"oFwjzvDpdfxlaKQrGUwc",noteTitle:"Welcome Note",noteDesc:"This note will open on every new project, it will contain general information to guide the user.",noteData:'\n## Welcome!\n\nFirst of all you might have a better experience if you zoom out the navigator to a 90%.\n\nThis is the KETSU / ZETSU  module creator.\n\nWith this tool you can create and fix modules on an intuitive way.\n\n>Features\n\n- Tutorials: The Module Tutorials on the left menu are modules prepared with Notes like this one and code inside them so you can follow up as it was a tutorial to learn everything about creating modules.\n\n- Quick Documentation: This are Notes that you can open at any time, they can be found on the left menu, these notes have documentation about modules in general.\n\n-  Module tree: Visualize the module on a tree to modify it intuitively.\n\n-  Code Execution:  You can execute the code in real time while you create your module.\n\n    \n  -  Logs:  Get the logs of the code you executed.\n\n  -  Module Creator Server: In order to execute the module code you will need the KETSU app, it will create  WebSockets server that will allow you to connect this website to it and execute the code to have all the benefits mentioned above.\n\n  -  Visualize the result: The KETSU app will display you the result of your module everytime you execute it.\n\n- Notes: You can create notes like this ones on your projects so if anyone wants to take over he can read over the notes you left. With this notes you can also contribute to the Github with your own Module tutorials or Notes with documentation about making modules.\n\n\n## Contribute Quick Documentation\n\nYou can contribute Documentation Notes by creating notes with usefull documentation about Module Making and pushing it  to the github.\n\n> Steps to contribute  quick documentation notes.\n\n- export the Note you created clicking on the top right button of the note.\n- Add the json object (The note) to the ./src/model/moduleNotes/quickDocNotes.ts notes array.\n- you can either create a section inside the array or add the note inside a section.\n \n> Example Structure:\n \n``` json\n{ \n    sectionName : "Section Name",\n    notes : [\n        {\n            noteId: "",\n            noteTitle : "",\n            noteDesc : "",\n            noteData : "",\n            isDocumentation : true\n        }\n    ]\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n',isDocumentation:!0}]}]}.apply(t,[n,t]),void 0===i||(e.exports=i)},19045:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(73983),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClickCellController=void 0,o=r(o);var l=function(e){function t(t,n,o){var l=e.call(this,i.clickCellView)||this;return l.didSelect=o,l.enalbed=n,l.data=t,l}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .title")).html(this.data.title),(0,o.default)("[".concat(this.id,"] .message")).html(this.data.message),this.updateSelectedClass(),(0,o.default)("[".concat(this.id,"]")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),t.enalbed=!t.enalbed,null!=t.didSelect&&t.didSelect(t.enalbed)&&t.updateSelectedClass()}))},t.prototype.updateSelectedClass=function(){this.enalbed?(0,o.default)("[".concat(this.id,"]")).addClass("selected"):(0,o.default)("[".concat(this.id,"]")).removeClass("selected")},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"]")).off(),this.didSelect=void 0,e.prototype.finish.call(this)},t}(n.UICollectionViewCell);t.ClickCellController=l}.apply(t,i),void 0===o||(e.exports=o)},66254:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,l){function s(e){try{a(i.next(e))}catch(e){l(e)}}function r(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,r)}a((i=i.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,i,o,l,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return l={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function r(l){return function(r){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,r])}}},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(61582),n(19755),n(80661),n(34580),n(77021),n(5219),n(58509)],o=function(e,t,n,i,o,l,c,u,p,h){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSLogsCellController=void 0,o=d(o);var f=function(e){function t(t,n){void 0===n&&(n=!1);var o=e.call(this,i.jsLogsCellView)||this;return o.string=t,o.error=n,o}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),this.setData(),(0,o.default)("[".concat(this.id,"]")).off().on("contextmenu",(function(e){return console.log("hello world"),t.didOpenContextMenu(e,(function(){})),!1}))},t.prototype.didOpenContextMenu=function(e,t){var n,i,s=new u.DropDown,r=new p.DefaultDropDownCell("Open on window",void 0,void 0,!0,h.viewDefaultDropDownCell);r.viewWasInsertedCallback=function(e){(0,o.default)("[".concat(e,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-t-primary"])},s.addCell(r,(function(e,t){t.finish()})),s.insertInto(new c.InsertedViewData(void 0,"body")),s.generalSetUp(0,10,l.ElementModalPos.right,l.ElemModalDirection.bottom,{x:null!==(n=e.clientX)&&void 0!==n?n:0,y:null!==(i=e.clientY)&&void 0!==i?i:0,width:0,height:0},200)},t.prototype.setData=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){return(0,o.default)("[".concat(this.id,"]")).addClass([this.returnClass("error",this.error)]),(0,o.default)("[".concat(this.id,"] .title")).text(this.string),[2]}))}))},t.prototype.returnClass=function(e,t){return t?e:""},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"]")).off(),e.prototype.finish.call(this)},t}(n.UICollectionViewCell);t.JSLogsCellController=f}.apply(t,i),void 0===o||(e.exports=o)},38699:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(94449),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogsCellController=void 0,o=r(o);var l=function(e){function t(t,n,o,l,s,r){void 0===o&&(o=!1),void 0===l&&(l=!1),void 0===s&&(s=!1),void 0===r&&(r=!1);var a=e.call(this,i.logsCellView)||this;return a.didClick=n,a.isSelected=s,a.title=t,a.isError=o,a.isSelectable=l,a.arrow=r,a}return s(t,e),t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"]")).addClass([this.returnClass("selected",this.isSelected),this.returnClass("error",this.isError),this.returnClass("selectable",this.isSelectable),this.returnClass("arrow",this.arrow)]),(0,o.default)("[".concat(this.id,"] .title")).text(this.title),(0,o.default)("[".concat(this.id,"]")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),null!=t.didClick&&t.didClick()}))},t.prototype.returnClass=function(e,t){return t?e:""},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"]")).off(),e.prototype.finish.call(this)},t}(n.UICollectionViewCell);t.LogsCellController=l}.apply(t,i),void 0===o||(e.exports=o)},49072:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(49990),n(4542),n(19755)],o=function(e,t,n,i,o){"use strict";var l;Object.defineProperty(t,"__esModule",{value:!0}),t.ParamEditorCellController=t.dataType=void 0,o=r(o),(l=t.dataType||(t.dataType={}))[l.string=0]="string",l[l.int=1]="int",l[l.stringArray=2]="stringArray";var a=function(e){function t(t,i,o,l,s,r,a){void 0===i&&(i=void 0),void 0===a&&(a=n.paramEditorCellView);var d=e.call(this,a)||this;return console.log(o),d.value=o,d.valueChanged=s,d.finishedEditing=r,d.title=t,d.message=i,d.tinted=l,null!=i?d.message+="<br>":d.message="",d.message+=d.getPlaceholderString(),d}return s(t,e),t.prototype.getPlaceholderString=function(){return"string"==typeof this.value?"This field allows any character.":"number"==typeof this.value?"This field allows numbers and decimals, use . to indicate the decimals.":"boolean"==typeof this.value?"This field only allows either true | flase":Array.isArray(this.value)?"This field is a list, separate the values with comas.":""},t.prototype.viewWasInserted=function(){var t,n=this;e.prototype.viewWasInserted.call(this),this.tinted&&(0,o.default)("[".concat(this.id,"]")).addClass("bg-secondary"),(0,o.default)("[".concat(this.id,"] .title")).text(window.mApp.utils.capitalizeFirstLetter(this.title.replace(/([A-Z][a-z])/g," $1").trim())),(0,o.default)("[".concat(this.id,"] .message")).html(null!==(t=this.message)&&void 0!==t?t:""),(0,o.default)("[".concat(this.id,"] input")).attr("placeholder",this.getPlaceholderString()),(0,o.default)("[".concat(this.id,"] input")).val("".concat(this.value)),(0,o.default)("[".concat(this.id,"] input")).off().on("input",(function(e){var t,i,l,s,r=null!==(l=null===(i=null===(t=(0,o.default)(e.target))||void 0===t?void 0:t.val())||void 0===i?void 0:i.toString())&&void 0!==l?l:"";"string"==typeof n.value&&(n.value=r),"number"==typeof n.value&&(n.value=null!==(s=window.mApp.utils.getNumberFromString(r))&&void 0!==s?s:0),"boolean"==typeof n.value&&(n.value="true"==r.toLowerCase()),Array.isArray(n.value)&&(n.value=r.split(",")),null!=n.valueChanged&&n.valueChanged(n.value)})),(0,o.default)("[".concat(this.id,"] input")).on("focus",(function(e){(0,o.default)("[".concat(n.id,"] input")).attr("placeholder","")})),(0,o.default)("[".concat(this.id,"] input")).on("blur",(function(e){(0,o.default)("[".concat(n.id,"] input")).attr("placeholder",n.getPlaceholderString())}))},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"] input")).off(),this.valueChanged=void 0,this.finishedEditing=void 0,e.prototype.finish.call(this)},t}(i.UICollectionViewCell);t.ParamEditorCellController=a}.apply(t,i),void 0===o||(e.exports=o)},16266:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(4542),n(71132),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SectionCellController=void 0,o=r(o);var l=function(e){function t(t,n){void 0===n&&(n=i.sectionCellView);var o=e.call(this,n)||this;return o.title=t,o}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .title")).text(this.title)},t}(n.UICollectionViewCell);t.SectionCellController=l}.apply(t,i),void 0===o||(e.exports=o)},30936:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(43369),n(34580),n(11166)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SettingsCellController=t.settingsControllerView=void 0,o=r(o),t.settingsControllerView='<div $id> \n\n    <div $idviews class="fill-absolute"> \n    \n    \n    </div>\n    \n\n</div>';var l=function(e){function o(n,o,l){void 0===o&&(o=window.mApp.utils.makeId()),void 0===l&&(l=t.settingsControllerView);var s=e.call(this,o,l)||this;return s.cells=[],s.insertViewsDefault=new i.InsertedViewData(s.id,"$idviews"),s.cells=n,s}return s(o,e),o.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},o.prototype.setUp=function(){e.prototype.setUp.call(this);var t=new n.UICollectionView;return this.collectionView=t.id,t.dataSourceDelegate=this,this.insertNewView(new i.InsertedViewData(t.id,void 0)),t.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),null!=this.interceptCollectionView&&this.interceptCollectionView(t),t.reloadData(),this},o.prototype.getCollectionView=function(){return this.getView(this.collectionView)},o.prototype.cvNumberOfItemsInSection=function(e,t){return this.cells.length},o.prototype.cvNumberOfSections=function(e){return 1},o.prototype.cvCellForItemAt=function(e,t){return this.getView(this.cells[t.item])},o.prototype.cvCellForSectionAt=function(e,t,n){},o.prototype.getSeparator=function(e,t){},o.prototype.finish=function(){this.interceptCollectionView=void 0,e.prototype.finish.call(this)},o}(o.default);t.SettingsCellController=l}.apply(t,i),void 0===o||(e.exports=o)},61795:function(e,t,n){var i,o,l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(19755)],o=function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0,n=l(n);var i=function(){function e(){}return e.prototype.deepCopy=function(e){var t=this;return Array.isArray(e)?e.map((function(e){return t.deepCopy(e)})):e instanceof Date?new Date(e.getTime()):e&&"object"==typeof e?Object.getOwnPropertyNames(e).reduce((function(n,i){return Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i)),n[i]=t.deepCopy(e[i]),n}),Object.create(Object.getPrototypeOf(e))):e},e.prototype.makeId=function(e){void 0===e&&(e=20);for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",i=n.length,o=0;o<e;o++)t+=n.charAt(Math.floor(Math.random()*i));return t},e.prototype.getPath=function(e,t){var n,i;return null!==(i=null===(n=this.getPathString(e,t))||void 0===n?void 0:n.split("."))&&void 0!==i?i:[]},e.prototype.getPathString=function(e,t){if(!t||"object"!=typeof t)return"";for(var n=Object.keys(t),i=0;i<n.length;i++){if(n[i]===e)return e;var o=this.getPathString(e,t[n[i]]);if(o)return n[i]+"."+o}return""},e.prototype.getObjectFromPath=function(e,t){var n=t;return e.forEach((function(e){""!=e&&(n=n[e])})),n},e.prototype.setObjectFromPath=function(e,t){var n=t;return e.forEach((function(e){""!=e&&(n=n[e])})),n},e.prototype.getValueForKey=function(e,t){if(t&&"object"==typeof t)for(var n=Object.keys(t),i=0;i<n.length;i++){if(n[i]===e)return t[e];var o=this.getValueForKey(e,t[n[i]]);if(o)return o}},e.prototype.getKeysThatMatch=function(e,t,n){var i;void 0===n&&(n=[]);var o=n;if(!t||"object"!=typeof t)return o;for(var l=Object.keys(t),s=0;s<l.length;s++)l[s].includes(e)&&o.push(l[s]),null===(i=this.getKeysThatMatch(e,t[l[s]],[]))||void 0===i||i.forEach((function(e){o.push(e)}));return o},e.prototype.getPathsThatMatchKey=function(e,t,n){void 0===t&&(t=[]);var i=[];if(!n||"object"!=typeof n)return i;for(var o=Object.keys(n),l=0;l<o.length;l++){if(o[l].includes(e)){var s=this.deepCopy(t);s.push(o[l]),i.push(s)}var r=this.deepCopy(t);r.push(o[l]),this.getPathsThatMatchKey(e,r,n[o[l]]).forEach((function(e){i.push(e)}))}return i},e.prototype.removeKeysThatMatch=function(e,t){if(t&&"object"==typeof t)for(var n=Object.keys(t),i=0;i<n.length;i++)n[i].includes(e)&&delete t[n[i]],this.removeKeysThatMatch(e,t[n[i]])},e.prototype.getNumberFromString=function(e){if(""!=e){var t=Number(e);if(!Number.isNaN(t))return t}},e.prototype.deleteFromArray=function(e,t){-1!==e&&t.splice(e,1)},e.prototype.addMissingObjectKeys=function(e,t){Object.keys(t).forEach((function(n){n in e||(e[n]=t[n])}))},e.prototype.capitalizeFirstLetter=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.prototype.windowSize=function(){var e,t;return{width:null!==(e=(0,n.default)(window).width())&&void 0!==e?e:0,height:null!==(t=(0,n.default)(window).height())&&void 0!==t?t:0}},e.prototype.getCenter=function(e){return{x:e.x+e.width/2,y:e.y+e.height/2}},e.prototype.getFrameFromElement=function(e){var t,i,o,l,s,r,a=(0,n.default)(e);return{x:null!==(i=null===(t=a.offset())||void 0===t?void 0:t.left)&&void 0!==i?i:0,y:null!==(l=null===(o=a.offset())||void 0===o?void 0:o.top)&&void 0!==l?l:0,width:null!==(s=a.outerWidth())&&void 0!==s?s:0,height:null!==(r=a.outerHeight())&&void 0!==r?r:0}},e.prototype.isInViewport=function(e){var t,i,o,l,s,r=null!==(i=null===(t=e.offset())||void 0===t?void 0:t.top)&&void 0!==i?i:0,a=r+(null!==(o=e.outerHeight())&&void 0!==o?o:0),d=null!==(l=(0,n.default)(window).scrollTop())&&void 0!==l?l:0,c=d+(null!==(s=(0,n.default)(window).height())&&void 0!==s?s:0);return a>d&&r<c},e.prototype.getImageUrl=function(e){return"./images/".concat(e)},e.prototype.prepend=function(e,t){return t.slice().unshift(e)},e.prototype.isSafari=function(){var e=navigator.userAgent.toLowerCase();return-1==e.indexOf("safari")||!(e.indexOf("chrome")>-1)},e.prototype.isChrome=function(){var e=navigator.userAgent.toLowerCase();return-1!=e.indexOf("safari")&&e.indexOf("chrome")>-1},e}();t.Utils=i}.apply(t,i),void 0===o||(e.exports=o)},34580:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InsertedViewData=void 0;var n=function(){function e(e,t){this.view=e,this.htmlTag=t}return e.prototype.getView=function(){if(null!=this.view)return window.mApp.views.get(this.view)},e.prototype.getTag=function(){var e,t=null===(e=this.getView())||void 0===e?void 0:e.id;return null==t&&(t=""),null!=this.htmlTag?this.htmlTag.replace(/\$id/gi,t):null!=this.view?this.view.replace(/\$id/gi,t):""},e}();t.InsertedViewData=n}.apply(t,[n,t]),void 0===i||(e.exports=i)},11166:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(3693),n(72872),n(34580),n(19755)],o=function(e,t,n,i,o,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),i=r(i),l=r(l);var a=function(e){function t(t,i){void 0===t&&(t=window.mApp.utils.makeId()),void 0===i&&(i=n.basicHtml);var o,l=this;return(l=e.call(this)||this).insertedViews=[],l.limitBounds={height:{min:0,max:9999999},width:{min:0,max:9999999}},l.viewName="",l.viewImageRoute="",l.insertedFlag=!1,l.isHiddenFlag=!1,l.id=t,l.html=null!=i?null==i?void 0:i.replace(/\$id/gi,t):null===(o=l.html)||void 0===o?void 0:o.replace(/\$id/gi,t),window.mApp.views.set(t,l),l.viewWasCreated(),l}return s(t,e),t.prototype.setInsertDefaultViews=function(){return this.insertViewsDefault=new o.InsertedViewData(this.id,"$idviews"),this},t.prototype.insertNewView=function(e){var t,n,i=e.getView();return null==this.html&&null!=i?(this.insertedFlag=!1,!1):(null==e.htmlTag&&(e.htmlTag=null!==(n=null===(t=this.insertViewsDefault)||void 0===t?void 0:t.getTag())&&void 0!==n?n:this.id),this.insertedViews.push(e),null==i||i.insertInto(new o.InsertedViewData(this.id,e.htmlTag)),!0)},t.prototype.insertInto=function(e){var t=this.parseHtml();return null==(t=this.htmlInsertionInterceptor(t))?(this.insertedFlag=!1,!1):(this.insertedInto=e,document.querySelector("[".concat(e.getTag(),"]")).append(t),this.insertedFlag=!0,this.viewWasInserted(),null!=this.viewWasInsertedCallback&&this.viewWasInsertedCallback(this.id),!0)},t.prototype.viewWasInserted=function(){},t.prototype.viewWasCreated=function(){},t.prototype.replaceView=function(e){},t.prototype.setUp=function(){return e.prototype.setUp.call(this),this},t.prototype.setData=function(){},t.prototype.setFrame=function(e){(0,l.default)("[".concat(this.id,"]")).css({position:"absolute",top:"".concat(e.y),left:"".concat(e.y),width:"".concat(e.width),height:"".concat(e.height),bottom:"",right:""})},t.prototype.addClickListener=function(e){(0,l.default)("[".concat(this.id,"]")).off().on("click",(function(t){t.stopPropagation(),t.preventDefault(),e()}))},t.prototype.setConstraints=function(e){var t,n,i,o,s,r;(0,l.default)("[".concat(this.id,"]")).css({position:"absolute",top:"".concat(null!==(t=e.top)&&void 0!==t?t:""),right:"".concat(null!==(n=e.right)&&void 0!==n?n:""),bottom:"".concat(null!==(i=e.bottom)&&void 0!==i?i:""),left:"".concat(null!==(o=e.left)&&void 0!==o?o:""),width:"".concat(null!==(s=e.width)&&void 0!==s?s:""),height:"".concat(null!==(r=e.height)&&void 0!==r?r:"")})},t.prototype.clipToParent=function(){this.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"})},t.prototype.style=function(e,t){void 0===t&&(t=void 0),(0,l.default)("[".concat(this.id,"] ").concat(null!=t?t:"")).css(e)},t.prototype.setLimitBounds=function(e){this.limitBounds=e},t.prototype.htmlInsertionInterceptor=function(e){return e},t.prototype.getSize=function(){var e,t,n=(0,l.default)("[".concat(this.id,"]"));return{width:null!==(e=n.width())&&void 0!==e?e:0,height:null!==(t=n.height())&&void 0!==t?t:0}},t.prototype.getFrame=function(e){var t,n,i,o,s,r;void 0===e&&(e="");var a=(0,l.default)("[".concat(this.id,"] ").concat(e));return{x:null!==(n=null===(t=a.offset())||void 0===t?void 0:t.left)&&void 0!==n?n:0,y:null!==(o=null===(i=a.offset())||void 0===i?void 0:i.top)&&void 0!==o?o:0,width:null!==(s=a.outerWidth())&&void 0!==s?s:0,height:null!==(r=a.outerHeight())&&void 0!==r?r:0}},t.prototype.deleteSubviews=function(){for(var e,t=0,n=this.insertedViews;t<n.length;t++)null===(e=n[t].getView())||void 0===e||e.finish()},t.prototype.finish=function(){var t,n=this;e.prototype.finish.call(this),(0,l.default)("[".concat(this.id,"]")).off(),(0,l.default)("[".concat(this.id,"]")).find("*").off(),this.insertedViews.forEach((function(e){var t;null===(t=e.getView())||void 0===t||t.finish()}));var i=null===(t=this.insertedInto.getView())||void 0===t?void 0:t.insertedViews;null!=i&&(this.insertedInto.getView().insertedViews=i.filter((function(e){e.view,n.insertedInto.view}))),this.viewWasInsertedCallback=void 0,this.removeHtmlOfView(),window.mApp.views.delete(this.id),delete window.mApp.moduleManager.moduleViewsExecutor[this.id],null!=this.viewWasFinishedCallback&&this.viewWasFinishedCallback(this.id),this.viewWasFinishedCallback=void 0},t.prototype.parseHtml=function(){var e;if(null!=this.html){var t=document.createElement("html");t.innerHTML=this.html;var n=null===(e=t.querySelector("body"))||void 0===e?void 0:e.firstElementChild;if(null!=n)return n}},t.prototype.isHidden=function(e){return void 0===e&&(e=void 0),null==e?this.isHiddenFlag:(this.isHiddenFlag=e,e?(0,l.default)("[".concat(this.id,"]")).css({display:"none"}):(0,l.default)("[".concat(this.id,"]")).css({display:""}),e)},t.prototype.getView=function(e){return window.mApp.views.get(e)},t.prototype.parentResized=function(e){},t.prototype.removeHtmlOfView=function(){(0,l.default)("[".concat(this.id,"]")).remove()},t.prototype.bringSubViewToTop=function(e){for(var t,n=!1,i=0,o=this.insertedViews;i<o.length;i++){var s=o[i];null!=s.view&&s.view==e&&(n=!0)}if(!n)return!1;var r=(0,l.default)("[".concat(e,"]")).parent(),a=(0,l.default)("[".concat(e,"]"));return null===(t=this.getView(e))||void 0===t||t.removeHtmlOfView(),r.append(a),!0},t.prototype.bringViewToTheTop=function(){var e=this.insertedInto.getView();return null!=e&&e.bringSubViewToTop(this.id)},t}(i.default);t.default=a}.apply(t,i),void 0===o||(e.exports=o)},3124:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(12678),n(11166),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonView=void 0,i=r(i),o=r(o);var l=function(e){function t(t,i){return void 0===t&&(t=window.mApp.utils.makeId()),void 0===i&&(i=n.buttonView),e.call(this,t,i)||this}return s(t,e),t.prototype.setImage=function(e){(0,o.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl(e))},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"]")).off(),e.prototype.finish.call(this)},t}(i.default);t.ButtonView=l}.apply(t,i),void 0===o||(e.exports=o)},40054:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(96604),n(11166),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyView=void 0,i=r(i),o=r(o);var l=function(e){function t(t,i,o){void 0===i&&(i="bg-primary"),void 0===o&&(o=n.emptyView);var l=e.call(this,void 0,o)||this;return l.title=t,l.background=i,l}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .title")).text(this.title),(0,o.default)("[".concat(this.id,"]")).addClass(this.background)},t}(i.default);t.EmptyView=l}.apply(t,i),void 0===o||(e.exports=o)},78110:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(92938),n(32115),n(34580),n(11166),n(19755)],o=function(e,t,n,i,o,l,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PopUpView=void 0,l=r(l),a=r(a);var d=function(e){function t(t,o,l){void 0===o&&(o=window.mApp.utils.makeId()),void 0===l&&(l=n.viewPopUp);var s=e.call(this,o,l)||this;return s.disableExitWithEscape=!1,s.canExit=!0,s.setInsertDefaultViews(),s.view=t,i.keyCodesManager.shared.delegates[s.id]=s,s}return s(t,e),t.prototype.disableExit=function(){this.canExit=!1},t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),this.insertNewView(new o.InsertedViewData(this.view,void 0));var n=this.getView(this.view);null!=n&&(n.viewWasFinishedCallback=function(e){t.finish()}),this.canExit&&(0,a.default)("[".concat(this.id,"]")).off().on("click",(function(e){var n;e.preventDefault(),e.stopImmediatePropagation();var i=null===(n=t.getView(t.view))||void 0===n?void 0:n.getFrame();null!=i&&(e.clientX<i.x||e.clientX>i.x+i.width||e.clientY<i.y||e.clientY>i.y+i.height)&&t.finish()}))},t.prototype.disableEscape=function(){return this.disableExitWithEscape=!0,this},t.showPopUpViewOnBody=function(e,n){void 0===n&&(n=!0);var i=new t(e);return n||i.disableExit(),i.insertInto(new o.InsertedViewData(void 0,"body")),i.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),i.clipToParent(),i},t.prototype.keyUp=function(e){"Escape"!=e||this.disableExitWithEscape||this.finish()},t.prototype.finish=function(){(0,a.default)("[".concat(this.id,"]")).off();var t=this.getView(this.view);null!=t&&(t.viewWasFinishedCallback=void 0),delete i.keyCodesManager.shared.delegates[this.id],e.prototype.finish.call(this)},t}(l.default);t.PopUpView=d}.apply(t,i),void 0===o||(e.exports=o)},55044:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(11166),n(19755)],o=function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionView=void 0,n=r(n),i=r(i);var o=function(e){function t(t,n,i){var o=e.call(this,n,i)||this;return o.isSelectedFlag=!1,o.isSelectedFlag=t,o}return s(t,e),t.prototype.viewWasInserted=function(){this.addClickListener(),this.isSelectedWasSet(this.isSelectedFlag)},t.prototype.clickHandler=function(e){return e||!e},t.prototype.addClickListener=function(){var e=this;(0,i.default)("[".concat(this.id,"]")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),e.isSelected(e.clickHandler(e.isSelectedFlag))}))},t.prototype.isSelectedWasSet=function(e){e?(0,i.default)("[".concat(this.id,"]")).addClass("selected"):(0,i.default)("[".concat(this.id,"]")).removeClass("selected")},t.prototype.isSelected=function(e,t){var n;return void 0===t&&(t=!0),null==e||(this.isSelectedFlag=e,this.isSelectedWasSet(this.isSelectedFlag),t&&(null===(n=this.selectedInterface)||void 0===n||n.viewWasSelected(this.id))),this.isSelectedFlag},t.prototype.finish=function(){this.selectedInterface=void 0,e.prototype.finish.call(this)},t}(n.default);t.SelectionView=o}.apply(t,i),void 0===o||(e.exports=o)},82265:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(40952),n(11166),n(19755)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StateManagerController=void 0,i=r(i),o=r(o);var l=function(e){function t(t,i){var o=e.call(this,window.mApp.utils.makeId(),n.viewStateManager)||this;return o.canExit=!0,o.mInterface=i,o.title=t,o}return s(t,e),t.prototype.disableExit=function(){this.canExit=!1},t.prototype.viewWasInserted=function(){var t=this;e.prototype.viewWasInserted.call(this),(0,o.default)("[".concat(this.id,"] .title")).text(this.title),this.canExit?(0,o.default)("[".concat(this.id,"] .button")).off().on("click",(function(e){e.stopPropagation(),e.preventDefault(),null!=t.mInterface.finished&&t.mInterface.finished()})):(0,o.default)("[".concat(this.id,"] img")).css("display","none")},t.prototype.finish=function(){(0,o.default)("[".concat(this.id,"] .button")).off(),e.prototype.finish.call(this)},t}(i.default);t.StateManagerController=l}.apply(t,i),void 0===o||(e.exports=o)},55353:function(e,t,n){var i,o,l,s=this&&this.__extends||(l=function(e,t){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},l(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};i=[n,t,n(61882),n(34580),n(11166)],o=function(e,t,n,i,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ViewsHolder=void 0;var l=function(e){function t(t,o,l,s){void 0===s&&(s=n.viewDefaultViewsHolder);var r=e.call(this,t,s)||this;return r.availableViews=[],r.activeView="",r.availableViews=o,0==o.length||(r.activeView=null!=l?l:o[0],r.insertViewsDefault=new i.InsertedViewData(r.id,"$idviews")),r}return s(t,e),t.prototype.viewWasInserted=function(){e.prototype.viewWasInserted.call(this),this.setUp()},t.prototype.setUp=function(){var t=this;return e.prototype.setUp.call(this),this.availableViews.forEach((function(e){var n=t.getView(e);t.insertNewView(new i.InsertedViewData(e)),null==n||n.setConstraints({top:"0px",left:"0px",right:"0px",bottom:"0px"})})),this.showView(this.activeView),this},t.prototype.addView=function(e){if(!this.availableViews.includes(e)){var t=this.getView(e);this.insertNewView(new i.InsertedViewData(e)),null==t||t.setConstraints({top:"0px",left:"0px",right:"0px",bottom:"0px"})}},t.prototype.removeView=function(e){if(this.availableViews.includes(e)){window.mApp.utils.deleteFromArray(this.availableViews.indexOf(e),this.availableViews);var t=this.getView(e);null==t||t.finish()}},t.prototype.showView=function(e){for(var t,n,i=0,o=this.availableViews;i<o.length;i++){var l=o[i];e==l?null===(t=this.getView(l))||void 0===t||t.style({"z-index":"3"}):null===(n=this.getView(l))||void 0===n||n.style({"z-index":"1"})}},t}((o=r(o)).default);t.ViewsHolder=l}.apply(t,i),void 0===o||(e.exports=o)},37535:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewBaseGridElement=void 0,t.viewBaseGridElement='\n\n<div $id class="test-grid-element">\n\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},62069:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewBaseGridHSeparator=t.viewBaseGridVSeparator=void 0,t.viewBaseGridVSeparator='\n\n<div $id class="test-grid-v-separator">\n\n    \n\n    <div $idgrabber class="separator-transparent cursor">\n         <div  class="separator-hover bg-accent"></div>\n    </div>\n\n</div>\n',t.viewBaseGridHSeparator='\n\n<div $id class="test-grid-h-separator">\n\n<div $idgrabber class="separator-transparent cursor">\n        <div  class="separator-hover bg-accent"></div>\n</div>\n\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},36465:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewBaseGridHtml=void 0,t.viewBaseGridHtml='\n\n<div $id class="test-grid bg-primary">\n\n\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},10371:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KetsuLogsViewerView=void 0,t.KetsuLogsViewerView='\n\n\n\n<div $id class="ketsu-logs-viewer" >  \n\n        \n    <div class="nav-bar"> \n        \n        <div class="center-v-flex title"> \n\n        Logs\n        </div>\n\n        <div class="center-flex button pointer"> <img src="./images/arrow-bottom.png"></div>\n\n        \n    </div>\n\n\n    <div> \n        \n        <div $idviews class="fill-absolute cv"> \n\n        </div>\n    \n    </div>\n\n</div>\n\n\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},9450:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bottomStatusBarView=void 0,t.bottomStatusBarView='<div $id> \n\n    <div class="fill-absolute "> \n\n        <div class="bottom-status fill-absolute">\n        \n            <div class="center-flex sockets"> \n                <div class="center-flex">\n                    <img class="connected-img" src="./images/connected.png"> \n                </div> \n                <div class="one-line title">Connected</div>\n            </div>\n\n        \n\n            <div class="github center-flex">\n                <img src="./images/github.png">\n            </div>\n        \n        </div>\n\n        <div class="window-holder center-absolute"> \n\n        <div class="window-icon relative" left> \n        <img  class="center-absolute" src="./images/left_opened.png">\n        </div>\n\n        <div class="window-icon relative" bottom> \n        <img  class="center-absolute" src="./images/bottom_closed.png">\n        </div>\n\n        <div class="window-icon relative" right> \n        <img  class="center-absolute" src="./images/right_closed.png">\n        </div>\n\n        </div>\n\n\n    </div>\n\n\n\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},20191:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CenterGridElementControllerView=void 0,t.CenterGridElementControllerView='\n    \n\n        <div $id class="center-grid-controller">\n\n        <div $idviews class="fill-absolute"> </div>\n\n        </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},49726:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDropDownRequestType=t.viewDataRequestController=void 0,t.viewDataRequestController='\n<div $id class="data-request-controller">\n\n    <div  class="fill-absolute data-request-grid"> \n\n        <div $idnotification > \n        \n        </div>\n\n        <div> \n            <div class="fill-absolute">\n                <div class="input-holder "> \n                        <div class="input-grid "> \n                        <input class="request-input" placeholder="Type the url here.">\n                    <div id="requesttype" class="button center-flex pointer">GET</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div $idviews class="params"> \n        \n        \n        \n        </div>\n    \n    </div>\n\n</div>\n',t.viewDropDownRequestType='\n\n   <div $id >\n\n   <div class="fill-absolute"> \n   \n      <div class="dropdown-cell-requesttype">\n\n         <div class="title"> GET </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},48959:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewHtmlHeaders=void 0,t.viewHtmlHeaders='\n\n<div $id class="bg-primary"> \n\n<div class="fill-absolute"> \n\n    <div class="headers-view"> \n\n    <table $idheadersTable >\n        <tr>\n        <th>\n        <div  class="key-holder"> \n            <div class="checkbox-holder"> \n            \n            </div>\n            <div class="relative elem-padding-equal-wide-only center-v-flex"> \n                Key\n            </div>\n        </div>\n        </th>\n        <th class="elem-padding-equal-wide-only">Value</th>\n        </tr>\n        <tr>\n        <td>\n            <div  class="key-holder"> \n                <div class="checkbox-holder"> \n\n                <input type=\'checkbox\' class="ignore center-absolute" checked >\n                </div>\n                <div class="relative"> \n                    <input class="input-header-key header-input" placeholder="Key">\n                </div>\n            </div>\n        </td>\n        <td class="relative">\n            <input class="input-header-value header-input" placeholder="Value">\n        </td>\n        </tr>\n \n    </table>\n    \n    </div>\n\n</div>\n\n\n</div>\n\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},74748:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.javascriptControllerView=void 0,t.javascriptControllerView='\n<div $id class="javascript-controller">\n\n<div $idviews class="fill-absolute"> </div>\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},35963:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navBarView=void 0,t.navBarView='\n\n<div $id > \n\n    <div class="fill-absolute navbar-holder"> \n        <div class="one-line relative center-flex title">\n            MODULE CREATOR\n            <div class="beta">beta</div>\n        </div>\n        <div class="buttons-holder fill-absolute">\n            <div class="save button-holder center-v-flex"> <div class="test-button one-line">Save</div> </div>\n            <div class="export  button-holder center-v-flex"><div class="test-button">Export</div></div>\n        </div>\n\n    </div>\n\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},39434:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewRequestController=void 0,t.viewRequestController='\n    <div $id class="request-controller">\n\n        <div $idviews class="fill-absolute"> </div>\n\n    </div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},35141:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewRoute=void 0,t.viewRoute='\n<div $id >\n\n    <div class="fill-absolute route-view">\n        <div class="route-holder  center-v-flex">\n            <div class="route ">\n            \n            </div>\n        </div>\n   \n        <div class="execute-button loading center-flex one-line"> \n            <div class="spinner-holder"> </div> \n            <div class="title">Execute Chapters</div> \n         </div>\n         <div class="sub-menu center-flex">\n         \n         <img  src="./images/v-dots.png"">\n         </div> \n\n    </div>\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},3693:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.basicHtml=void 0,t.basicHtml='\n\n<div $id>  <div $idviews class="fill-absolute"> \n\n\n\n</div></div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},12678:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buttonView=void 0,t.buttonView='\n\n<div $id>  \n    <div $idviews class="fill-absolute button-view center-flex"> \n        <img alt="...">\n    </div>\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},61882:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDefaultViewsHolder=void 0,t.viewDefaultViewsHolder='\n    <div $id class="views-holder">\n\n        <div $idviews class="fill-absolute"> </div>\n\n    </div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},85446:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDefaultCollectionViewView=void 0,t.viewDefaultCollectionViewView='\n\n<div $id >\n\n    <div  class="fill-absolute"> \n\n        <div $idgrid class="collection-view"> \n        \n        </div>\n\n    </div>\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},58509:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDefaultDropDownCell=void 0,t.viewDefaultDropDownCell='\n\n   <div $id >\n\n   <div class="fill-absolute"> \n   \n      <div class="default-dropdown-cell">\n\n         <div class="title"> title </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},11524:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDefaultElementModal=void 0,t.viewDefaultElementModal='\n\n<div $id > <div $idviews class="fill-absolute" > </div> </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},96604:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.emptyView=void 0,t.emptyView='<div $id class="empty-view "> \n\n<div class="title center-absolute"> \n    No notes opened\n</div>\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},48144:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewDefaultMenuSelectorCell2=t.viewDefaultMenuSelectorCell=t.viewDefaultMenuSelector=void 0,t.viewDefaultMenuSelector='\n<div $id class="default-menu-selector">\n\n<div $idviews class="fill-absolute"> </div>\n\n\n</div>\n',t.viewDefaultMenuSelectorCell='\n<div $id class="default-menu-selector-cell pointer">\n\n    <div class="fill-absolute center-flex"> \n        <div class="one-line">Hello world</div>\n    </div>\n\n    <div class="selected-overflow"></div>\n</div>\n',t.viewDefaultMenuSelectorCell2='\n<div $id class="default-menu-selector-cell-2 pointer">\n\n    <div class="fill-absolute center-flex"> \n        <div class="one-line">Hello world</div>\n    </div>\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},40952:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewStateManager=void 0,t.viewStateManager='\n\n<div $id> \n    <div class="fill-absolute view-state-manager"> \n\n    <div class="title center-v-flex">This is the title of the widnow</div>\n    <div class="button center-flex">  <img src="./images/close-button.png">   </div>\n\n    </div>\n</div>\n\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},68166:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuGridElView=void 0,t.leftMenuGridElView='\n\n<div $id class="left-menu-grid-element left-menu-big">\n\n\n\n\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},78130:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuMenuViewerView=void 0,t.leftMenuMenuViewerView='\n\n<div $id class="left-menu-viewer"> \n    \n\n    \n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},75066:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuTopView=void 0,t.leftMenuTopView='\n\n<div $id class="left-top-view"> \n    \n    <div class="fill-absolute grid"> \n\n        <div class="p-name"> <div class= "center-v-absolute one-line">Project Name</div> </div>\n\n        <div class="buttons-holder">\n            <div class="button center-absolute ">\n                <div class="center-absolute new-button">New</div>\n            </div>\n\n            <div> </div>\n            <div class="button  "> \n                <div class="center-absolute load-button">Load</div>\n            </div>\n        </div>\n\n\n    </div>\n    \n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},23753:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuViewerModuleCellView=void 0,t.leftMenuViewerModuleCellView='\n<div $id class="collection-view-cell-test pointer">\n    <div class=" cell-holder ">\n        <div class="fill-absolute cell-distr">\n        <div class="center-flex"><img src=""></div> \n\n            <div class="click-select relative"> \n            <div class="title tc-t-primary one-line">Cell</div> \n            </div>\n            <div class="button-holder"> <div class="bh-txt  center-absolute">Del</div> </div>\n        </div>\n    </div>\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},79146:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuViewerModuleCollectionView=void 0,t.leftMenuViewerModuleCollectionView='\n\n<div $id  class="relative">\n\n    <div style="left: 15px" class="cv-section-viewer"> </div>\n\n    <div style="left: 30px" class="cv-section-viewer"> </div>\n\n    <div class="fill-absolute left-collection-view"> \n    \n        <div class="fill-absolute"> \n\n            <div $idgrid class="collection-view">\n\n            </div>\n\n        </div>\n\n        <div class="bg-secondary" style="z-index:5"> </div>\n    \n    </div>\n\n \n    \n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},9028:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuViewerModuleSectionView=void 0,t.leftMenuViewerModuleSectionView='\n<div $id class="collection-view-cell-header-test pointer tc-t-primary-hover"> \n    <div class="cell-holder">\n        <div class="fill-absolute bottom-border section-distr">\n            <div class="section-controller"> <img src="./images/arrow-bottom.png"></div>\n            <div class="title "> <div class="text one-line">   </div>  </div> \n            <div class="button-holder"> <div class="bh-txt  center-absolute">Add</div> </div>\n\n        </div>\n    </div>\n</div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},88456:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.moduleNotesCellView=void 0,t.moduleNotesCellView='\n    <div $id class="module-notes-cell">\n        <div class="title">Hell world</div>\n        <p class="desc">Learn how to create modules. This is a very special tutorial</p>\n        <div class="holder"> \n            <div class="buttons-holder">\n            <div class="open-button center-flex one-line">Open note</div>\n            <div class="separator"></div>\n            <div class="more-button"> \n                <img class="center-absolute" src="./images/v-dots.png">\n            </div>\n        </div>\n        </div>\n    </div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},10891:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.moduleNotesView=void 0,t.moduleNotesView='\n\n<div $id class="fill-absolute relative"> \n\n    <div $idviews class="fill-absolute relative module-notes"> \n        \n    </div>\n\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},14599:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.searchBarView=void 0,t.searchBarView='\n\n    <div $id  class="search-bar"> \n        <input placeholder="Search here..."> \n        \n        <div class="search-separator"> </div>\n        \n        <div class="add-button center-flex"> \n            <img src="./images/add.png">\n        </div>\n\n    </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},98128:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuSubMenuCellView=void 0,t.leftMenuSubMenuCellView='\n\n<div $id class="cell bg-secondary-dark-hover fs-caption-1 fw-regular center-flex"> \n\n    \n\n    <div class="cell-holder "> \n\n        <div class="center-flex relative"> \n            <img class="" src="$imageUrl">\n        </div>\n    \n        <div class="title">$title</div>\n\n    </div>\n    \n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},88408:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leftMenuSubMenuView=void 0,t.leftMenuSubMenuView='\n\n<div $id class="left-sub-menu"> \n    \n    <div leftMenuSubMenuHolder class="left-sub-menu-holder"> \n        \n    </div>\n    \n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},38409:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewConnectSocket=void 0,t.viewConnectSocket='\n\n<div $id class="connect-socket shadow"> \n\n    <div $idstatemanager class="relative"></div>\n    <div  class="relative">  \n        \n        <div>- To execute and debug modules you will need to connect to KETSU module creator server, it can be found on the KETSU app.<br>\n        - Type the ws url [ws://***.**.***:***] that is displayed on KETSU Module Creator and click connect.<br>- Keep your phone screen on and dont leave KETSU module creator to avoid disconnections.<br>- Your phone and computer have to be connected to the same wifi or your computer has to be connected to your phone hotspot.</div>\n        \n        <div class="connection-holder"> \n        <input  class="input-header-value header-input" placeholder="ex: ws://999.23.43.1:3000">\n        <div class="status center-flex relative"> <img class="status-image" src="./images/disconnected.png"> <div class="loading bg-primary relative"> </div>   </div>\n        <div class="button bg-secondary-dark-hover center-flex"> <div class="elem-padding-wider connect-button">Connect</div> </div>\n        </div>\n    </div>\n\n\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},4370:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.alertWithOptionsView=void 0,t.alertWithOptionsView='\n    <div $id class="alert-with-options" > \n\n    <div $idstatemanager class="relative state"></div>\n\n    <div class="msg"> Hello this is the message  the user about the options he has below </div>\n    <div class="options"> \n\n    </div>\n    </div>\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},27965:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.newProjectView=void 0,t.newProjectView='\n    <div $id class="new-project-view"> \n        <div $idstatemanager class="relative">\n        </div>\n        <div class="h-separator"> </div>\n\n        <div class="elements-holder">\n            <input placeholder="Insert Project Name...">\n            <div class="center-flex create-button">Create!</div>\n        </div>\n    \n    </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},92938:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewPopUp=void 0,t.viewPopUp='\n\n<div $id> \n    <div class="fill-absolute   "> \n        <div class="  pop-up-holder"> \n            <div $idviews class="relative center-flex"> </div>\n        </div>\n\n    </div>\n</div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},44360:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.markdownToolBarView=void 0,t.markdownToolBarView='\n\n<div $id class="relative">  \n    <div  class="md-tool-bar-holder "> \n\n        <div class="fill-absolute md-tool-bar"> \n            <div  class="tb-close ">\n            <img class="center-absolute" src="./images/close-button.png">\n             </div>\n            <div class="tb-separator"> </div>\n            <div class="tb-search"> \n            <input placeholder="Search here...">\n            </div>\n            <div class="tb-separator"> </div>\n            <div class="tb-scount center-flex one-line"><span>0/0</span></div>\n            <div class="tb-separator"> </div>\n\n            <div  class="tb-button tb-border active data">\n            <img class="center-absolute" src="./images/title.png">\n             </div>\n             <div  class="tb-button tb-border active edit">\n            <img class="center-absolute" src="./images/edit.png">\n             </div>\n             <div  class="tb-button tb-border  export">\n             <img class="center-absolute" src="./images/download.png">\n              </div>\n        </div>\n    </div>\n\n    <div  class="md-note-data"> \n\n    <input placeholder="Note title" class="title"> \n    \n    <div class="tb-separator"> </div>\n\n\n    <textarea placeholder="Note description"></textarea>\n\n    </div>\n\n\n</div>\n\n\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},4713:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.markdownView=void 0,t.markdownView='\n\n<div $id class="fill-absolute relative "> \n\n\n<div  class="markdown-holder fill-absolute  relative"> \n\n\n    <div $idviews class="markdown markdown-body"> </div>\n\n\n</div>\n\n\n</div>\n\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},46003:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewRightGridController=void 0,t.viewRightGridController='<div $id class="right-grid-controller">\n\n<div $idviews class="fill-absolute"> </div>\n\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},73983:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clickCellView=void 0,t.clickCellView='\n\n    <div $id> \n    \n        <div class="settings-click-cell"> \n\n            <div class="text"> \n            \n                <div class="title">THIS IS THE TITLE</div>\n                <div class="message">THIS IS THE Msdkfh sdhfjasdhflskajhf skljdah flakjshf slakdjhf salkd jfhalskdjhf lkasdjhf lsdakjhf laskjdhf aldksj fhadlskjfh alsdkjhf alsdkjfhalskdjfh alskdj fhsdjklfh lksajdf ESSAGE</div>\n\n            </div>\n\n            <div class="center-flex"> \n                <div class="switch">\n                \n                    <div class="circle"> </div>\n            \n                </div>\n            </div>\n        </div>\n\n    </div>\n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},61582:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.jsLogsCellView=void 0,t.jsLogsCellView='<div $id class="js-logs-cell-holder "> \n\n    <div class="fill-absolute js-logs-cell"> \n\n        <pre  class="title center-v-flex"></pre>\n\n    </div>\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},94449:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.logsCellView=void 0,t.logsCellView='<div $id class="logs-cell-holder "> \n\n    <div class="fill-absolute logs-cell"> \n\n        <div class="title center-v-flex">\n            Hello world\n        </div>\n\n        <div class="center-flex arrow">></div>\n\n    </div>\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},49990:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.paramEditorCellView=void 0,t.paramEditorCellView='\n\n<div $id> \n\n    <div class=" param-editor-holder">\n     \n        <div class="param-editor"> \n            <div class="title"> This is the title</div>\n            <input placeholder="Type here.">\n            <div class="message">The input here is a boolea insert either true or false</div>\n\n        </div>\n     \n    </div>\n\n</div> \n\n'}.apply(t,[n,t]),void 0===i||(e.exports=i)},71132:(e,t,n)=>{var i;i=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sectionCellView=void 0,t.sectionCellView='<div $id> \n\n    <div class="fill-absolute section-cell"> \n    \n    <div class="title"></div>\n    \n    </div>\n\n</div>'}.apply(t,[n,t]),void 0===i||(e.exports=i)},48042:e=>{"use strict";e.exports=JSON.parse('{"moduleInfo":{"moduleName":"","moduleInitials":"","moduleDesc":"","developer":"","moduleID":"","moduleImage":"","moduleVersion":1,"moduleLenguage":"ENG","moduleType":"Video","baseURL":"","moduleDeveloperSite":"","UpdateSite":"","preferedServer":"","preferedDownloadServer":"","blackListed":[""],"moduleCreatorIdPxvNFrVIAuCeMVZrAdCK":{"path":"XxDkG","id":"moduleInfosection","sectionsHidden":[],"options":{"name":"Module Info","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdvsgZkSvlACYKkHDqbIjm":{"path":"rAMFl","id":"moduleInfocell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false}},"global":{"variables":[{"key":"","value":""}],"cookies":[{"key":"","value":""}],"headers":[{"key":"","value":""}]},"mainPage":[{"request":{"url":"","method":"get","headers":[{"key":"","value":"","moduleCreatorHeaderisActive":true}]},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */  const DefaultLayouts = {\\n         ultraWideFull: \'ultraWideFull\',\\n         ultraWide: \'ultraWide\',\\n         wideFull: \'wideFull\',\\n         wide: \'wide\',\\n         wideStrechedFull: \'wideStrechedFull\',\\n         wideStrechedFullDouble: \'WideStrechedFullDouble\',\\n         wideStreched: \'wideStreched\',\\n         wideStrechedDouble: \'wideStrechedDouble\',\\n         wideStrechedFullList: \'wideStrechedFullList\',\\n         wideStrechedList: \'wideStrechedList\',\\n         doublets: \'doublets\',\\n         doubletsDouble: \'doubletsDouble\',\\n         doubletsFull: \'doubletsFull\',\\n         doubletsFullDouble: \'doubletsFullDouble\',\\n         doubletsConstant: \'doubletsConstant\',\\n         doubletsDoubleConstant: \'doubletsDoubleConstant\',\\n         doubletsFullConstant: \'doubletsFullConstant\',\\n         doubletsFullDoubleConstant: \'doubletsFullDoubleConstant\',\\n         longDoublets: \'longDoublets\',\\n         longDoubletsDouble: \'longDoubletsDouble\',\\n         longDoubletsFull: \'longDoubletsFull\',\\n         longDoubletsFullDouble: \'longDoubletsFullDouble\',\\n         longDoubletsConstant: \'longDoubletsConstant\',\\n         longDoubletsDoubleConstant: \'longDoubletsDoubleConstant\',\\n         longDoubletsFullConstant: \'longDoubletsFullConstant\',\\n         longDoubletsFullDoubleConstant: \'longDoubletsFullDoubleConstant\',\\n         triplets: \'triplets\',\\n         tripletsDouble: \'tripletsDouble\',\\n         tripletsFull: \'tripletsFull\',\\n         tripletsFullDouble: \'tripletsFullDouble\',\\n         tripletsConstant: \'tripletsConstant\',\\n         tripletsDoubleConstant: \'tripletsDoubleConstant\',\\n         tripletsFullConstant: \'tripletsFullConstant\',\\n         tripletsFullDoubleConstant: \'tripletsFullDoubleConstant\',\\n         longTriplets: \'longTriplets\',\\n         longTripletsDouble: \'longTripletsDouble\',\\n         longTripletsFull: \'longTripletsFull\',\\n         longTripletsFullDouble: \'longTripletsFullDouble\',\\n         longTripletsConstant: \'longTripletsConstant\',\\n         longTripletsDoubleConstant: \'longTripletsDoubleConstant\',\\n         longTripletsFullConstant: \'longTripletsFullConstant\',\\n         longTripletsFullDoubleConstant: \'longTripletsFullDoubleConstant\',\\n         none: \'\'\\n };\\n const CellDesings = {\\n         Special1: \'Special1\',\\n         Special2: \'Special2\',\\n         Special3: \'Special3\',\\n         CELLHelperText: \'CELLHelperText\',\\n         small1: \'small1\',\\n         small2: \'small2\',\\n         normal1: \'normal1\',\\n         normal2: \'normal2\',\\n         normal3: \'normal3\',\\n         normal4: \'normal4\',\\n         normal5: \'normal5\',\\n         normal6: \'normal6\',\\n         normal7: \'normal7\',\\n         wide1: \'wide1\',\\n         wide2: \'wide2\',\\n         wide3: \'wide3\',\\n         wide4: \'wide4\',\\n         wide5: \'wide5\',\\n         wide6: \'wide6\',\\n         wide7: \'wide7\',\\n         wide8: \'wide8\',\\n         wide9: \'wide9\',\\n         wide10: \'wide10\',\\n         wide11: \'wide11\'\\n };\\n const Paging = {\\n         leading: \'leading\',\\n         centered: \'centered\',\\n         none: \'\'\\n };\\n const Orientation = {\\n         horizontal: \'horizontal\',\\n         vertical: \'vertical\'\\n };\\n\\n function MainPage ( request, extra, javascriptConfig, output ) {\\n         this.request = request;\\n         this.extra = extra;\\n         this.javascriptConfig = javascriptConfig;\\n         this.output = output;\\n }\\n\\n function ModuleRequest ( url, method, headers, httpBody ) {\\n         this.url = url;\\n         this.method = method;\\n         this.headers = headers;\\n         this.httpBody = httpBody;\\n }\\n\\n function Extra ( commands, extraInfo ) {\\n         this.commands = commands;\\n         this.extraInfo = extraInfo;\\n }\\n\\n function Commands ( commandName, params ) {\\n         this.commandName = commandName;\\n         this.params = params;\\n }\\n\\n function JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) {\\n         this.removeJavascript = removeJavascript;\\n         this.loadInWebView = loadInWebView;\\n         this.javaScript = javaScript;\\n }\\n\\n function KeyValue ( key, value ) {\\n         this.key = key;\\n         this.value = value;\\n }\\n\\n function Output ( cellDesing, orientation, defaultLayout, paging, section, layout, data ) {\\n         this.cellDesing = cellDesing;\\n         this.orientation = orientation;\\n         this.defaultLayout = defaultLayout;\\n         this.paging = paging;\\n         this.section = section;\\n         this.layout = layout;\\n         this.data = data;\\n }\\n\\n function Section ( sectionName, separator ) {\\n         this.sectionName = sectionName;\\n         this.separator = separator;\\n }\\n\\n function Layout ( insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing ) {\\n         this.insets = insets;\\n         this.visibleCellsWidthS = visibleCellsWidthS;\\n         this.visibleCellsWidthM = visibleCellsWidthM;\\n         this.visibleCellsWidthL = visibleCellsWidthL;\\n         this.visibleCellsHeight = visibleCellsHeight;\\n         this.heightForVisibleCells = heightForVisibleCells;\\n         this.cellSize = cellSize;\\n         this.ratio = ratio;\\n         this.constant = constant;\\n         this.horizontalSpacing = horizontalSpacing;\\n         this.verticalSpacing = verticalSpacing;\\n }\\n\\n function Insets ( top, bottom, left, right ) {\\n         this.top = top;\\n         this.bottom = bottom;\\n         this.left = left;\\n         this.right = right;\\n }\\n\\n function Size ( width, height ) {\\n         this.width = width;\\n         this.height = height;\\n }\\n\\n function Ratio ( inRelation, number1, number2 ) {\\n         this.inRelation = inRelation;\\n         this.number1 = number1;\\n         this.number2 = number2;\\n }\\n\\n function Data ( image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView ) {\\n         this.image = image;\\n         this.title = title;\\n         this.description = description;\\n         this.field1 = field1;\\n         this.field2 = field2;\\n         this.field3 = field3;\\n         this.field4 = field4;\\n         this.isChapter = isChapter;\\n         this.link = link;\\n         this.openInWebView = openInWebView;\\n }\\n\\n function quickData ( link, image, title, field1 ) {\\n         return new Data( image, title, \'unknown\', field1, \'unknown\', \'unknown\', \'unknown\', false, link );\\n }\\n\\n function shuffle ( a ) {\\n         var j, x, i;\\n         for ( i = a.length - 1; i > 0; i-- ) {\\n                 j = Math.floor( Math.random( ) * ( i + 1 ) );\\n                 x = a[ i ];\\n                 a[ i ] = a[ j ];\\n                 a[ j ] = x;\\n         }\\n         return a;\\n }\\n var savedData = document.getElementById( \'ketsu-final-data\' );\\n var parsedJson = JSON.parse( savedData.innerHTML );\\n let output = [ ];\\n let emptyKeyValue = [ new KeyValue( \'\', \'\' ) ];\\n let MainPageObject = new MainPage( new ModuleRequest( \'\', \'get\', emptyKeyValue, null ), new Extra( [ new Commands( \'\', emptyKeyValue ) ], emptyKeyValue ), new JavascriptConfig( true, false, \'\' ), output );\\n var finalJson = JSON.stringify( MainPageObject );\\n savedData.innerHTML = finalJson;\\n /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"output":[{"cellDesing":"normal1","orientation":"vertical","defaultLayout":"wide","paging":"","section":{"sectionName":"","separator":false},"layout":{"insets":{"top":0,"bottom":0,"left":0,"right":0},"visibleCellsWidthS":2,"visibleCellsWidthM":2,"visibleCellsWidthL":2,"visibleCellsHeight":2,"heightForVisibleCells":400,"cellSize":{"width":300,"height":300},"ratio":{"inRelation":"width","number1":1,"number2":2},"constant":{"width":1,"height":2},"horizontalSpacing":0,"verticalSpacing":0},"data":[{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","field1":"","field2":"","field3":"","field4":"","openInWebView":false,"isChapter":false,"link":{"url":"","method":"","headers":[{"key":"","value":""}],"httpBody":null}}]}],"moduleCreatorIdowtJpxJIXQMIDvIENeQA":{"path":"NYWmQ","id":"mainPage,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false,"javascriptEditorScroll":0}}],"search":[{"request":{"url":"","method":"get","headers":[{"key":"","value":"","moduleCreatorHeaderisActive":true}]},"separator":"","extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */ const DefaultLayouts = {\\n        ultraWideFull: \'ultraWideFull\',\\n        ultraWide: \'ultraWide\',\\n        wideFull: \'wideFull\',\\n        wide: \'wide\',\\n        wideStrechedFull: \'wideStrechedFull\',\\n        wideStrechedFullDouble: \'WideStrechedFullDouble\',\\n        wideStreched: \'wideStreched\',\\n        wideStrechedDouble: \'wideStrechedDouble\',\\n        wideStrechedFullList: \'wideStrechedFullList\',\\n        wideStrechedList: \'wideStrechedList\',\\n        doublets: \'doublets\',\\n        doubletsDouble: \'doubletsDouble\',\\n        doubletsFull: \'doubletsFull\',\\n        doubletsFullDouble: \'doubletsFullDouble\',\\n        doubletsConstant: \'doubletsConstant\',\\n        doubletsDoubleConstant: \'doubletsDoubleConstant\',\\n        doubletsFullConstant: \'doubletsFullConstant\',\\n        doubletsFullDoubleConstant: \'doubletsFullDoubleConstant\',\\n        longDoublets: \'longDoublets\',\\n        longDoubletsDouble: \'longDoubletsDouble\',\\n        longDoubletsFull: \'longDoubletsFull\',\\n        longDoubletsFullDouble: \'longDoubletsFullDouble\',\\n        longDoubletsConstant: \'longDoubletsConstant\',\\n        longDoubletsDoubleConstant: \'longDoubletsDoubleConstant\',\\n        longDoubletsFullConstant: \'longDoubletsFullConstant\',\\n        longDoubletsFullDoubleConstant: \'longDoubletsFullDoubleConstant\',\\n        triplets: \'triplets\',\\n        tripletsDouble: \'tripletsDouble\',\\n        tripletsFull: \'tripletsFull\',\\n        tripletsFullDouble: \'tripletsFullDouble\',\\n        tripletsConstant: \'tripletsConstant\',\\n        tripletsDoubleConstant: \'tripletsDoubleConstant\',\\n        tripletsFullConstant: \'tripletsFullConstant\',\\n        tripletsFullDoubleConstant: \'tripletsFullDoubleConstant\',\\n        longTriplets: \'longTriplets\',\\n        longTripletsDouble: \'longTripletsDouble\',\\n        longTripletsFull: \'longTripletsFull\',\\n        longTripletsFullDouble: \'longTripletsFullDouble\',\\n        longTripletsConstant: \'longTripletsConstant\',\\n        longTripletsDoubleConstant: \'longTripletsDoubleConstant\',\\n        longTripletsFullConstant: \'longTripletsFullConstant\',\\n        longTripletsFullDoubleConstant: \'longTripletsFullDoubleConstant\',\\n        none: \'\'\\n};\\nconst CellDesings = {\\n        Special1: \'Special1\',\\n        Special2: \'Special2\',\\n        Special3: \'Special3\',\\n        CELLHelperText: \'CELLHelperText\',\\n        small1: \'small1\',\\n        small2: \'small2\',\\n        normal1: \'normal1\',\\n        normal2: \'normal2\',\\n        normal3: \'normal3\',\\n        normal4: \'normal4\',\\n        normal5: \'normal5\',\\n        normal6: \'normal6\',\\n        normal7: \'normal7\',\\n        wide1: \'wide1\',\\n        wide2: \'wide2\',\\n        wide3: \'wide3\',\\n        wide4: \'wide4\',\\n        wide5: \'wide5\',\\n        wide6: \'wide6\',\\n        wide7: \'wide7\',\\n        wide8: \'wide8\',\\n        wide9: \'wide9\',\\n        wide10: \'wide10\',\\n        wide11: \'wide11\'\\n};\\nconst Paging = {\\n        leading: \'leading\',\\n        centered: \'centered\',\\n        none: \'\'\\n};\\nconst Orientation = {\\n        horizontal: \'horizontal\',\\n        vertical: \'vertical\'\\n};\\n\\nfunction Search ( request, extra, separator, javascriptConfig, output ) {\\n        this.request = request;\\n        this.extra = extra;\\n        this.separator = separator;\\n        this.javascriptConfig = javascriptConfig;\\n        this.output = output;\\n}\\n\\nfunction ModuleRequest ( url, method, headers, httpBody ) {\\n        this.url = url;\\n        this.method = method;\\n        this.headers = headers;\\n        this.httpBody = httpBody;\\n}\\n\\nfunction Extra ( commands, extraInfo ) {\\n        this.commands = commands;\\n        this.extraInfo = extraInfo;\\n}\\n\\nfunction Commands ( commandName, params ) {\\n        this.commandName = commandName;\\n        this.params = params;\\n}\\n\\nfunction JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) {\\n        this.removeJavascript = removeJavascript;\\n        this.loadInWebView = loadInWebView;\\n        this.javaScript = javaScript;\\n}\\n\\nfunction KeyValue ( key, value ) {\\n        this.key = key;\\n        this.value = value;\\n}\\n\\nfunction Output ( cellDesing, orientation, defaultLayout, paging, section, layout, data ) {\\n        this.cellDesing = cellDesing;\\n        this.orientation = orientation;\\n        this.defaultLayout = defaultLayout;\\n        this.paging = paging;\\n        this.section = section;\\n        this.layout = layout;\\n        this.data = data;\\n}\\n\\nfunction Section ( sectionName, separator ) {\\n        this.sectionName = sectionName;\\n        this.separator = separator;\\n}\\n\\nfunction Layout ( insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing ) {\\n        this.insets = insets;\\n        this.visibleCellsWidthS = visibleCellsWidthS;\\n        this.visibleCellsWidthM = visibleCellsWidthM;\\n        this.visibleCellsWidthL = visibleCellsWidthL;\\n        this.visibleCellsHeight = visibleCellsHeight;\\n        this.heightForVisibleCells = heightForVisibleCells;\\n        this.cellSize = cellSize;\\n        this.ratio = ratio;\\n        this.constant = constant;\\n        this.horizontalSpacing = horizontalSpacing;\\n        this.verticalSpacing = verticalSpacing;\\n}\\n\\nfunction Insets ( top, bottom, left, right ) {\\n        this.top = top;\\n        this.bottom = bottom;\\n        this.left = left;\\n        this.right = right;\\n}\\n\\nfunction Size ( width, height ) {\\n        this.width = width;\\n        this.height = height;\\n}\\n\\nfunction Ratio ( inRelation, number1, number2 ) {\\n        this.inRelation = inRelation;\\n        this.number1 = number1;\\n        this.number2 = number2;\\n}\\n\\nfunction Data ( image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView ) {\\n        this.image = image;\\n        this.title = title;\\n        this.description = description;\\n        this.field1 = field1;\\n        this.field2 = field2;\\n        this.field3 = field3;\\n        this.field4 = field4;\\n        this.isChapter = isChapter;\\n        this.link = link;\\n        this.openInWebView = openInWebView;\\n}\\n\\nfunction quickData ( link, image, title, field1 ) {\\n        return new Data( image, title, \'unknown\', field1, \'unknown\', \'unknown\', \'unknown\', false, link );\\n}\\n\\nfunction shuffle ( a ) {\\n        var j, x, i;\\n        for ( i = a.length - 1; i > 0; i-- ) {\\n                j = Math.floor( Math.random( ) * ( i + 1 ) );\\n                x = a[ i ];\\n                a[ i ] = a[ j ];\\n                a[ j ] = x;\\n        }\\n        return a;\\n}\\nvar savedData = document.getElementById( \'ketsu-final-data\' );\\nvar parsedJson = JSON.parse( savedData.innerHTML );\\nlet output = [ ];\\nlet emptyKeyValue = [ new KeyValue( \'\', \'\' ) ];\\nlet searchPageObject = new Search( new ModuleRequest( \'\', \'\', emptyKeyValue, null ), new Extra( [ new Commands( \'\', emptyKeyValue ) ], emptyKeyValue ), \'\', new JavascriptConfig( true, false, \'\' ), output );\\nvar finalJson = JSON.stringify( searchPageObject );\\nsavedData.innerHTML = finalJson;\\n /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"output":[{"cellDesing":"normal1","orientation":"vertical","defaultLayout":"wide","paging":"","section":{"sectionName":"","separator":false},"layout":{"insets":{"top":0,"bottom":0,"left":0,"right":0},"visibleCellsWidthS":2,"visibleCellsWidthM":2,"visibleCellsWidthL":2,"visibleCellsHeight":2,"heightForVisibleCells":400,"cellSize":{"width":300,"height":300},"ratio":{"inRelation":"width","number1":1,"number2":2},"constant":{"width":1,"height":2},"horizontalSpacing":0,"verticalSpacing":0},"data":[{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","field1":"","field2":"","field3":"","field4":"","openInWebView":false,"isChapter":false,"link":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]}],"moduleCreatorIdLSLzUTYDIlbtIYzdmjJV":{"path":"zUJwS","id":"search,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false,"javascriptEditorScroll":0}}],"info":[{"request":{"url":"","method":"get","headers":[{"key":"","value":"","moduleCreatorHeaderisActive":true}]},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */ function Info ( request, extra, javascriptConfig, output ) {\\n        this.request = request;\\n        this.extra = extra;\\n        this.javascriptConfig = javascriptConfig;\\n        this.output = output;\\n}\\n\\nfunction ModuleRequest ( url, method, headers, httpBody ) {\\n        this.url = url;\\n        this.method = method;\\n        this.headers = headers;\\n        this.httpBody = httpBody;\\n}\\n\\nfunction Extra ( commands, extraInfo ) {\\n        this.commands = commands;\\n        this.extraInfo = extraInfo;\\n}\\n\\nfunction Commands ( commandName, params ) {\\n        this.commandName = commandName;\\n        this.params = params;\\n}\\n\\nfunction JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) {\\n        this.removeJavascript = removeJavascript;\\n        this.loadInWebView = loadInWebView;\\n        this.javaScript = javaScript;\\n}\\n\\nfunction KeyValue ( key, value ) {\\n        this.key = key;\\n        this.value = value;\\n}\\n\\nfunction Chapter ( chapName, link, openInWebView ) {\\n        this.chapName = chapName;\\n        this.link = link;\\n        this.openInWebView = openInWebView;\\n}\\n\\nfunction Output ( image, title, link, description, genres, field1, field2, field3, field4, chapters ) {\\n        this.image = image;\\n        this.link = link;\\n        this.title = title;\\n        this.description = description;\\n        this.genres = genres;\\n        this.field1 = field1;\\n        this.field2 = field2;\\n        this.field3 = field3;\\n        this.field4 = field4;\\n        this.chapters = chapters;\\n}\\n\\nfunction getStuff ( array, match ) {\\n        for ( var x = 0; x < array.length; x++ ) {\\n                let data = array[ x ].innerText;\\n                if ( data.includes( match ) ) {\\n                        return data.replace( match, \'\' ).trim( );\\n                }\\n        }\\n}\\n\\nfunction getHtmlStuff ( array, match ) {\\n        for ( var x = 0; x < array.length; x++ ) {\\n                let data = array[ x ].innerText;\\n                if ( data.includes( match ) ) {\\n                        return array[ x ];\\n                }\\n        }\\n}\\nvar savedData = document.getElementById( \'ketsu-final-data\' );\\nvar parsedJson = JSON.parse( savedData.innerHTML );\\nlet emptyKeyValue = [ new KeyValue( \'\', \'\' ) ];\\nvar episodes = [ ];\\nvar type = \'empty\';\\nvar status = \'Unknown\';\\nvar genres = [ ];\\nvar desc = \'\';\\nvar title = \'\';\\nvar image = \'\';\\nimage = new ModuleRequest( image, \'get\', emptyKeyValue, null );\\nvar genresArray = [ ];\\nlet infoPageObject = new Info( new ModuleRequest( \'\', \'\', emptyKeyValue, null ), new Extra( [ new Commands( \'\', emptyKeyValue ) ], emptyKeyValue ), new JavascriptConfig( false, false, \'\' ), new Output( image, title, parsedJson.request, desc, genres, status, \'Anime\', type, \'Eps: \' + episodes.length, episodes ) );\\nvar finalJson = JSON.stringify( infoPageObject );\\nsavedData.innerHTML = finalJson;\\n /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"output":{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"link":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","genres":[""],"field1":"","field2":"","field3":"","field4":"","chapters":[{"chapName":"","openInWebView":false,"link":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]},"moduleCreatorIdVQgJgyuqLVftfsjUQFlq":{"path":"extRk","id":"info,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false,"javascriptEditorScroll":0}}],"chapters":[{"request":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */  function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text; } function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo; } function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link; } function RawVideo(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function Text(text) { this.text = text; } var output = []; var savedData = document.getElementById(\'ketsu-final-data\'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue(\'\', \'\')]; let emptyExtra = new Extra([new Commands(\'\', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Chapters(new ModuleRequest(\'\', \'\', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, \'\'), new Output(new Videos(null, output), null, null)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson; /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"output":{"videos":{"needsResolver":[{"resolverIdentifier":"","link":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}],"rawVideo":[{"video":[{"videoQuality":"","videoLink":{"url":"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]}]},"images":[{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}],"text":{"text":""}},"moduleCreatorIdufoFyxsNnARFucsEiDnm":{"path":"qrDzm","id":"chapters,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleResolvers":[{"resolverInfo":{"resolverName":"","nameMatches":[""],"developer":"","moduleID":"","resolverVersion":1,"baseURL":"","moduleCreatorIdtFBSQzfXbtWYYpvomOjH":{"path":"OwFSc","id":"moduleResolvers,0,resolverInfosection","sectionsHidden":[],"options":{"name":"Resolver Parameters","listName":"parameters"},"cellsHidden":false},"moduleCreatorIdtIuWacjRnyDXaYJHWyjC":{"path":"JOWFF","id":"moduleResolvers,0,resolverInfocell","sectionsHidden":[],"options":{"name":"parameters"},"cellsHidden":false}},"resolver":[{"request":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":false,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */ function Resolver ( request, extra, javascriptConfig, output ) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest ( url, method, headers, httpBody ) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra ( commands, extraInfo ) { this.commands = commands; this.extraInfo = extraInfo;}function Commands ( commandName, params ) { this.commandName = commandName; this.params = params;}function JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue ( key, value ) { this.key = key; this.value = value;}function Output ( video ) { this.video = video;}function Video ( videoQuality, videoLink ) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getNext ( match, array ) { for ( var x = 0; x < array.length; x++ ) { let mMatch = array[ x ]; if ( mMatch.includes( match ) ) { return array[ x + 1 ]; } }}var savedData = document.getElementById( \'ketsu-final-data\' );var parsedJson = JSON.parse( savedData.innerHTML );var emptyKeyValue = [ new KeyValue( \'Referer\', parsedJson.request.url ) ];var videos = [ ];let emptyExtra = new Extra( [ new Commands( \'\', emptyKeyValue ) ], emptyKeyValue );var chaptersObject = new Resolver( new ModuleRequest( \'\', \'\', emptyKeyValue, null ), emptyExtra, new JavascriptConfig( false, false, \'\' ), new Output( videos ) );var finalJson = JSON.stringify( chaptersObject );savedData.innerHTML = finalJson; /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"output":{"moduleID":"","video":[{"videoQuality":"720","videoLink":{"url":"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]},"moduleCreatorIduNYcDbXCaNoKqvfdqyih":{"path":"DDEoU","id":"moduleResolvers,0,resolver,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIdHwOPfUCSsWFhIggSpEta":{"path":"esWHV","id":"moduleResolvers,0section","sectionsHidden":[],"options":{"name":"Resolver"},"cellsHidden":false},"moduleCreatorIdAeNhWpkVwAnVoQAlutvg":{"path":"resolver","id":"moduleResolvers,0,resolversection","sectionsHidden":[],"options":{"name":"Resolver Request","listName":"Request"},"cellsHidden":false}}],"responseCodeFunctions":[{"code":0,"msgTitle":"","msgBody":"","type":"normal","functions":[{"request":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */  /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"moduleCreatorIdFZWgFYFrzHIGXdRnGwGs":{"path":"fXkyO","id":"responseCodeFunctions,0,functions,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIdEGcHlbJURQWWjuCvhWxH":{"path":"gnFeB","id":"responseCodeFunctions,0section","sectionsHidden":[],"options":{"name":"Function"},"cellsHidden":false},"moduleCreatorIdwvICnwRCSgxbLPKdgASj":{"path":"nxUZl","id":"responseCodeFunctions,0,section","sectionsHidden":[],"options":{"name":"Function Parameters","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdPVwbgfMtMhBbzYqpUMXq":{"path":"hkFMf","id":"responseCodeFunctions,0,cell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false},"moduleCreatorIdAIkFiljYgplqBxrIxjkm":{"path":"functions","id":"responseCodeFunctions,0,functionssection","sectionsHidden":[],"options":{"name":"Function Requests","listName":"Request"},"cellsHidden":false}}],"helperFunctions":[{"functionName":"example","msgTitle":"","msgBody":"","type":"normal","functions":[{"request":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\\n        try {\\n\\n            /* JAVASCRIPT STARTS */  /* JAVASCRIPT ENDS */\\n\\n        } catch (e) {\\n            console.error(e.message);\\n\\n            if (typeof KETSU_ASYNC !== \'undefined\') {\\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage(\'\');\\n            }\\n\\n        }\\n        \\n        "},"moduleCreatorIdhKUcHdcKoVqNhHLgBCUx":{"path":"pJpnp","id":"helperFunctions,0,functions,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIdxzWDjJwzevBUikPUpeaF":{"path":"TBwIU","id":"helperFunctions,0section","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false},"moduleCreatorIdmtLrnnNRrigKYdDIjfys":{"path":"QKgHj","id":"helperFunctions,0,section","sectionsHidden":[],"options":{"name":"Function Parameters","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdZBRjAtQHIRokkClmPVID":{"path":"VtSOo","id":"helperFunctions,0,cell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false},"moduleCreatorIdZWKkotYbKbFUdbSfXjFd":{"path":"functions","id":"helperFunctions,0,functionssection","sectionsHidden":[],"options":{"name":"Function Requests","listName":"Request"},"cellsHidden":false}}],"moduleCreatorGlobalOptions":{"selected":"moduleCreatorIdowtJpxJIXQMIDvIENeQA","notesData":{"openedNotes":["sDgPtpULGuPcUvvAkuUr"],"activeNote":"sDgPtpULGuPcUvvAkuUr","notes":{"sDgPtpULGuPcUvvAkuUr":{"noteId":"sDgPtpULGuPcUvvAkuUr","noteTitle":"Tutorial Note","noteDesc":"This note will contain the tutorial so the user can follow it up as he creates the module.","noteData":"## Module Tutorial Note\\n\\nThe user will follow up this tutorial so he learns how to create modules or whatever the module tutorial teaches.\\n\\nYou can create your own module tutorials and contribute them to the github.\\n\\n## Contribute Module Tutorials\\n\\n- Export your module and put it inside ./moduleTutorials \\n- Add the module info to the ./src/model/moduleNotes/moduleTutorials.ts as shown in the structure below.\\n- You can either create a section inside the array or add the module info inside a section.\\n \\n>STRUCTURE:\\n \\n``` json\\n{ \\n    sectionName : \\"\\",\\n    modules : [\\n        {\\n            moduleName : \\"\\",\\n            moduleDesc : \\"\\",\\n            moduleFileName: \\"moduleFileName.json\\"\\n        }\\n    ]\\n}\\n```\\n","isDocumentation":false}}},"hideViews":[],"id":"IvFphxJoMbSTIDz","projectName":"Example Module Tutorial"},"moduleCreatorIdWapcjHLOYCfjmvzsuqZn":{"path":"mainPage","id":"mainPagesection","sectionsHidden":[],"options":{"name":"Main Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIdALZnEgmlAedXsuocjYYs":{"path":"search","id":"searchsection","sectionsHidden":[],"options":{"name":"Search Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIdFhrUHiFkwgLhYVlAYFAR":{"path":"info","id":"infosection","sectionsHidden":[],"options":{"name":"Info Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIdJFLQubYDpluDOGVAiAYc":{"path":"chapters","id":"chapterssection","sectionsHidden":[],"options":{"name":"Chapters","listName":"Request"},"cellsHidden":false},"moduleCreatorIdtxtwWxudxFTRHhdVLDJV":{"path":"moduleResolvers","id":"moduleResolverssection","sectionsHidden":[],"options":{"name":"Resolvers","listName":"Resolver"},"cellsHidden":false},"moduleCreatorIdlZERsJtYXVMXXWABoCnQ":{"path":"responseCodeFunctions","id":"responseCodeFunctionssection","sectionsHidden":[],"options":{"name":"Response Code Funtions","listName":"Function"},"cellsHidden":false},"moduleCreatorIdvNlQMBbftmBWAoBCbloO":{"path":"helperFunctions","id":"helperFunctionssection","sectionsHidden":[],"options":{"name":"Helper Functions","listName":"Request"},"cellsHidden":false}}')}},e=>{e.O(0,[54],(()=>(63607,e(e.s=63607)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(self.webpackChunkmodule_dev_site_ts=self.webpackChunkmodule_dev_site_ts||[]).push([[179],{6752:function(t,e,i){var o,n,s=this&&this.__awaiter||function(t,e,i,o){return new(i||(i=Promise))((function(n,s){function r(t){try{a(o.next(t))}catch(t){s(t)}}function l(t){try{a(o.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,l)}a((o=o.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,o,n,s,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function l(s){return function(l){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,o&&(n=2&s[0]?o.return:s[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,s[1])).done)return n;switch(o=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,o=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){r=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){r.label=s[1];break}if(6===s[0]&&r.label<n[1]){r.label=n[1],n=s;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(s);break}n[2]&&r.ops.pop(),r.trys.pop();continue}s=e.call(t,r)}catch(t){s=[6,t],o=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};o=[i,e,i(1042),i(6465),i(1795),i(3229),i(9701),i(6231),i(1199),i(8110),i(3408)],n=function(t,e,i,o,n,l,a,c,d,u,g){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var p=function(){function t(){this.views=new Map,this.utils=new n.Utils,this.moduleManager=new l.ModuleManager,this.sockets=new a.SocketsConnectionHandler}return t.prototype.start=function(){var t;return s(this,void 0,void 0,(function(){var e,n;return r(this,(function(s){return this.configApp(),new i.BaseGridController("baseGrid",o.viewBaseGridHtml).setUp(),e=null!==(t=this.moduleManager.getLocalStotrageModule())&&void 0!==t?t:this.moduleManager.getDefaultModule(),null==window.mApp.moduleManager.getLocalStotrageModule()?((n=new g.NewProjectController).disableExit(),u.PopUpView.showPopUpViewOnBody(n.id,!1)):this.moduleManager.loadNewModule(e),c.ConnectionChecker.shared.setUp(),this.sockets.setUp(this.sockets.getCurrentIp()),d.AutoSave.shared.start(),[2]}))}))},t.prototype.configApp=function(){},t.prototype.getApp=function(){return this},t}();e.default=p}.apply(e,o),void 0===n||(t.exports=n)},1042:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__createBinding||(Object.create?function(t,e,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,o,n)}:function(t,e,i,o){void 0===o&&(o=i),t[o]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),c=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&l(e,t,i);return a(e,t),e},d=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9303),i(7321),i(9243),i(2614),i(3802),i(4580),i(7535),i(2069),i(1208),i(8166),i(6596),i(191),i(9870),i(3441),i(4234)],n=function(t,e,i,o,n,s,l,a,u,g,p,I,C,h,f,A,v){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseGridController=void 0,i=d(i),o=c(o),s=d(s),l=d(l);var w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.setUp=function(){var t=this;this.insertInto(new a.InsertedViewData(void 0,"gridHolder"));var e=[new v.NavBar("mainNavBar"),new p.LeftMenuGridElementController("leftMenuGridEl",I.leftMenuGridElView),new s.default("VS4",g.viewBaseGridVSeparator),new s.default("VS3",g.viewBaseGridHSeparator,!1),new C.CenterViewGridElementController("CenterViewGridElementController",h.CenterGridElementControllerView),new s.default("VS1",g.viewBaseGridVSeparator),new s.default("VS2",g.viewBaseGridVSeparator,!1),new o.default("documentation",u.viewBaseGridElement),new l.default("HS1",g.viewBaseGridHSeparator),new o.GridElementWithView(new f.LogsGridController("logsGridController").id,"bottomLogs",void 0),new A.BottomStatusController("bottomStatusBar")];return this.gridElements=e.map((function(e){return t.insertNewView(new a.InsertedViewData(e.id,void 0)),e.id})),this.gridDistribution=[["mainNavBar","mainNavBar","mainNavBar","mainNavBar","mainNavBar"],["VS3","VS3","VS3","VS3","VS3"],["leftMenuGridEl","VS4","CenterViewGridElementController","VS2","documentation"],["leftMenuGridEl","VS4","HS1","VS2","documentation"],["leftMenuGridEl","VS4","bottomLogs","VS2","documentation"],["bottomStatusBar","bottomStatusBar","bottomStatusBar","bottomStatusBar","bottomStatusBar"]],this.gridDesing={columns:[new n.GridElementDesign("350","px",!0,[{resize:40,range:{from:0,to:200}},{resize:350,range:{from:200,to:350}}],{min:40,max:400}),new n.GridElementDesign("1","px",!1),new n.GridElementDesign("auto","",!0,[],{min:600,max:99999999}),new n.GridElementDesign("0","px",!1),new n.GridElementDesign("0","px",!0,[{resize:40,range:{from:0,to:200}},{resize:350,range:{from:200,to:350}}],{min:0,max:700})],rows:[new n.GridElementDesign("50","px",!1),new n.GridElementDesign("1","px",!1),new n.GridElementDesign("auto","",!0,[],{min:350,max:99999999}),new n.GridElementDesign("1","px",!1),new n.GridElementDesign("40","px",!0,[{resize:40,range:{from:0,to:100}}]),new n.GridElementDesign("30","px",!1)]},this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this},e.prototype.setLogsViewSize=function(t){this.gridDesing.rows[this.gridDesing.rows.length-2].size="".concat(t),this.setDesign(this.gridDesing)},e}(i.default);e.BaseGridController=w}.apply(e,o),void 0===n||(t.exports=n)},3441:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(7321),i(9701),i(8110),i(9450),i(7214),i(9755)],n=function(t,e,i,o,n,s,a,c){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BottomStatusController=void 0,i=l(i),c=l(c);var d=function(t){function e(e){void 0===e&&(e=window.mApp.utils.makeId());var i=t.call(this,e,s.bottomStatusBarView)||this;return window.mApp.sockets.socketsConnectionInterfaces[i.id]=i,i}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),(0,c.default)("[".concat(this.id,"] .sockets")).off().on({click:function(t){t.preventDefault(),t.stopImmediatePropagation(),n.PopUpView.showPopUpViewOnBody((new a.ConnectSocketController).id)}}),window.mApp.sockets.connectionStatus==o.serverConnectionStatus.connected?this.connectionEnabled():this.connectionFailed()},e.prototype.connectionEnabled=function(){(0,c.default)("[".concat(this.id,"] .title")).text("Connected"),(0,c.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("connected.png"))},e.prototype.connectionFailed=function(){(0,c.default)("[".concat(this.id,"] .title")).text("Disconnected"),(0,c.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("disconnected.png"))},e.prototype.finish=function(){delete window.mApp.sockets.socketsConnectionInterfaces[this.id],t.prototype.finish.call(this)},e}(i.default);e.BottomStatusController=d}.apply(e,o),void 0===n||(t.exports=n)},6596:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(7321),i(6993),i(4580),i(5646)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CenterViewGridElementController=void 0;var a=function(t){function e(e,i){var s=t.call(this,e,i)||this;return s.currentModuleDataId="",s.viewTypes=[{pathMatches:["chapters"],createView:function(t){return new o.RequestController(window.mApp.utils.makeId(15),t,"<div>hello world</div>")}}],window.mApp.moduleManager.moduleViewsExecutor[s.id]=s,s.insertViewsDefault=new n.InsertedViewData(s.id,"$idviews"),s}return r(e,t),e.prototype.viewWasInserted=function(){this.setUp()},e.prototype.setUp=function(){return t.prototype.setUp.call(this),this},e.prototype.moduleLoaded=function(){var t;this.modulePartWasSelected(null!==(t=window.mApp.moduleManager.getModuleOptions().selected)&&void 0!==t?t:"")},e.prototype.moduleDataUpdated=function(){var t;if(null!=window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId));else for(var e=0,i=this.insertedViews;e<i.length;e++)null===(t=i[e].getView())||void 0===t||t.finish()},e.prototype.modulePartWasSelected=function(t){for(var e,i,r,l=0,a=this.insertedViews;l<a.length;l++)null===(e=a[l].getView())||void 0===e||e.finish();if(""!=t){this.currentModuleDataId=t,window.mApp.utils.deepCopy(null!==(r=null===(i=window.mApp.moduleManager.moduleMap.get(this.currentModuleDataId))||void 0===i?void 0:i.jsonPath)&&void 0!==r?r:[]).filter((function(t){if(null==window.mApp.utils.getNumberFromString(t))return t})).join();var c=window.mApp.moduleManager.moduleMap.get(t);if(null!=c){var d=!1;null!=window.mApp.utils.getNumberFromString(c.jsonPath[c.jsonPath.length-1])&&(d=!0);var u=void 0;u=d?new o.RequestController(window.mApp.utils.makeId(15),t):new s.ParamsContoller(t),this.insertNewView(new n.InsertedViewData(u.id)),u.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"})}}},e.prototype.finish=function(){t.prototype.finish.call(this)},e}((i=l(i)).default);e.CenterViewGridElementController=a}.apply(e,o),void 0===n||(t.exports=n)},2376:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(33)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuDataset=void 0,i=s(i),e.leftMenuDataset=[{id:"module",selected:!0,subMenuCell:{viewId:"leftSubMenuModule",image:"./images/module.png",name:"Module"},subMenuViewer:{viewId:"leftMenuModuleView",createView:function(){return new o.TestViewController("leftMenuModuleView",'<div $id class="left-menu-viewer-view">  </div> ')}}},{id:"notes",selected:!1,subMenuCell:{viewId:"leftMenuSubMenuNotes",image:"./images/notes.png",name:"Module\nNotes"},subMenuViewer:{viewId:"leftMenuNotesView",createView:function(){return new i.default("leftMenuNotesView",'<div $id class="left-menu-viewer-view"> $id </div> ')}}},{id:"quickDocumentation",selected:!1,subMenuCell:{viewId:"leftSubMenuquickDocumentation",image:"./images/information.png",name:"Quick Doc"},subMenuViewer:{viewId:"leftMenuQuickDocView",createView:function(){return new i.default("leftMenuQuickDocView",'<div $id class="left-menu-viewer-view"> $id </div> ')}}},{id:"moduleTutorials",selected:!1,subMenuCell:{viewId:"leftSubMenuTutorials",image:"./images/tutorial.png",name:"Module Tutorials"},subMenuViewer:{viewId:"leftMenuModuleTutorials",createView:function(){return new i.default("leftMenuModuleTutorials",'<div $id class="left-menu-viewer-view"> $id </div> ')}}}]}.apply(e,o),void 0===n||(t.exports=n)},1208:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(7321),i(9076),i(4580),i(8408),i(832),i(1779),i(8130),i(5066),i(378),i(2376),i(9755)],n=function(t,e,i,o,n,s,a,c,d,u,g,p,I){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuGridElementController=void 0,i=l(i),o=l(o),I=l(I);var C=function(t){function e(e,i){var o=t.call(this,e,i)||this;return o.subMenu="",o.subMenuViewer="",o.topView="",o.leftMenuData=p.leftMenuDataset,o}return r(e,t),e.prototype.viewWasInserted=function(){this.setUp()},e.prototype.setUp=function(){t.prototype.setUp.call(this);var e=new a.LeftMenuMenuViewerController("leftMenuViewer",d.leftMenuMenuViewerView);e.leftMenuDataInterface=this,this.subMenuViewer=e.id;var i=new c.LeftMenuSubMenuController("leftMenuSubMenu",s.leftMenuSubMenuView);i.leftMenuDataInterface=this,this.subMenu=i.id;var r=new g.LeftMenuTopController("leftMenuTop",u.leftMenuTopView);return this.topView=r.id,this.insertNewView(new n.InsertedViewData(this.subMenu,void 0)),this.insertNewView(new n.InsertedViewData(this.subMenuViewer,void 0)),this.insertNewView(new n.InsertedViewData(this.topView,void 0)),this.mResizeObserver=new o.default(new n.InsertedViewData(this.id,void 0),[{name:"big",condition:function(t){return t.inlineSize>=60&&t.inlineSize<=999999}},{name:"small",condition:function(t){return t.inlineSize>=0&&t.inlineSize<=50}}]),this.mResizeObserver.interface=this,this.mResizeObserver.triggerManually(),this},e.prototype.resizeTriggered=function(t){var e=window.mApp.views.get(this.subMenuViewer);switch(t.name){case"small":null==e||e.isHidden(!0),(0,I.default)("[".concat(this.id,"]")).addClass("left-menu-small"),(0,I.default)("[".concat(this.id,"]")).removeClass("left-menu-big");break;case"big":null==e||e.isHidden(!1),(0,I.default)("[".concat(this.id,"]")).removeClass("left-menu-small"),(0,I.default)("[".concat(this.id,"]")).addClass("left-menu-big")}this.getView(this.subMenu).parentResized(t.name)},e.prototype.resizeFinished=function(){},e.prototype.getLeftMenuData=function(t){for(var e=0,i=this.leftMenuData;e<i.length;e++){var o=i[e];if(o.id=t)return o}},e.prototype.getLeftMenuDataArrray=function(){return this.leftMenuData},e.prototype.subMenuSelected=function(t){this.getView(this.subMenuViewer).changeMenuView(t)},e.prototype.finish=function(){this.mResizeObserver.finished(),t.prototype.finish.call(this)},e}(i.default);e.LeftMenuGridElementController=C}.apply(e,o),void 0===n||(t.exports=n)},378:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__awaiter||function(t,e,i,o){return new(i||(i=Promise))((function(n,s){function r(t){try{a(o.next(t))}catch(t){s(t)}}function l(t){try{a(o.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,l)}a((o=o.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var i,o,n,s,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function l(s){return function(l){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,o&&(n=2&s[0]?o.return:s[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,s[1])).done)return n;switch(o=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,o=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){r=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){r.label=s[1];break}if(6===s[0]&&r.label<n[1]){r.label=n[1],n=s;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(s);break}n[2]&&r.ops.pop(),r.trys.pop();continue}s=e.call(t,r)}catch(t){s=[6,t],o=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(8110),i(9755),i(3408)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuTopController=void 0,i=c(i),n=c(n);var d=function(t){function e(e,i){var o=t.call(this,e,i)||this;return window.mApp.moduleManager.moduleViewsExecutor[o.id]=o,o}return r(e,t),e.prototype.viewWasInserted=function(){this.setUp()},e.prototype.setUp=function(){var e=this;return t.prototype.setUp.call(this),console.log("creating shit"),(0,n.default)("[".concat(this.id,"] .new-button")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),o.PopUpView.showPopUpViewOnBody((new s.NewProjectController).id).clipToParent()})),(0,n.default)("[".concat(this.id,"] .load-button")).off().on("click",(function(t){return l(e,void 0,void 0,(function(){var e,i,o;return a(this,(function(n){switch(n.label){case 0:return t.preventDefault(),t.stopImmediatePropagation(),[4,this.selectFile("application/json",!1)];case 1:return e=n.sent(),o=(i=window.mApp.moduleManager).loadNewModule,[4,e.text()];case 2:return o.apply(i,[n.sent()]),[2]}}))}))})),(0,n.default)("[".concat(this.id,"] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions().projectName),this},e.prototype.selectFile=function(t,e){return l(this,void 0,void 0,(function(){return a(this,(function(i){return[2,new Promise((function(i){var o=document.createElement("input");o.type="file",o.multiple=e,o.accept=t,o.onchange=function(t){var n=Array.prototype.slice.call(o.files);i(e?n:n[0])},o.click()}))]}))}))},e.prototype.moduleLoaded=function(){this.setUp()},e.prototype.moduleDataUpdated=function(){},e.prototype.moduleProjectNameChanged=function(){(0,n.default)("[".concat(this.id,"] .p-name .center-v-absolute")).text(window.mApp.moduleManager.getModuleOptions().projectName)},e.prototype.finish=function(){delete window.mApp.moduleManager.moduleViewsExecutor[this.id],(0,n.default)("[".concat(this.id,"] .new-button")).off(),(0,n.default)("[".concat(this.id,"] .load-button")).off(),t.prototype.finish.call(this)},e}(i.default);e.LeftMenuTopController=d}.apply(e,o),void 0===n||(t.exports=n)},832:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4580),i(1166),i(5353)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuMenuViewerController=void 0;var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),window.mApp.moduleManager.moduleViewsExecutor[this.id]=this},e.prototype.setUp=function(){var e;t.prototype.setUp.call(this),this.insertedViews.forEach((function(t){var e;null===(e=t.getView())||void 0===e||e.finish()}));var o=null===(e=this.leftMenuDataInterface)||void 0===e?void 0:e.getLeftMenuDataArrray();if(null!=o){for(var s=o.map((function(t){return t.subMenuViewer.createView().id})),r="",l=0,a=o;l<a.length;l++){var c=a[l];if(c.selected){r=c.subMenuViewer.viewId;break}}""==r&&o.length>0&&(o[0].selected=!0,r=o[0].subMenuCell.viewId);var d=new n.ViewsHolder("leftMenuViewsHolder",s,r);this.insertNewView(new i.InsertedViewData(d.id)),d.setConstraints({top:"0px",left:"0px",bottom:"0px",right:"0px"})}return this},e.prototype.changeMenuView=function(t){this.getView("leftMenuViewsHolder").showView(t.subMenuViewer.viewId)},e.prototype.moduleLoaded=function(){this.setUp()},e.prototype.finish=function(){this.leftMenuDataInterface=void 0,delete window.mApp.moduleManager.moduleViewsExecutor[this.id],t.prototype.finish.call(this)},e}((o=l(o)).default);e.LeftMenuMenuViewerController=s}.apply(e,o),void 0===n||(t.exports=n)},33:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(3369),i(2593),i(8136),i(4580),i(1166),i(3753),i(9146),i(9028),i(8889),i(664)],n=function(t,e,i,o,n,s,a,c,d,u,g,p){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TestViewController=void 0;var I=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){t.prototype.setUp.call(this);var e=new i.UICollectionView("collectionViewId",void 0,d.leftMenuViewerModuleCollectionView);return e.dataSourceDelegate=this,this.insertNewView(new s.InsertedViewData(e.id,void 0)),e.setConstraints({top:"0px",left:"0px",right:"0px",bottom:"0px"}),e.reloadData(),this},e.prototype.getSectionsNumber=function(t,e){for(var i=e,o=0,s=t;o<s.length;o++){var r=s[o];r instanceof n.ModuleSectionData&&(i=this.getSectionsNumber(r.cells,i),i+=1)}return i},e.prototype.getSectionsArray=function(t,e){void 0===e&&(e=[]);for(var i=e,o=0,s=t;o<s.length;o++){var r=s[o];r instanceof n.ModuleSectionData&&this.getSectionsArray(r.cells,[r]).forEach((function(t){i.push(t)}))}return i},e.prototype.cvNumberOfItemsInSection=function(t,e){var i=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[e].cells;return i[Math.floor(Math.random()*i.length)]instanceof n.ModuleSectionData?0:i.length},e.prototype.cvNumberOfSections=function(t){return console.log(this.getSectionsNumber(window.mApp.moduleManager.moudleParsed,0)),this.getSectionsNumber(window.mApp.moduleManager.moudleParsed,0)},e.prototype.cvCellForItemAt=function(t,e){var i=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[e.section].cells[e.item];return new g.LeftMenuModuleViewCell(i.jsonId,c.leftMenuViewerModuleCellView)},e.prototype.cvCellForSectionAt=function(t,e,i){var n=this.getSectionsArray(window.mApp.moduleManager.moudleParsed,[])[i];if(e==o.UICollectionViewSectionCellType.header)return new p.LeftMenuModuleViewSection(n.jsonId,u.leftMenuViewerModuleSectionView)},e.prototype.cvDidSelectItem=function(t,e){console.log(e)},e.prototype.cvDidSelectSection=function(t,e,i){console.log(e)},e}((a=l(a)).default);e.TestViewController=I}.apply(e,o),void 0===n||(t.exports=n)},8889:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(7021),i(5219),i(661),i(4580),i(9755),i(8509)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuModuleViewCell=void 0,c=l(c);var u=function(t){function e(e,i){var o=t.call(this,i)||this;return o.canRemove=!1,o.moduleDataId=e,o}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e=this;t.prototype.setUp.call(this);var i=window.mApp.moduleManager.moduleMap.get(this.moduleDataId),o=i.getOptions();(0,c.default)("[".concat(this.id,"] .cell-holder")).css({left:"".concat(15*(i.sections.length-1),"px")});var n=i.getObjectIndex();return(0,c.default)("[".concat(this.id,"] .title")).text("".concat(o.options.name)),null!=n&&(0,c.default)("[".concat(this.id,"] .title")).text("".concat(o.options.name," ").concat(n+1)),null!=window.mApp.utils.getNumberFromString(i.jsonPath[i.jsonPath.length-1])&&(this.canRemove=!0,(0,c.default)("[".concat(this.id,"] .button-holder")).off().on("click",(function(t){var o,n;t.preventDefault(),t.stopImmediatePropagation(),(null!==(n=null===(o=i.getSection())||void 0===o?void 0:o.cells)&&void 0!==n?n:[]).length<=1||e.showAreYouSureToDelete((0,c.default)("[".concat(e.id,"]")),(function(){var t;i.finish(),null===(t=i.getSection())||void 0===t||t.updatePaths(),e.getView(e.collectionViewId).reloadData(),window.mApp.moduleManager.moduleDataUpdated()}))}))),this.canRemove?(0,c.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("code.png")):((0,c.default)("[".concat(this.id,"] .cell-distr")).css({"grid-template-columns":"25px auto"}),(0,c.default)("[".concat(this.id,"] .button-holder")).css({display:"none"}),(0,c.default)("[".concat(this.id,"] img")).attr("src",window.mApp.utils.getImageUrl("params.png"))),(0,c.default)("[".concat(this.id,"] .click-select")).off().on("click",(function(t){var o,n,s;t.preventDefault(),t.stopImmediatePropagation(),window.mApp.moduleManager.getModuleOptions().selected=i.jsonId;var r=e.getView(e.collectionViewId),l=null!==(n=null===(o=document.querySelector("[".concat(r.id,"] .left-collection-view")))||void 0===o?void 0:o.scrollTop)&&void 0!==n?n:0;r.updateCellsWithoutRedrawing(),window.mApp.views.get("CenterViewGridElementController").modulePartWasSelected(i.jsonId),null!=(null===(s=document.querySelector("[".concat(r.id,"] .left-collection-view")))||void 0===s?void 0:s.scrollTop)&&(document.querySelector("[".concat(r.id,"] .left-collection-view")).scrollTop=l)})),this.cellWasReloadedWithoutRedrawing(),this},e.prototype.showAreYouSureToDelete=function(t,e){var i=t.get(0);if(null!=i){var r=new o.DropDown,l=new n.DefaultDropDownCell("Delete",void 0,void 0,!0,d.viewDefaultDropDownCell);l.viewWasInsertedCallback=function(t){(0,c.default)("[".concat(t,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-red"])},r.addCell(l,(function(t,i){i.finish(),e()})),r.insertInto(new a.InsertedViewData(void 0,"body")),r.setUpWithElement(0,10,s.ElementModalPos.right,s.ElemModalDirection.bottom,i,t.outerWidth())}},e.prototype.cellWasReloadedWithoutRedrawing=function(){t.prototype.cellWasReloadedWithoutRedrawing.call(this);var e=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);e.getOptions(),e.isCellHidden()?(0,c.default)("[".concat(this.id,"]")).css({height:"0",display:"none"}):(0,c.default)("[".concat(this.id,"]")).css({height:"2.4rem",display:""}),e.jsonId==window.mApp.moduleManager.getModuleOptions().selected?(0,c.default)("[".concat(this.id,"] .cell-holder")).addClass("selected"):(0,c.default)("[".concat(this.id,"] .cell-holder")).removeClass("selected")},e.prototype.finish=function(){t.prototype.finish.call(this),(0,c.default)("[".concat(this.id,"] .button-holder")).off()},e}(i.UICollectionViewCell);e.LeftMenuModuleViewCell=u}.apply(e,o),void 0===n||(t.exports=n)},664:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9020),i(8136),i(9755),i(7021),i(5219),i(8509),i(661),i(4580)],n=function(t,e,i,o,n,s,a,c,d,u){"use strict";var g;Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuModuleViewSection=void 0,n=l(n),function(t){t.add="Add",t.del="Del",t.none="none"}(g||(g={}));var p=function(t){function e(e,i){var o=t.call(this,i)||this;return o.hasSectionController=!0,o.sectionButton=g.add,o.moduleDataId=e,o}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e,i,s=this;t.prototype.setUp.call(this);var r=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);if(null==r)return this;(0,n.default)("[".concat(this.id,"] .cell-holder")).css({left:"".concat(15*r.sections.length,"px")});var l=r.getObjectIndex();return(0,n.default)("[".concat(this.id,"] .text")).text("".concat(null===(e=r.options)||void 0===e?void 0:e.name)),null!=l&&(0,n.default)("[".concat(this.id,"] .text")).text("".concat(null===(i=r.options)||void 0===i?void 0:i.name," ").concat(l+1)),r.canModify||window.mApp.utils.deepCopy(r.cells).pop()instanceof o.ModuleSectionData||((0,n.default)("[".concat(this.id,"] .section-controller")).css({display:"none"}),(0,n.default)("[".concat(this.id,"] .text")).css({left:"0.5rem"}),this.hasSectionController=!1),null!=window.mApp.utils.getNumberFromString(r.jsonPath[r.jsonPath.length-1])&&((0,n.default)("[".concat(this.id,"] .bh-txt")).text("Del"),this.sectionButton=g.del),this.hasSectionController||this.sectionButton!=g.add||(this.sectionButton=g.none,(0,n.default)("[".concat(this.id,"] .button-holder")).css({display:"none"})),this.hasSectionController||this.sectionButton!=g.none||(0,n.default)("[".concat(this.id,"] .section-distr")).css({"grid-template-columns":"1fr"}),this.cellWasReloadedWithoutRedrawing(),this.hasSectionController?((0,n.default)("[".concat(this.id,"] .title")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),s.showHideSection(r)})),(0,n.default)("[".concat(this.id,"] .section-controller")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),s.showHideSection(r)})),(0,n.default)("[".concat(this.id,"] .button-holder")).off().on("click",(function(t){var e,i;if(t.preventDefault(),t.stopImmediatePropagation(),s.showHideSection(r,!1),s.sectionButton==g.del){if((null!==(i=null===(e=r.getSection())||void 0===e?void 0:e.cells)&&void 0!==i?i:[]).length<=1)return;s.showAreYouSureToDelete((0,n.default)("[".concat(s.id,"]")),(function(){var t;r.finish(),null===(t=r.getSection())||void 0===t||t.updatePaths(),window.mApp.moduleManager.moduleDataUpdated(),s.getView(s.collectionViewId).reloadData()}))}else s.sectionButton==g.add&&(r.addCell(),r.updated(),s.getView(s.collectionViewId).reloadData())})),this):this},e.prototype.showHideSection=function(t,e){void 0===e&&(e=void 0),t.hideCells(null!=e?e:!t.getOptions().cellsHidden),this.getView(this.collectionViewId).updateCellsWithoutRedrawing()},e.prototype.showAreYouSureToDelete=function(t,e){var i=t.get(0);if(null!=i){var o=new s.DropDown,r=new a.DefaultDropDownCell("Delete",void 0,void 0,!0,c.viewDefaultDropDownCell);r.viewWasInsertedCallback=function(t){(0,n.default)("[".concat(t,"]")).addClass(["bg-secondary-dark-hover","pointer","tc-red"])},o.addCell(r,(function(t,i){i.finish(),e()})),o.insertInto(new u.InsertedViewData(void 0,"body")),o.setUpWithElement(0,10,d.ElementModalPos.right,d.ElemModalDirection.bottom,i,t.outerWidth())}},e.prototype.cellWasReloadedWithoutRedrawing=function(){t.prototype.cellWasReloadedWithoutRedrawing.call(this);var e=window.mApp.moduleManager.moduleMap.get(this.moduleDataId);e.getOptions().cellsHidden?(0,n.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-right.png"):(0,n.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-bottom.png"),e.isCellHidden()?(0,n.default)("[".concat(this.id,"]")).css({height:"0",display:"none"}):(0,n.default)("[".concat(this.id,"]")).css({height:"2.2rem",display:""})},e.prototype.finish=function(){(0,n.default)("[".concat(this.id,"] .title")).off(),(0,n.default)("[".concat(this.id,"] .section-controller")).off(),(0,n.default)("[".concat(this.id,"] .button-holder")).off(),t.prototype.finish.call(this)},e}(i.UICollectionVievSectionCell);e.LeftMenuModuleViewSection=p}.apply(e,o),void 0===n||(t.exports=n)},2737:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});o=[i,e,i(5044)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuSubMenuCellController=void 0;var o=function(t){function e(e,i,o,n){var s=this,r=n;return null!=r&&(r=(r=r.replace("$title",e.subMenuCell.name)).replace("$imageUrl",e.subMenuCell.image)),(s=t.call(this,i,o,r)||this).leftDataId=e.id,s}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){return this},e}(i.SelectionView);e.LeftMenuSubMenuCellController=o}.apply(e,o),void 0===n||(t.exports=n)},1779:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4580),i(1166),i(8128),i(2737)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LeftMenuSubMenuController=void 0;var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.viewWasInserted=function(){this.setUp()},e.prototype.setUp=function(){return this.createCells(),this},e.prototype.createCells=function(){var t,e=null===(t=this.leftMenuDataInterface)||void 0===t?void 0:t.getLeftMenuDataArrray();if(null!=e)for(var o=0;o<e.length;o++){var r=e[o],l=new s.LeftMenuSubMenuCellController(r,r.selected,r.subMenuCell.viewId,n.leftMenuSubMenuCellView);this.insertNewView(new i.InsertedViewData(l.id,"leftMenuSubMenuHolder")),l.selectedInterface=this}},e.prototype.viewWasSelected=function(t){var e,i,o=null===(e=this.leftMenuDataInterface)||void 0===e?void 0:e.getLeftMenuDataArrray();if(null!=o){for(var n=0,s=o;n<s.length;n++){var r=s[n],l=this.getView(r.subMenuCell.viewId);r.selected=!1,r.subMenuCell.viewId!=t?(l.isSelected(!1,!1),r.selected=!1):(l.isSelected(!0,!1),r.selected=!0,null===(i=this.leftMenuDataInterface)||void 0===i||i.subMenuSelected(r))}this.makeGridHolderBig()}},e.prototype.parentResized=function(t){var e,i=null===(e=this.leftMenuDataInterface)||void 0===e?void 0:e.getLeftMenuDataArrray();if(null!=i)for(var o=0,n=i;o<n.length;o++){var s=n[o],r=this.getView(s.subMenuCell.viewId);"small"==t?r.isSelectedWasSet(!1):r.isSelected(s.selected,!1)}},e.prototype.makeGridHolderBig=function(){var t=this.getView("leftMenuGridEl"),e=this.getView("baseGrid");null!=t&&"small"==t.mResizeObserver.currentCondition&&(e.gridDesing.columns[0].size="350",e.setDesign(e.gridDesing))},e.prototype.finish=function(){t.prototype.finish.call(this),this.leftMenuDataInterface=void 0},e}((o=l(o)).default);e.LeftMenuSubMenuController=a}.apply(e,o),void 0===n||(t.exports=n)},3137:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9076),i(4095),i(4580),i(1166),i(371),i(6254),i(8699),i(6266),i(936),i(9755)],n=function(t,e,i,o,n,s,a,c,d,u,g,p){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KetsuLogsViewerController=void 0,i=l(i),s=l(s),p=l(p);var I=function(t){function e(e,i){void 0===e&&(e=window.mApp.utils.makeId()),void 0===i&&(i=a.KetsuLogsViewerView);var s=t.call(this,e,i)||this;return s.settingsController="",s.insertViewsDefault=new n.InsertedViewData(s.id,"$idviews"),o.LogsParser.shared.logsInterfaces[s.id]=s,s}return r(e,t),e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),this.resizeObserver=new i.default(new n.InsertedViewData(this.id,void 0),[{name:"small",condition:function(t){return t.blockSize<=41}},{name:"big",condition:function(t){return t.blockSize>=50&&t.inlineSize>100}},{name:"closed",condition:function(t){return t.inlineSize<=100}}]),this.resizeObserver.interface=this,this.resizeObserver.triggerManually(),(0,p.default)("[".concat(this.id,"] .button")).on("click",(function(t){var i;t.preventDefault(),t.stopImmediatePropagation(),"closed"==e.currentConditionName&&(null===(i=window.mApp.views.get("logsGridController"))||void 0===i||i.showKetsuLogs()),"small"==e.currentConditionName&&window.mApp.views.get("baseGrid").setLogsViewSize(400),"big"==e.currentConditionName&&window.mApp.views.get("baseGrid").setLogsViewSize(40)})),this.setUp()},e.prototype.updateButton=function(){if("closed"==this.currentConditionName)return(0,p.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-left.png"),void(0,p.default)("[".concat(this.id,"]")).addClass("closed");"small"==this.currentConditionName&&(0,p.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-top.png"),"big"==this.currentConditionName&&((0,p.default)("[".concat(this.id,"] img")).attr("src","./images/arrow-bottom.png"),(0,p.default)("[".concat(this.id,"]")).removeClass("closed"))},e.prototype.setUp=function(){var e,i=this;t.prototype.setUp.call(this),this.deleteSubviews();for(var s=[],r=0,l=o.LogsParser.shared.logsOrder;r<l.length;r++){var a=l[r],d=o.LogsParser.shared.logs[a];d.length>0&&s.push(new u.SectionCellController(d[0].section));for(var I=function(t){var n=new C(t.action,(function(){var e,n,s;""!=(null!==(e=t.content)&&void 0!==e?e:"")&&(o.LogsParser.shared.logSelected({sectionId:null!==(n=t.sectionId)&&void 0!==n?n:"",logId:t.id}),null===(s=i.getView(i.settingsController).getCollectionView())||void 0===s||s.updateCellsWithoutRedrawing())}),t.error,null!=t.content,(null===(e=o.LogsParser.shared.selectedLog)||void 0===e?void 0:e.logId)==t.id,null!=t.content);n.logId=t.id,s.push(n)},h=0,f=d;h<f.length;h++)I(f[h])}0==s.length&&s.push(new c.JSLogsCellController("Logs are empty.",!1));var A=new g.SettingsCellController(s.map((function(t){return t.id})));return this.settingsController=A.id,A.interceptCollectionView=function(t){t.style({"overflow-x":"hidden"})},this.insertNewView(new n.InsertedViewData(A.id,void 0)),(0,p.default)("[".concat(A.id,"]")).addClass("bg-secondary"),A.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},e.prototype.logsUpdated=function(){this.setUp()},e.prototype.logSelected=function(){},e.prototype.resizeTriggered=function(t){this.currentConditionName=t.name,this.updateButton()},e.prototype.resizeFinished=function(t){},e.prototype.observerFinished=function(){},e.prototype.finish=function(){var e;null===(e=this.resizeObserver)||void 0===e||e.finished(),this.resizeObserver=void 0,(0,p.default)("[".concat(this.id,"] .button")).off(),delete o.LogsParser.shared.logsInterfaces[this.id],t.prototype.finish.call(this)},e}(s.default);e.KetsuLogsViewerController=I;var C=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.logId="",e}return r(e,t),e.prototype.cellWasReloadedWithoutRedrawing=function(){var e;t.prototype.cellWasReloadedWithoutRedrawing.call(this),(null===(e=o.LogsParser.shared.selectedLog)||void 0===e?void 0:e.logId)==this.logId?(0,p.default)("[".concat(this.id,"]")).addClass("selected"):(0,p.default)("[".concat(this.id,"]")).removeClass("selected")},e}(d.LogsCellController)}.apply(e,o),void 0===n||(t.exports=n)},9870:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9303),i(7321),i(9243),i(2614),i(4580),i(2069),i(6465),i(3137),i(4054)],n=function(t,e,i,o,n,s,a,c,d,u,g){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LogsGridController=void 0,i=l(i),s=l(s);var p=function(t){function e(e,i){return void 0===e&&(e=window.mApp.utils.makeId()),void 0===i&&(i=d.viewBaseGridHtml),t.call(this,e,i)||this}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e=this;t.prototype.setUp.call(this);var i=[new o.GridElementWithView((new u.KetsuLogsViewerController).id,"rightLogs"),new s.default("VSBL",c.viewBaseGridVSeparator),new o.GridElementWithView(new g.LogsViewerHolderController("LogsViewerHolderController").id,"leftLogs")];return this.gridElements=i.map((function(t){return e.insertNewView(new a.InsertedViewData(t.id,void 0)),t.id})),this.gridDistribution=[["leftLogs","VSBL","rightLogs"]],this.gridDesing={columns:[new n.GridElementDesign("auto","",!0,[],{min:300,max:99999999}),new n.GridElementDesign("1","px",!1),new n.GridElementDesign("350","px",!0,[{resize:40,range:{from:0,to:150}},{resize:350,range:{from:150,to:350}}],{min:0,max:400})],rows:[new n.GridElementDesign("1","fr",!1)]},this.setDesign(this.gridDesing),this.setDistribution(this.gridDistribution),this},e.prototype.showKetsuLogs=function(){this.gridDesing.columns[2].size="350",this.setDesign(this.gridDesing)},e}(i.default);e.LogsGridController=p}.apply(e,o),void 0===n||(t.exports=n)},1632:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4095),i(4580),i(1166),i(3693),i(6254),i(936),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CurrentLog=void 0,n=l(n),d=l(d);var u=function(t){function e(e,n){void 0===e&&(e=window.mApp.utils.makeId()),void 0===n&&(n=s.basicHtml);var r=t.call(this,e,n)||this;return r.insertViewsDefault=new o.InsertedViewData(r.id,"$idviews"),i.LogsParser.shared.logsInterfaces[r.id]=r,r}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),(0,d.default)("[".concat(this.id,"]")).addClass("bg-primary"),this.setUp()},e.prototype.setUp=function(){var e,n;t.prototype.setUp.call(this),this.deleteSubviews();var s=i.LogsParser.shared.getLog(null!==(e=i.LogsParser.shared.selectedLog)&&void 0!==e?e:{logId:"",sectionId:""}),r=[];null==s?r.push(new a.JSLogsCellController("No log selected.",!1)):r.push(new a.JSLogsCellController(null!==(n=s.content)&&void 0!==n?n:"",s.error));var l=new c.SettingsCellController(r.map((function(t){return t.id})));return l.interceptCollectionView=function(t){t.style({"overflow-x":"hidden"})},this.insertNewView(new o.InsertedViewData(l.id,void 0)),(0,d.default)("[".concat(l.id,"]")).addClass("bg-primary"),l.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},e.prototype.logsUpdated=function(){this.setUp()},e.prototype.logSelected=function(){this.setUp()},e.prototype.finish=function(){delete i.LogsParser.shared.logsInterfaces[this.id],t.prototype.finish.call(this)},e}(n.default);e.CurrentLog=u}.apply(e,o),void 0===n||(t.exports=n)},768:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4095),i(4580),i(1166),i(3693),i(6254),i(936),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JSLogs=void 0,n=l(n),d=l(d);var u=function(t){function e(e,n){void 0===e&&(e=window.mApp.utils.makeId()),void 0===n&&(n=s.basicHtml);var r=t.call(this,e,n)||this;return r.insertViewsDefault=new o.InsertedViewData(r.id,"$idviews"),i.LogsParser.shared.logsInterfaces[r.id]=r,r}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e;t.prototype.setUp.call(this),this.deleteSubviews();for(var n=[],s=i.LogsParser.shared.logs[i.LogsParser.shared.logsOrder[0]],r=0,l=0,u=null!=s?s:[];l<u.length;l++){var g=u[l];if("Javascript Logs"==g.action){r+=1;var p=JSON.parse(null!==(e=g.content)&&void 0!==e?e:"[]");p.length>0&&n.push(new a.JSLogsCellController("".concat(r,". Logs:")));for(var I=0,C=p;I<C.length;I++){var h=C[I];console.log(h.value),""!=h.value&&null!=h.value&&n.push(new a.JSLogsCellController(h.value,"error"==h.type))}}}0==n.length&&n.push(new a.JSLogsCellController("No javascript logs were found.",!1));var f=new c.SettingsCellController(n.map((function(t){return t.id})));return this.collectionView=f.id,f.interceptCollectionView=function(t){t.style({"overflow-x":"hidden"})},this.insertNewView(new o.InsertedViewData(f.id,void 0)),(0,d.default)("[".concat(f.id,"]")).addClass("bg-primary"),f.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this},e.prototype.logsUpdated=function(){this.setUp();var t=this.getView(this.collectionView),e=null==t?void 0:t.getCollectionView();console.log(e),null==e||e.scrollTo({section:0,item:t.cells.length-1})},e.prototype.logSelected=function(){},e.prototype.finish=function(){t.prototype.finish.call(this),delete i.LogsParser.shared.logsInterfaces[this.id]},e}(n.default);e.JSLogs=u}.apply(e,o),void 0===n||(t.exports=n)},4054:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(2360),i(4527),i(4095),i(4580),i(1166),i(3693),i(1632),i(768)],n=function(t,e,i,o,n,s,a,c,d,u){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LogsViewerHolderController=void 0,a=l(a);var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.styleCellsHolder=function(t){t.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)","padding-left":"0.5rem","background-color":"#262626"})},e}(o.MenuSelectorLayout2),p=function(t){function e(e,i){void 0===e&&(e=window.mApp.utils.makeId()),void 0===i&&(i=c.basicHtml);var o=t.call(this,e,i)||this;return n.LogsParser.shared.logsInterfaces[o.id]=o,o}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e;t.prototype.setUp.call(this),null==this.menuSelector&&(null===(e=this.getView(this.menuSelector))||void 0===e||e.finish());var o=new u.JSLogs;o.viewName="JS Logs";var n=new d.CurrentLog;n.viewName="Selected Log";var r=new i.MenuSelctor(window.mApp.utils.makeId(15),[o.id,n.id]);return this.menuSelector=r.id,r.interface=this,r.layout=new g,this.insertNewView(new s.InsertedViewData(r.id)),r.selectByViewName("JS Logs"),r.setConstraints({top:"0px",right:"0px",left:"0px",bottom:"0px"}),this},e.prototype.menuSelectorWasSelected=function(t){40==this.getSize().height&&window.mApp.views.get("baseGrid").setLogsViewSize(400)},e.prototype.showJSLogs=function(){this.getView(this.menuSelector).selectByViewName("JS Logs")},e.prototype.showCurrentLog=function(){this.getView(this.menuSelector).selectByViewName("Selected Log")},e.prototype.logsUpdated=function(){},e.prototype.logSelected=function(){this.showCurrentLog()},e.prototype.finish=function(){delete n.LogsParser.shared.logsInterfaces[this.id],t.prototype.finish.call(this)},e}(a.default);e.LogsViewerHolderController=p}.apply(e,o),void 0===n||(t.exports=n)},4234:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(7321),i(5963),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NavBar=void 0,i=l(i),n=l(n);var s=function(t){function e(e,i){void 0===i&&(i=o.navBarView);var n=t.call(this,e,i)||this;return window.mApp.moduleManager.moduleViewsExecutor[n.id]=n,n}return r(e,t),e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),(0,n.default)("[".concat(this.id,"] .save")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),window.mApp.moduleManager.saveModuleToLocalStorage(),(0,n.default)("[".concat(e.id,"] .save .test-button")).text("Saved ✓"),setTimeout((function(){(0,n.default)("[".concat(e.id,"] .save .test-button")).text("Save")}),1e3)})),(0,n.default)("[".concat(this.id,"] .export")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),window.mApp.moduleManager.saveModuleToLocalStorage(),window.mApp.moduleManager.exportModule()}))},e.prototype.moduleLoaded=function(){},e.prototype.moduleProjectNameChanged=function(){},e.prototype.moduleAutoSaved=function(){var t=this;(0,n.default)("[".concat(this.id,"] .save .test-button")).text("Auto Saved ✓"),setTimeout((function(){(0,n.default)("[".concat(t.id,"] .save .test-button")).text("Save")}),1e3)},e.prototype.finish=function(){delete window.mApp.moduleManager.moduleViewsExecutor[this.id],t.prototype.finish.call(this)},e}(i.default);e.NavBar=s}.apply(e,o),void 0===n||(t.exports=n)},5646:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9072),i(936),i(4580),i(1166),i(3693),i(6129),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParamsContoller=void 0,s=l(s),d=l(d);var u=function(t){function e(e,i){void 0===i&&(i=a.basicHtml);var o=t.call(this,window.mApp.utils.makeId(),i)||this;return o.settingsController="",o.setInsertDefaultViews(),o.jsonId=e,o}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e;t.prototype.setUp.call(this);var s=new c.RouteViewController(window.mApp.utils.makeId(15),this.jsonId);this.insertNewView(new n.InsertedViewData(s.id)),s.setConstraints({top:"0px",right:"0px",left:"0px",height:"40px"});var r=[],l=window.mApp.moduleManager.moduleMap.get(this.jsonId),a=null==l?void 0:l.getObject(),u=window.mApp.moduleManager.getModuleOptions();if(null==a)return this;"moduleInfo"==(null==l?void 0:l.jsonPath[0])&&r.push(new i.ParamEditorCellController("Project Name",void 0,null!==(e=u.projectName)&&void 0!==e?e:"",!1,(function(t){u.projectName=t,Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach((function(t){var e;null===(e=t.moduleProjectNameChanged)||void 0===e||e.call(t)}))}),(function(){})));for(var g=0,p=function(t,e){if(t.includes("moduleCreator"))return"continue";var o=void 0;if(console.log(typeof e),"boolean"==typeof e&&(o=e),"string"==typeof e&&(o=e),Array.isArray(e)){var n=Array.from(e);n.length>0?"string"==typeof n[0]&&(o=n):o=[]}if("number"==typeof e&&(o=Number(e)),null==o)return"continue";r.push(new i.ParamEditorCellController(t,void 0,o,g%2!=1,(function(e){a[t]=e}),(function(){}))),g+=1},I=0,C=Object.entries(a);I<C.length;I++){var h=C[I];p(h[0],h[1])}var f=r.map((function(t){return t.id})),A=new o.SettingsCellController(f);return A.interceptCollectionView=function(t){(0,d.default)("[".concat(t.grid.getTag(),"]")).addClass("border-bottom")},this.settingsController=A.id,this.insertNewView(new n.InsertedViewData(A.id)),A.setConstraints({top:"40px",right:"0px",left:"0px",bottom:"0px"}),this},e}(s.default);e.ParamsContoller=u}.apply(e,o),void 0===n||(t.exports=n)},7214:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9701),i(4580),i(1166),i(2265),i(8409),i(4333),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ConnectSocketController=void 0,n=l(n),d=l(d);var u=function(t){function e(){var e=t.call(this,void 0,a.viewConnectSocket)||this;return e.spinnerOptions={lines:9,length:38,width:17,radius:45,scale:.1,corners:1,speed:1,rotate:0,animation:"spinner-line-fade-quick",direction:1,color:"#ffffff",fadeColor:"transparent",top:"50%",left:"50%"},window.mApp.sockets.socketsConnectionInterfaces[e.id]=e,e}return r(e,t),e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this);var n=new s.StateManagerController("App Connection",{finished:function(){e.finish()}}),r=document.querySelector("[".concat(this.id,"] .loading"));null!=r&&(this.spinner=new c.Spinner(this.spinnerOptions).spin(r));var l=new o.InsertedViewData(n.id,"$idstatemanager");this.insertNewView(l),n.clipToParent(),window.mApp.sockets.connectionStatus==i.serverConnectionStatus.connected?this.connectionEnabled():this.connectionFailed(),(0,d.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,d.default)("[".concat(this.id,"] .connect-button")).off().on("click",(function(t){var i;t.preventDefault(),t.stopImmediatePropagation();var o="".concat(null!==(i=(0,d.default)("[".concat(e.id,"] input")).val())&&void 0!==i?i:"");window.mApp.sockets.setUp(o),(0,d.default)("[".concat(e.id,"] .elem-padding-wider")).text("Retry"),(0,d.default)("[".concat(e.id,"] .loading")).css({display:""})})),(0,d.default)("[".concat(this.id,"] input")).val(window.mApp.sockets.getCurrentIp())},e.prototype.connectionEnabled=function(){(0,d.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,d.default)("[".concat(this.id,"] .elem-padding-wider")).text("connected"),(0,d.default)("[".concat(this.id,"] .status-image")).attr({src:window.mApp.utils.getImageUrl("connected.png")}),(0,d.default)("[".concat(this.id,"] .status-image")).css({filter:"invert(73%) sepia(14%) saturate(1264%) hue-rotate(77deg) brightness(97%) contrast(87%)"})},e.prototype.connectionFailed=function(){(0,d.default)("[".concat(this.id,"] .loading")).css({display:"none"}),(0,d.default)("[".concat(this.id,"] .elem-padding-wider")).text("Connect"),(0,d.default)("[".concat(this.id,"] .status-image")).attr({src:window.mApp.utils.getImageUrl("disconnected.png")}),(0,d.default)("[".concat(this.id,"] .status-image")).css({filter:"invert(78%) sepia(45%) saturate(7450%) hue-rotate(321deg) brightness(86%) contrast(102%)"})},e.prototype.finish=function(){this.spinner.stop(),delete window.mApp.sockets.socketsConnectionInterfaces[this.id],(0,d.default)("[".concat(this.id,"] .connect-button")).off(),t.prototype.finish.call(this)},e}(n.default);e.ConnectSocketController=u}.apply(e,o),void 0===n||(t.exports=n)},3408:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4580),i(1166),i(2265),i(7965),i(9755)],n=function(t,e,i,o,n,s,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NewProjectController=void 0,o=l(o),a=l(a);var c=function(t){function e(e){void 0===e&&(e=s.newProjectView);var i=t.call(this,window.mApp.utils.makeId(),e)||this;return i.canExit=!0,i}return r(e,t),e.prototype.disableExit=function(){this.canExit=!1},e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),(0,a.default)("[".concat(this.id,"] .create-button")).on("click",(function(){var t,i=null!==(t=(0,a.default)("[".concat(e.id,"] input")).val())&&void 0!==t?t:"";""!=i&&(window.mApp.moduleManager.loadNewModule(window.mApp.moduleManager.getDefaultModule(),i),e.finish())}));var o=new n.StateManagerController("New Project",{finished:function(){e.finish()}});this.canExit||o.disableExit();var s=new i.InsertedViewData(o.id,"$idstatemanager");this.insertNewView(s),o.clipToParent()},e.prototype.finish=function(){(0,a.default)("[".concat(this.id,"] .create-button")).off(),t.prototype.finish.call(this)},e}(o.default);e.NewProjectController=c}.apply(e,o),void 0===n||(t.exports=n)},1053:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(7021),i(5219),i(661),i(2360),i(4527),i(4580),i(1166),i(9726),i(6287),i(7015),i(9755),i(936),i(9072)],n=function(t,e,i,o,n,s,a,c,d,u,g,p,I,C,h){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DataRequestController=void 0,d=l(d),I=l(I);var f=function(t){function e(e,i,o){var n=t.call(this,e,o)||this;return n.jsonId="",n.jsonId=i,n.insertViewsDefault=new c.InsertedViewData(n.id,"$idviews"),n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e=this;t.prototype.setUp.call(this);var s=window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject();return this.setMethod(s.request.method),(0,I.default)("[".concat(this.id,"] #requesttype")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation();var s=new i.DropDown;["GET","POST","HEAD","PUT","DELETE","CONNECT","OPTIONS","TRACE","PATCH"].forEach((function(t){var i=new o.DefaultDropDownCell(t,void 0,void 0,!0,u.viewDropDownRequestType);i.viewWasInsertedCallback=function(t){(0,I.default)("[".concat(t,"]")).addClass(["bg-t-contrary-hover"])},s.addCell(i,(function(i,o){o.finish(),e.setMethod(t)}))})),s.insertInto(new c.InsertedViewData(void 0,"body")),s.setUpWithElement(0,10,n.ElementModalPos.center,n.ElemModalDirection.bottom,t.target,(0,I.default)(t.target).width())})),(0,I.default)("[".concat(this.id,"] .request-input")).val(s.request.url),(0,I.default)("[".concat(this.id,"] .request-input")).off().on("input",(function(t){var i;e.setUrl(null!==(i=(0,I.default)("[".concat(e.id,"] .request-input")).val())&&void 0!==i?i:"")})),this.setUpSubViews(),this},e.prototype.setUpSubViews=function(){var t=new g.HeadersView(this.jsonId);t.viewName="Headers";var e=new p.HttpBodyView(this.jsonId);e.viewName="Http Body";var i=[t.id,e.id],o=this.getSearchSettings();null!=o&&i.push(o);var n=new s.MenuSelctor(window.mApp.utils.makeId(15),i);n.interface=this,n.layout=new a.MenuSelectorLayout2,this.insertNewView(new c.InsertedViewData(n.id));var r=window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions();n.selectByViewName(r.openedRequestMenu),n.setConstraints({top:"0px",right:"0px",left:"0px",bottom:"0px"})},e.prototype.getSearchSettings=function(){var t,e=window.mApp.moduleManager.moduleMap.get(this.jsonId),i=e.getObject();if(null!=(null==i?void 0:i.separator)&&!(e.jsonPath.length<2)&&"search"==e.jsonPath[0]&&"0"==e.jsonPath[1]){var o=new C.SettingsCellController([new h.ParamEditorCellController("Searched Separator",void 0,null!==(t=i.separator)&&void 0!==t?t:"",!1,(function(t){i.separator=t}),(function(){})).id]);return o.viewName="Search Parameters",o.viewWasInsertedCallback=function(){(0,I.default)("[".concat(o.id,"]")).addClass("bg-primary")},o.interceptCollectionView=function(t){(0,I.default)("[".concat(t.grid.getTag(),"]")).addClass("border-bottom")},o.id}},e.prototype.setMethod=function(t){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.method=t,(0,I.default)("[".concat(this.id,"] #requesttype")).text(t.toUpperCase())},e.prototype.setUrl=function(t){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.url=t},e.prototype.menuSelectorWasSelected=function(t){var e,i;window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions().openedRequestMenu=null!==(i=null===(e=this.getView(t))||void 0===e?void 0:e.viewName)&&void 0!==i?i:""},e.prototype.finish=function(){(0,I.default)("[".concat(this.id,"] #requesttype")).off(),(0,I.default)("[".concat(this.id,"] .request-input")).off(),t.prototype.finish.call(this)},e}(d.default);e.DataRequestController=f}.apply(e,o),void 0===n||(t.exports=n)},6287:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4580),i(1166),i(8959),i(9755)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HeadersView=void 0,o=l(o),s=l(s);var a=function(t){function e(e,o){void 0===o&&(o=n.viewHtmlHeaders);var s=t.call(this,"headersView".concat(window.mApp.utils.makeId(15)),o)||this;return s.headers=new Map,s.jsonId=e,s.headersTable=new i.InsertedViewData(s.id,"$idheadersTable"),s}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.fixHeaders=function(){var t=this,e=Array.from(this.headers.keys());(e.length<=0||null==this.headers)&&this.headers.set(window.mApp.utils.makeId(15),{key:"",value:"",moduleCreatorHeaderisActive:!0});for(var i=[],o=0;o<e.length;o++){var n=e[o],s=this.headers.get(n);null!=s&&o!=e.length-1&&""==s.key&&""==s.value&&i.push(n)}i.forEach((function(e){t.headers.delete(e),t.removeListeners(e)})),e=Array.from(this.headers.keys());var r=this.headers.get(e[e.length-1]);null!=r&&""==r.key&&""==r.value||this.headers.set(window.mApp.utils.makeId(15),{key:"",value:"",moduleCreatorHeaderisActive:!0})},e.prototype.drawHeaders=function(){for(var t='<tr> <th> <div class="key-holder"> <div class="checkbox-holder"> </div> <div class="relative elem-padding-equal-wide-only center-v-flex"> Key </div> </div> </th> <th class="elem-padding-equal-wide-only">Value</th> </tr> <tr>',e=Array.from(this.headers.keys()),i=0;i<e.length;i++){var o=e[i];this.removeListeners(o),t+='\n            <tr>\n            <td>\n                <div  class="key-holder"> \n                    <div class="checkbox-holder"> \n\n                    <input $id  type=\'checkbox\' class="ignore center-absolute checkbox" checked >\n                    </div>\n                    <div class="relative"> \n                        <input $id class="input-header-key header-input" placeholder="Key">\n                    </div>\n                </div>\n            </td>\n            <td class="relative">\n                <input $id class="input-header-value header-input" placeholder="Value">\n            </td>\n            </tr>\n        '.split("$id").join(o)}for((0,s.default)("[".concat(this.id,"] [").concat(this.headersTable.getTag(),"]")).html(t),i=0;i<e.length;i++){o=e[i];var n=this.headers.get(o);null!=n&&this.addListenersToInput(o,n)}},e.prototype.addListenersToInput=function(t,e){var i,o,n=this;(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-key")).val(null!==(i=null==e?void 0:e.key)&&void 0!==i?i:""),(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-value")).val(null!==(o=null==e?void 0:e.value)&&void 0!==o?o:""),(0,s.default)("[".concat(this.id,"] [").concat(t,"].checkbox")).prop("checked",e.moduleCreatorHeaderisActive),(0,s.default)("[".concat(this.id,"] [").concat(t,"].checkbox")).off().on("click",(function(t){e.moduleCreatorHeaderisActive=(0,s.default)(t.target).is(":checked")})),(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-key")).off().on("blur",(function(e){var i,o=n.headers.get(t);null!=o&&(o.key=null!==(i=(0,s.default)(e.target).val())&&void 0!==i?i:""),n.fixHeaders(),n.drawHeaders(),n.updateModuleHeaders()})),(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-value")).off().on("blur",(function(e){var i,o=n.headers.get(t);null!=o&&(o.value=null!==(i=(0,s.default)(e.target).val())&&void 0!==i?i:""),n.fixHeaders(),n.drawHeaders(),n.updateModuleHeaders()}))},e.prototype.removeListeners=function(t){(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-key")).off(),(0,s.default)("[".concat(this.id,"] [").concat(t,"].input-header-value")).off(),(0,s.default)("[".concat(this.id,"] [").concat(t,"].checkbox")).off()},e.prototype.updateModuleHeaders=function(){window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.headers=Array.from(this.headers.values())},e.prototype.setUp=function(){var e=this;return t.prototype.setUp.call(this),this.style({"overflow-y":"auto"}),window.mApp.moduleManager.moduleMap.get(this.jsonId).getObject().request.headers.forEach((function(t){null==t.moduleCreatorHeaderisActive&&(t.moduleCreatorHeaderisActive=!0),e.headers.set(window.mApp.utils.makeId(15),t)})),this.fixHeaders(),this.drawHeaders(),this.updateModuleHeaders(),this},e.prototype.finish=function(){for(var e=this,i=Array.from(this.headers.keys()),o=0;o<i.length;o++){var n=i[o];this.removeListeners(n)}i.forEach((function(t){e.headers.delete(t)})),t.prototype.finish.call(this)},e}(o.default);e.HeadersView=a}.apply(e,o),void 0===n||(t.exports=n)},7015:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9091),i(1166),i(3642),i(9755)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpBodyView=void 0,o=l(o),s=l(s);var a=function(t){function e(e,i,o){void 0===i&&(i=window.mApp.utils.makeId(15)),void 0===o&&(o='<div $id> <div class="fill-absolute">  </div> </div>');var n=t.call(this,i,o)||this;n.jsonId=e;var s=window.mApp.moduleManager.moduleMap.get(n.jsonId);return n.moduleObject=s.getObject(),n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e,o=this;t.prototype.setUp.call(this),this.style({"overflow-y":"auto"}),(0,s.default)("[".concat(this.id,"]")).addClass("bg-primary");var r=i.EditorView.theme({"&":{color:"#E6E6E6",backgroundColor:"transparent"},".cm-content":{caretColor:"#E6E6E6",padding:"10px 0 10px 0"},"&.cm-focused .cm-cursor":{borderLeftColor:"#E6E6E6"},"&.cm-focused .cm-selectionBackground, ::selection":{backgroundColor:"#3B3B3B"},".cm-gutters":{backgroundColor:"transparent",color:"#A7A6A6",border:"none"},".cm-activeLine":{backgroundColor:"transparent"},".cm-activeLineGutter":{backgroundColor:"transparent"}},{dark:!0});return(0,s.default)("[".concat(this.id,"] .fill-absolute")).addClass("bg-primary"),this.editorView=new i.EditorView({extensions:[i.basicSetup,r,(0,n.placeholder)("Type the httpbody here."),i.EditorView.updateListener.of((function(t){var e=t.state.doc.toString();o.moduleObject.request.httpBody=""!=e?e:void 0}))],parent:document.querySelector("[".concat(this.id,"] .fill-absolute")),doc:null!==(e=this.moduleObject.request.httpBody)&&void 0!==e?e:""}),this},e.prototype.finish=function(){var e;this.moduleObject=void 0,null===(e=this.editorView)||void 0===e||e.destroy(),this.editorView=void 0,t.prototype.finish.call(this)},e}(o.default);e.HttpBodyView=a}.apply(e,o),void 0===n||(t.exports=n)},6840:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4580),i(1166),i(3693),i(9045),i(936),i(6266),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RequestSettingsController=void 0,o=l(o),d=l(d);var u=function(t){function e(e,o,s){void 0===o&&(o=window.mApp.utils.makeId()),void 0===s&&(s=n.basicHtml);var r=t.call(this,o,s)||this;return r.finished=!1,r.insertViewsDefault=new i.InsertedViewData(r.id,"$idviews"),r.jsonId=e,window.mApp.moduleManager.moduleViewsExecutor[r.id]=r,r}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e,o,n,r,l=this;if(t.prototype.setUp.call(this),this.finished)return this;this.deleteSubviews();var u=window.mApp.moduleManager.moduleMap.get(this.jsonId);if(console.log(u),null==u)return this;var g=u.getObject();if(null==g)return this;u.getOptions();var p=[new c.SectionCellController("Javascript Settings"),new s.ClickCellController({title:"Remove Scripts",message:"Loads the html website without executring the javascript, all the &lt;script&gt; tags become &lt;p&gt; tags. The loading time is faster if its enabled."},null!==(o=null===(e=null==g?void 0:g.javascriptConfig)||void 0===e?void 0:e.removeJavascript)&&void 0!==o&&o,(function(t){return t&&(g.javascriptConfig.loadInWebView=!1),g.javascriptConfig.removeJavascript=t,l.setUp(),!0})),new s.ClickCellController({title:"Load in WebView",message:"The javascript is injected on the website directly, loading times are slower because the website needs to load, if this option is enabled the *Remove Scripts* options wont work."},null!==(r=null===(n=null==g?void 0:g.javascriptConfig)||void 0===n?void 0:n.loadInWebView)&&void 0!==r&&r,(function(t){return g.javascriptConfig.loadInWebView=t,t&&(g.javascriptConfig.removeJavascript=!1),l.setUp(),!0}))];this.getRequestSettings().forEach((function(t){p.push(t)}));var I=new a.SettingsCellController(p.map((function(t){return t.id})));return this.finished?(I.finish(),p.forEach((function(t){return t.finish()})),this):(this.insertNewView(new i.InsertedViewData(I.id,void 0)),(0,d.default)("[".concat(I.id,"]")).addClass("bg-primary"),I.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),this)},e.prototype.getRequestSettings=function(){var t,e,i=this,o=window.mApp.moduleManager.moduleMap.get(this.jsonId),n=o.getOptions(),r=(o.getObject(),o.jsonPath),l=[new c.SectionCellController("Request Settings"),new s.ClickCellController({title:"Force Request",message:"Overrides the request data set on the javascript from the previous request to the one you set on this request tab. This option is usefull to do request to static urls."},null!==(t=null==n?void 0:n.forceRequest)&&void 0!==t&&t,(function(t){return n.forceRequest=t,!0})),new s.ClickCellController({title:"Async Request",message:"Instead of finishing the request when the website loads, manually finish the request using the code below.<br><br>window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');"},null!==(e=null==n?void 0:n.async)&&void 0!==e&&e,(function(t){return n.async=t,i.setUp(),!0}))];return"0"==r[r.length-1]?[l[0],l[2]]:l},e.prototype.moduleLoaded=function(){},e.prototype.moduleDataUpdated=function(){this.setUp()},e.prototype.finish=function(){this.finished=!0,delete window.mApp.moduleManager.moduleViewsExecutor[this.id],t.prototype.finish.call(this)},e}(o.default);e.RequestSettingsController=u}.apply(e,o),void 0===n||(t.exports=n)},1455:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(6956),i(9091),i(3642),i(526),i(8561),i(4580),i(1166),i(7589),i(4748),i(9755)],n=function(t,e,o,n,s,a,c,d,u,g,p,I){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JavascriptController=void 0,u=l(u),I=l(I);var C=function(t){function e(e,i,o){void 0===i&&(i=window.mApp.utils.makeId()),void 0===o&&(o=p.javascriptControllerView);var n=t.call(this,i,o)||this;return n.insertViewsDefault=new d.InsertedViewData(n.id,"$idviews"),n.jsonId=e,n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e,i,r,l,d=this;t.prototype.setUp.call(this),(0,I.default)("[".concat(this.id,"]")).addClass("bg-primary");var u=window.mApp.moduleManager.moduleMap.get(this.jsonId);this.moduleObject=u.getObject();var p=this.moduleObject.javascriptConfig.javaScript;return p.split(/\n/g).length<5&&(p=this.beautifyJs(p),this.moduleObject.javascriptConfig.javaScript=p),this.editorView=new n.EditorView({extensions:[n.basicSetup,(0,o.javascript)(),o.javascriptLanguage.data.of({autocomplete:(0,o.scopeCompletionSource)(globalThis)}),g.dracula,(0,a.autocompletion)({icons:!1}),n.EditorView.lineWrapping,s.keymap.of([c.indentWithTab]),n.EditorView.updateListener.of((function(t){t.docChanged&&(d.moduleObject.javascriptConfig.javaScript=t.state.doc.toString())}))],parent:document.querySelector("[".concat(null===(e=this.insertViewsDefault)||void 0===e?void 0:e.getTag(),"]")),doc:p}),u.getOptions(),window.mApp.utils.isChrome()?(null===(l=document.querySelector("[".concat(null!==(r=null===(i=this.insertViewsDefault)||void 0===i?void 0:i.getTag())&&void 0!==r?r:"","]")))||void 0===l||l.scrollTop,this):this},e.prototype.beautifyJs=function(t){return(0,i(4204).js)(t,{indent_size:8,indent_char:" ",indent_with_tabs:!1,editorconfig:!1,eol:"\n",end_with_newline:!0,indent_level:0,preserve_newlines:!0,max_preserve_newlines:10,space_in_paren:!0,space_in_empty_paren:!0,jslint_happy:!1,space_after_anon_function:!0,space_after_named_function:!0,brace_style:"collapse",unindent_chained_methods:!0,break_chained_methods:!1,keep_array_indentation:!1,unescape_strings:!1,wrap_line_length:0,e4x:!1,comma_first:!1,operator_position:"before-newline",indent_empty_lines:!1,templating:["auto"]})},e.prototype.findFirstVisibleLine=function(){},e.prototype.finish=function(){var e,i,o,n=window.mApp.moduleManager.moduleMap.get(this.jsonId);null!=n&&(n.getOptions().javascriptEditorScroll=document.querySelector("[".concat(null!==(i=null===(e=this.insertViewsDefault)||void 0===e?void 0:e.getTag())&&void 0!==i?i:"","]")).scrollTop),null===(o=this.editorView)||void 0===o||o.destroy(),this.editorView=void 0,t.prototype.finish.call(this)},e}(u.default);e.JavascriptController=C}.apply(e,o),void 0===n||(t.exports=n)},6993:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(2360),i(4580),i(1166),i(9434),i(1455),i(6129),i(1053),i(9726),i(6840)],n=function(t,e,i,o,n,s,a,c,d,u,g){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RequestController=void 0;var p=function(t){function e(e,i,n){void 0===n&&(n=s.viewRequestController);var r=t.call(this,e,n)||this;return r.jsonId="",r.jsonId=i,r.insertViewsDefault=new o.InsertedViewData(r.id,"$idviews"),r}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){t.prototype.setUp.call(this);var e=new c.RouteViewController(window.mApp.utils.makeId(15),this.jsonId);this.insertNewView(new o.InsertedViewData(e.id)),e.setConstraints({top:"0px",right:"0px",left:"0px",height:"40px"});var n=new d.DataRequestController("view1",this.jsonId,u.viewDataRequestController);n.viewName="Request";var s=new a.JavascriptController(this.jsonId);s.viewName="Javascript";var r=new g.RequestSettingsController(this.jsonId);r.viewName="Settings";var l=new i.MenuSelctor(window.mApp.utils.makeId(15),[n.id,s.id,r.id]);l.interface=this,this.insertNewView(new o.InsertedViewData(l.id));var p=window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions();return l.selectByViewName(p.openedMenu),l.setConstraints({top:"40px",right:"0px",left:"0px",bottom:"0px"}),this},e.prototype.menuSelectorWasSelected=function(t){var e,i;window.mApp.moduleManager.moduleMap.get(this.jsonId).getOptions().openedMenu=null!==(i=null===(e=this.getView(t))||void 0===e?void 0:e.viewName)&&void 0!==i?i:""},e}((n=l(n)).default);e.RequestController=p}.apply(e,o),void 0===n||(t.exports=n)},6129:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(3229),i(1166),i(8110),i(5141),i(7214),i(4333),i(9755)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RouteViewController=void 0,o=l(o),d=l(d);var u=function(t){function e(e,i,o){void 0===o&&(o=s.viewRoute);var n=t.call(this,e,o)||this;return n.jsonId="",n.spinnerOptions={lines:9,length:38,width:17,radius:30,scale:.1,corners:1,speed:1,rotate:0,animation:"spinner-line-fade-quick",direction:1,color:"#ffffff",fadeColor:"transparent",top:"50%",left:"50%"},n.jsonId=i,window.mApp.moduleManager.moduleViewsExecutor[n.jsonId]=n,window.mApp.moduleManager.moduleExecutionInterfaces[n.id]=n,n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp();var e=document.querySelector("[".concat(this.id,"] .spinner-holder"));null!=e&&(this.spinner=new c.Spinner(this.spinnerOptions).spin(e))},e.prototype.setUp=function(){var e,o,s,r,l,c=this;t.prototype.setUp.call(this),(0,d.default)("[".concat(this.id,"] .execute-button")).off().on("click",(function(t){t.stopPropagation(),t.preventDefault(),window.mApp.sockets.isConnected()?window.mApp.moduleManager.executionStatus!=i.ModuleExecutionStatus.executing?(40==window.mApp.views.get("LogsViewerHolderController").getSize().height&&window.mApp.views.get("baseGrid").setLogsViewSize(400),window.mApp.moduleManager.executeModule(c.getExecuteRoute())):window.mApp.moduleManager.cancelCurrentExecution():n.PopUpView.showPopUpViewOnBody((new a.ConnectSocketController).id)})),(0,d.default)("[".concat(this.id,"] .route")).html("");var u=window.mApp.moduleManager.moduleMap.get(this.jsonId);null==window.mApp.utils.getNumberFromString(null!==(o=null==u?void 0:u.jsonPath[(null!==(e=null==u?void 0:u.jsonPath)&&void 0!==e?e:[]).length-1])&&void 0!==o?o:"")&&(0,d.default)("[".concat(this.id,"] .execute-button")).css({display:"none"}),this.updateButtonStatus();for(var g="",p=0;p<(null!==(s=null==u?void 0:u.jsonPath)&&void 0!==s?s:[]).length;p++){var I=window.mApp.utils.capitalizeFirstLetter(null!==(r=null==u?void 0:u.jsonPath[p])&&void 0!==r?r:"");""!=I&&(g+='<div class="r-text">$name</div>'.replace("$name",I),p<(null!==(l=null==u?void 0:u.jsonPath)&&void 0!==l?l:[]).length-1&&(g+='<div class="r-separator">/</div>'))}return(0,d.default)("[".concat(this.id,"] .route")).html(g),this},e.prototype.updateButtonStatus=function(){var t,e,o=window.mApp.moduleManager.moduleMap.get(this.jsonId),n=null===(t=null==o?void 0:o.getSection())||void 0===t?void 0:t.getSection();switch(null==n&&(n=null==o?void 0:o.getSection()),window.mApp.moduleManager.executionStatus){case i.ModuleExecutionStatus.finished:(0,d.default)("[".concat(this.id,"] .title")).text("Execute ".concat(null===(e=null==n?void 0:n.options)||void 0===e?void 0:e.name)),this.stopLoading();break;case i.ModuleExecutionStatus.executing:(0,d.default)("[".concat(this.id,"] .title")).text("Cancel"),this.startLoading();break;case i.ModuleExecutionStatus.canceling:(0,d.default)("[".concat(this.id,"] .title")).text("Canceling..."),this.startLoading()}},e.prototype.startLoading=function(){(0,d.default)("[".concat(this.id,"] .execute-button")).addClass("loading")},e.prototype.stopLoading=function(){(0,d.default)("[".concat(this.id,"] .execute-button")).removeClass("loading")},e.prototype.getExecuteRoute=function(){var t,e=window.mApp.moduleManager.moduleMap.get(this.jsonId),i=null!==(t=null==e?void 0:e.jsonPath)&&void 0!==t?t:void 0;return null==i?[]:i.length>2?[i[0],i[1]]:[i[0]]},e.prototype.moduleExecutionUpdated=function(){this.updateButtonStatus()},e.prototype.moduleLoaded=function(){},e.prototype.moduleDataUpdated=function(){this.setUp()},e.prototype.finish=function(){var e;delete window.mApp.moduleManager.moduleViewsExecutor[this.jsonId],delete window.mApp.moduleManager.moduleExecutionInterfaces[this.id],null===(e=this.spinner)||void 0===e||e.stop(),this.spinner=void 0,(0,d.default)("[".concat(this.id,"] .execute-button")).off(),t.prototype.finish.call(this)},e}(o.default);e.RouteViewController=u}.apply(e,o),void 0===n||(t.exports=n)},3607:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(6752)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i),window.mApp=new i.default,window.mApp.start()}.apply(e,o),void 0===n||(t.exports=n)},9076:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9755)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i);var o=function(){function t(t,e){this.resizeConditions=[],this.insertedIntoData=t,this.resizeConditions=e,this.setUp()}return t.prototype.setUp=function(){var t,e=this;this.resizeObserver=new ResizeObserver((function(t){for(var i,o=0,n=t;o<n.length;o++)for(var s=n[o],r=0,l=e.resizeConditions;r<l.length;r++){var a=l[r];if(0!=s.borderBoxSize.length&&a.condition(s.borderBoxSize[0]))return null===(i=e.interface)||void 0===i||i.resizeTriggered(a),void(e.currentCondition=a.name)}}));var i=null===(t=this.insertedIntoData)||void 0===t?void 0:t.getView();return null!=this.insertedIntoData&&null!=i&&null!=document.querySelector("[".concat(this.insertedIntoData.getTag(),"]"))&&(this.resizeObserver.observe(document.querySelector("[".concat(this.insertedIntoData.getTag(),"]"))),!0)},t.prototype.triggerManually=function(){null===(t=this.insertedIntoData)||void 0===t||t.getView();var t,e,o,n=(0,i.default)("[".concat(null===(e=this.insertedIntoData)||void 0===e?void 0:e.getTag(),"]"));if(null!=n){var s=n.outerWidth(),r=n.outerHeight();if(null!=s&&null!=r)for(var l={blockSize:r,inlineSize:s},a=0,c=this.resizeConditions;a<c.length;a++){var d=c[a];if(d.condition(l))return null===(o=this.interface)||void 0===o||o.resizeTriggered(d),void(this.currentCondition=d.name)}}},t.prototype.finished=function(){var t,e,i;null===(t=this.resizeObserver)||void 0===t||t.disconnect(),this.resizeConditions=[],this.resizeObserver=void 0,null!=(null===(e=this.interface)||void 0===e?void 0:e.observerFinished)&&(null===(i=this.interface)||void 0===i||i.observerFinished()),this.interface=void 0},t}();e.default=o}.apply(e,o),void 0===n||(t.exports=n)},9701:function(t,e,i){var o,n=this&&this.__awaiter||function(t,e,i,o){return new(i||(i=Promise))((function(n,s){function r(t){try{a(o.next(t))}catch(t){s(t)}}function l(t){try{a(o.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,l)}a((o=o.apply(t,e||[])).next())}))},s=this&&this.__generator||function(t,e){var i,o,n,s,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function l(s){return function(l){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,o&&(n=2&s[0]?o.return:s[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,s[1])).done)return n;switch(o=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,o=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){r=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){r.label=s[1];break}if(6===s[0]&&r.label<n[1]){r.label=n[1],n=s;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(s);break}n[2]&&r.ops.pop(),r.trys.pop();continue}s=e.call(t,r)}catch(t){s=[6,t],o=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SocketsConnectionHandler=e.serverConnectionStatus=e.SocketMessageCallback=void 0;var i,o=function(){function t(t,e){var i=this;this.sentTimeout=1e4,this.completedTimeout=4e4,this.id="",this.finished=!1,this.sent=t,null!=this.sent&&setTimeout((function(){null!=i.sent&&(i.sent({},!0),i.sent=void 0),null==i.completion&&i.finish()}),this.sentTimeout),this.completion=e,null!=this.completion&&setTimeout((function(){null!=i.completion&&(i.completion({},!0),i.completion=void 0),null==i.sent&&i.finish()}),this.completedTimeout)}return t.prototype.sentCallback=function(t){null!=this.sent&&(this.sent(t,!1),this.sent=void 0),null==this.completion&&this.finish()},t.prototype.completionCallback=function(t){null!=this.completion&&(this.completion(t,!1),this.completion=void 0),null==this.sent&&this.finish()},t.prototype.error=function(){null!=this.sent&&(this.sent({},!0),this.sent=void 0),null!=this.completion&&(this.completion({},!0),this.completion=void 0),this.finish()},t.prototype.finish=function(){this.finished||(this.finished=!0,this.sent=void 0,this.completion=void 0,delete window.mApp.sockets.completionMessagesArray[this.id])},t}();e.SocketMessageCallback=o,function(t){t[t.connected=0]="connected",t[t.connecting=1]="connecting",t[t.notConnected=2]="notConnected"}(i=e.serverConnectionStatus||(e.serverConnectionStatus={}));var r=function(){function t(){this.socketsConnectionInterfaces={},this.connectionStatus=i.notConnected,this.completionMessagesArray={},this.currentIp=""}return t.prototype.getCurrentIp=function(){var t;return null!==(t=window.localStorage.getItem("currentIP"))&&void 0!==t?t:""},t.prototype.setCurrentIp=function(t){window.localStorage.setItem("currentIP",t)},t.prototype.isConnected=function(){return this.connectionStatus==i.connected},t.prototype.setUp=function(t){var e=this;this.connectionFalied();var o=window.mApp.utils.makeId();this.connectionTimerId=o,setTimeout((function(){e.connectionTimerId==o&&e.connectionFalied()}),1e4),this.setCurrentIp(t),this.connectionStatus=i.connecting,this.connection=new WebSocket(t),this.connection.onopen=function(){e.connectionOpened()},this.connection.onerror=function(t){e.connectionFalied()},this.connection.onclose=function(t){e.connectionFalied()},this.connection.onmessage=function(t){return n(e,void 0,void 0,(function(){var e,i,o,n;return s(this,(function(s){switch(s.label){case 0:return e=this.messageReceived,o=(i=JSON).parse,n=atob,[4,t.data.text()];case 1:return e.apply(this,[o.apply(i,[n.apply(void 0,[s.sent()])])]),[2]}}))}))}},t.prototype.closeConnectionWithoutCallbacks=function(){var t=this;null!=this.connection&&(this.connection.onopen=function(){},this.connection.onerror=function(t){},this.connection.onclose=function(t){},this.connection.onmessage=function(e){return n(t,void 0,void 0,(function(){return s(this,(function(t){return[2]}))}))},this.connection.close())},t.prototype.connectionFalied=function(t){void 0===t&&(t=!0),this.connectionTimerId=window.mApp.utils.makeId(),this.closeConnectionWithoutCallbacks(),this.connectionStatus=i.notConnected;for(var e=0,o=Object.keys(this.completionMessagesArray);e<o.length;e++){var n=o[e];this.completionMessagesArray[n].error(),delete this.completionMessagesArray[n]}if(t){for(var s=0,r=Object.values(this.socketsConnectionInterfaces);s<r.length;s++)r[s].connectionFailed();this.connection=void 0}},t.prototype.connectionOpened=function(){this.connectionTimerId=window.mApp.utils.makeId(),this.connectionStatus=i.connected;for(var t=0,e=Object.values(this.socketsConnectionInterfaces);t<e.length;t++)e[t].connectionEnabled()},t.prototype.sendMessage=function(t,e){var o;return this.connectionStatus==i.connected&&(null!=e&&(e.id=t.id,null!=e.sent&&(t.sentCallback=!0),null!=e.completion&&(t.completionCallback=!0),this.completionMessagesArray[e.id]=e),null===(o=this.connection)||void 0===o||o.send(JSON.stringify(t)),!0)},t.prototype.messageReceived=function(t){var e=t;null!=e&&this.parseMessageReceived(e)},t.prototype.parseMessageReceived=function(t){var e,i;"CallbackSent"!=t.functionName?"CallbackCompletion"!=t.functionName||null===(i=this.completionMessagesArray[t.id])||void 0===i||i.completionCallback(t):null===(e=this.completionMessagesArray[t.id])||void 0===e||e.sentCallback(t)},t}();e.SocketsConnectionHandler=r}.apply(e,[i,e]),void 0===o||(t.exports=o)},6231:(t,e,i)=>{var o,n;o=[i,e,i(9701)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ConnectionChecker=void 0;var o=function(){function t(){this.started=!1,this.connectionId=""}return t.prototype.setUp=function(){window.mApp.sockets.socketsConnectionInterfaces[window.mApp.utils.makeId()]=t.shared},t.prototype.start=function(){this.started||(this.started=!0,this.pingPong())},t.prototype.pingPong=function(){var t=this,e="",o=!1;setInterval((function(){console.log("ping pong");var n=new i.SocketMessageCallback((function(n,s){if(s&&window.mApp.sockets.connectionStatus==i.serverConnectionStatus.connected&&o&&e==t.connectionId&&(window.mApp.sockets.connectionFalied(),o=!1,e=""),s)return e=t.connectionId,void(o=!0);o=!1,e=""}),void 0);n.sentTimeout=5,window.mApp.sockets.sendMessage({id:window.mApp.utils.makeId(),functionName:"connectionChecker",sentCallback:!0,completionCallback:!1},n)}),6e3)},t.prototype.connectionEnabled=function(){this.connectionId=window.mApp.utils.makeId(),this.start()},t.prototype.connectionFailed=function(){this.connectionId=window.mApp.utils.makeId()},t.shared=new t,t}();e.ConnectionChecker=o}.apply(e,o),void 0===n||(t.exports=n)},4095:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LogsParser=void 0;var i=function(){function t(){this.logsInterfaces={},this.implementedLogs=[],this.logsOrder=[],this.logs={},this.selectedLog=void 0,this.updatingLogs=!1,this.logsQueue=[]}return t.prototype.logsUpdated=function(t){var e,i;if(this.updatingLogs)this.logsQueue.push(t);else{this.updatingLogs=!0,this.logsOrder=t.logsOrder;for(var o=0,n=t.logsOrder;o<n.length;o++){var s=n[o];null==this.logs[s]&&(this.logs[s]=[]);for(var r=0,l=t.returnLogs[s];r<l.length;r++){var a=l[r];this.implementedLogs.includes(a.id)||(a.sectionId=s,this.logs[s].push(a),this.implementedLogs.push(a.id))}}for(var c=0,d=Object.keys(this.logs);c<d.length;c++){var u=d[c];this.logsOrder.includes(u)||delete this.logs[u]}this.removeOldLogs();var g=!1;if(this.logsOrder.length>=1)for(var p=0,I=this.logs[this.logsOrder[0]];p<I.length;p++){var C=I[p];if(C.error){this.selectedLog={logId:C.id,sectionId:this.logsOrder[0]},null===(e=window.mApp.views.get("LogsViewerHolderController"))||void 0===e||e.showCurrentLog(),g=!0;break}}g||null===(i=window.mApp.views.get("LogsViewerHolderController"))||void 0===i||i.showJSLogs();for(var h=0,f=Object.values(this.logsInterfaces);h<f.length;h++)f[h].logsUpdated();this.updatingLogs=!1,this.lookForQueueLogs()}},t.prototype.removeOldLogs=function(){for(var t=0,e=Object.keys(this.logs);t<e.length;t++){var i=e[t];if(!this.logsOrder.includes(i)){for(var o=0,n=this.logs[i];o<n.length;o++){var s=n[o];window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(s.id),this.implementedLogs)}window.mApp.utils.deleteFromArray(this.implementedLogs.indexOf(i),this.implementedLogs),delete this.logs[i]}}},t.prototype.getLog=function(t){for(var e,i=0,o=null!==(e=this.logs[t.sectionId])&&void 0!==e?e:[];i<o.length;i++){var n=o[i];if(n.id==t.logId)return n}},t.prototype.logSelected=function(t){this.selectedLog=t;for(var e=0,i=Object.values(this.logsInterfaces);e<i.length;e++)i[e].logSelected()},t.prototype.getModuleLogsToSend=function(){return{implementedLogs:this.implementedLogs,logsOrder:[],returnLogs:{}}},t.prototype.lookForQueueLogs=function(){if(this.logsQueue.length>0){var t=this.logsQueue[0];delete this.logsQueue[0],this.logsUpdated(t)}},t.shared=new t,t}();e.LogsParser=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},2872:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.prototype.setUp=function(){},t.prototype.finish=function(){},t}();e.default=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},9916:(t,e,i)=>{var o,n;o=[i,e,i(3642),i(729)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.variant,n=t.settings,s=t.styles,r=i.EditorView.theme({"&":{backgroundColor:n.background,color:n.foreground},".cm-content":{caretColor:n.caret},".cm-cursor, .cm-dropCursor":{borderLeftColor:n.caret},"&.cm-focused .cm-selectionBackgroundm .cm-selectionBackground, .cm-content ::selection":{backgroundColor:n.selection},".cm-activeLine":{backgroundColor:n.lineHighlight},".cm-gutters":{backgroundColor:n.gutterBackground,color:n.gutterForeground},".cm-activeLineGutter":{backgroundColor:n.lineHighlight},".cm-tooltip-autocomplete":{backgroundColor:"#262626",color:"#A7A6A6","line-height":"1","box-sizing":" border-box",border:"1px solid rgba(255,255,255,.1)"},".cm-completionMatchedText":{textDecoration:"none",color:"#FFFFFF"},".cm-tooltip-autocomplete ul li[aria-selected]":{backgroundColor:"#3B3B3B"}},{dark:"dark"===e}),l=o.HighlightStyle.define(s);return[r,(0,o.syntaxHighlighting)(l)]}}.apply(e,o),void 0===n||(t.exports=n)},7589:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(5048),i(9916)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.dracula=void 0,o=s(o),e.dracula=(0,o.default)({variant:"dark",settings:{background:"#212221",foreground:"#CECFD0",caret:"#fff",selection:"#727377",gutterBackground:"#212221",gutterForeground:"#CECFD0",lineHighlight:"transparent"},styles:[{tag:[i.tags.comment,i.tags.quote],color:"#7F8C98"},{tag:[i.tags.keyword],color:"#FF7AB2",fontWeight:"bold"},{tag:[i.tags.string,i.tags.meta],color:"#FF8170"},{tag:[i.tags.typeName],color:"#DABAFF"},{tag:[i.tags.definition(i.tags.variableName)],color:"#6BDFFF"},{tag:[i.tags.name],color:"#6BAA9F"},{tag:[i.tags.variableName],color:"#ACF2E4"},{tag:[i.tags.regexp,i.tags.link],color:"#FF8170"}]})}.apply(e,o),void 0===n||(t.exports=n)},3369:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(5446),i(4580),i(1166),i(7857),i(2593),i(9755)],n=function(t,e,i,o,n,s,a,c){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UICollectionView=void 0,n=l(n),c=l(c);var d=function(t){function e(e,n,r){void 0===e&&(e=window.mApp.utils.makeId()),void 0===r&&(r=i.viewDefaultCollectionViewView);var l=t.call(this,e,r)||this;return l.layoutDesign=new s.UICollectionViewLayoutDesign,l.scrollTop=0,l.grid=null!=n?n:new o.InsertedViewData(l.id,"$idgrid"),l}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){return t.prototype.setUp.call(this),this.designUpdated(),this},e.prototype.reloadData=function(){for(var t,e,i,n=0,s=this.insertedViews;n<s.length;n++){var r=s[n].getView();null==r||r.finish()}if(null!=this.dataSourceDelegate)for(var l=this.dataSourceDelegate.cvNumberOfSections(this),c=null===(t=this.grid)||void 0===t?void 0:t.getTag(),d=0;d<l;d++){var u=this.dataSourceDelegate.cvNumberOfItemsInSection(this,d),g=this.dataSourceDelegate.cvCellForSectionAt(this,a.UICollectionViewSectionCellType.header,d);null!=g&&(g.sectionCellType=a.UICollectionViewSectionCellType.header,g.indexPath={section:d,item:0},g.collectionViewId=this.id,this.insertNewView(new o.InsertedViewData(g.id,c))),this.setDelegatesToSectionCell(null==g?void 0:g.id,d,a.UICollectionViewSectionCellType.header);for(var p=0;p<u;p++){var I={section:d,item:p},C=this.dataSourceDelegate.cvCellForItemAt(this,I);if(C.indexPath=I,C.collectionViewId=this.id,this.insertNewView(new o.InsertedViewData(C.id,c)),this.setDelegateToCell(C.id,I),p!=u-1){var h=null===(i=(e=this.dataSourceDelegate).getSeparator)||void 0===i?void 0:i.call(e,this,I);null!=h&&this.insertNewView(new o.InsertedViewData(h.id))}}var f=this.dataSourceDelegate.cvCellForSectionAt(this,a.UICollectionViewSectionCellType.footer,d);null!=f&&(f.sectionCellType=a.UICollectionViewSectionCellType.footer,f.indexPath={section:d,item:0},f.collectionViewId=this.id,this.insertNewView(new o.InsertedViewData(f.id,c))),this.setDelegatesToSectionCell(null==f?void 0:f.id,d,a.UICollectionViewSectionCellType.footer)}},e.prototype.scrollTo=function(t){var e,i,o=document.querySelector("[".concat(null!==(i=null===(e=this.getCellAt(t))||void 0===e?void 0:e.id)&&void 0!==i?i:"asdsdfddfads","]"));console.log("Thisi is the cell"),console.log(o),null!=o&&(console.log(o.scrollHeight),o.scrollIntoView())},e.prototype.getScrollTop=function(){var t,e;return null!==(e=null===(t=document.querySelector("[".concat(this.grid.getTag(),"]")))||void 0===t?void 0:t.scrollTop)&&void 0!==e?e:0},e.prototype.setScrollTop=function(t){var e;null!=(null===(e=document.querySelector("[".concat(this.grid.getTag(),"]")))||void 0===e?void 0:e.scrollTop)&&(document.querySelector("[".concat(this.grid.getTag(),"]")).scrollTop=t)},e.prototype.getSize=function(){var t,e,i=(0,c.default)("[".concat(this.id,"] [").concat(this.grid.getTag(),"]"));return{width:null!==(t=i.width())&&void 0!==t?t:0,height:null!==(e=i.height())&&void 0!==e?e:0}},e.prototype.updateCellsWithoutRedrawing=function(){var t=this.getScrollTop();console.log("UPDATING CELLS WITHOUT READRAWWING");for(var e=0,i=this.insertedViews;e<i.length;e++){var o=i[e].getView();null==o||o.cellWasReloadedWithoutRedrawing()}this.setScrollTop(t)},e.prototype.setDelegateToCell=function(t,e){var i=this;null!=this.delegate&&(0,c.default)("[".concat(t,"]")).off("click").on("click",(function(t){var o;t.preventDefault(),t.stopImmediatePropagation(),null===(o=i.delegate)||void 0===o||o.cvDidSelectItem(i,e)}))},e.prototype.setDelegatesToSectionCell=function(t,e,i){var o=this;null!=t&&null!=this.delegate&&(0,c.default)("[".concat(t,"]")).off("click").on("click",(function(t){var n;t.stopPropagation(),t.preventDefault(),null===(n=o.delegate)||void 0===n||n.cvDidSelectSection(o,e,i)}))},e.prototype.getCellAt=function(t){var e=(0,c.default)('[UICVID="'.concat(this.id,'"][UICVSection="').concat(t.section,'"][UICVItem="').concat(t.item,'"][UICVCellType="cell"]')).attr("UICVViewId");if(null!=e)return this.getView(e)},e.prototype.getCellForSectionAt=function(t,e){var i=(0,c.default)('[UICVID="'.concat(this.id,'"][UICVSection="').concat(t,'"][UICVCellType="').concat(e,'"]')).attr("UICVViewId");if(null!=i)return this.getView(i)},e.prototype.designUpdated=function(){var t,e;null!=this.layoutDesign&&(0,c.default)("[".concat(null!==(e=null===(t=this.grid)||void 0===t?void 0:t.getTag())&&void 0!==e?e:"","]")).css(this.layoutDesign.getStyle(this))},e.prototype.finish=function(){this.layoutDesign=void 0,this.delegate=void 0,this.dataSourceDelegate=void 0,t.prototype.finish.call(this)},e}(n.default);e.UICollectionView=d}.apply(e,o),void 0===n||(t.exports=n)},4542:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(9755)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UICollectionViewCell=void 0,i=l(i),o=l(o);var n=function(t){function e(e){return t.call(this,window.mApp.utils.makeId(),e)||this}return r(e,t),e.prototype.htmlInsertionInterceptor=function(e){var i,o,n,s,r=t.prototype.htmlInsertionInterceptor.call(this,e);if(null!=r)return r.setAttribute("UICVSection","".concat(null!==(o=null===(i=this.indexPath)||void 0===i?void 0:i.section)&&void 0!==o?o:"")),r.setAttribute("UICVItem","".concat(null!==(s=null===(n=this.indexPath)||void 0===n?void 0:n.item)&&void 0!==s?s:"")),r.setAttribute("UICVID",this.collectionViewId),r.setAttribute("UICVViewId",this.id),r.setAttribute("UICVCellType","cell"),r},e.prototype.cellWasReloadedWithoutRedrawing=function(){},e.prototype.removeDelegatesFromCell=function(){(0,o.default)("[".concat(this.id,"]")).off()},e.prototype.finish=function(){this.removeDelegatesFromCell(),this.indexPath=void 0,t.prototype.finish.call(this)},e}(i.default);e.UICollectionViewCell=n}.apply(e,o),void 0===n||(t.exports=n)},7857:(t,e,i)=>{var o,n;o=[i,e,i(2593)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UICollectionViewLayoutDesign=void 0;var o=function(){function t(){this.gap="0rem",this.padding="0rem",this.flow=i.UICollectionViewFlowEnum.vertical,this.columnsTemplate="1fr",this.rowsTemplate="1fr",this.overflowX="auto",this.overflowY="auto",this.justifyContent="",this.width="",this.height="",this.backgroundColor="",this.extraStyles={}}return t.prototype.getStyle=function(t){var e,i,o={display:"grid",gap:this.gap,padding:this.padding,"grid-auto-flow":this.flow,"grid-template-columns":null!==(e=this.columnsTemplate)&&void 0!==e?e:"","grid-template-rows":null!==(i=this.rowsTemplate)&&void 0!==i?i:"","justify-content":this.justifyContent,width:this.width,height:this.height,"overflow-x":this.overflowX,"overflow-y":this.overflowY,"max-height":"100%","max-width":"100%","background-color":this.backgroundColor};return Object.entries(this.extraStyles).forEach((function(t){var e=t[0],i=t[1];o[e]=i})),o},t}();e.UICollectionViewLayoutDesign=o}.apply(e,o),void 0===n||(t.exports=n)},9020:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});o=[i,e,i(4542)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UICollectionVievSectionCell=void 0;var o=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.htmlInsertionInterceptor=function(e){var i=t.prototype.htmlInsertionInterceptor.call(this,e);if(null!=i)return i.setAttribute("UICVCellType","".concat(this.sectionCellType)),i},e.prototype.finish=function(){this.removeDelegatesFromCell(),t.prototype.finish.call(this)},e}(i.UICollectionViewCell);e.UICollectionVievSectionCell=o}.apply(e,o),void 0===n||(t.exports=n)},2593:(t,e,i)=>{var o;o=function(t,e){"use strict";var i,o;Object.defineProperty(e,"__esModule",{value:!0}),e.UICollectionViewSectionCellType=e.UICollectionViewFlowEnum=void 0,(o=e.UICollectionViewFlowEnum||(e.UICollectionViewFlowEnum={})).vertical="row",o.horizontal="column",(i=e.UICollectionViewSectionCellType||(e.UICollectionViewSectionCellType={})).header="header",i.footer="footer"}.apply(e,[i,e]),void 0===o||(t.exports=o)},7021:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(5446),i(3369),i(661),i(4580),i(1166),i(9755),i(3693)],n=function(t,e,i,o,n,s,a,c,d){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DropDown=void 0,a=l(a),c=l(c);var u=function(t){function e(e){var i=t.call(this)||this;return i.cells=[],i.individualCallbacks={},i.bgView="",i.collectionViewStyles=["bg-secondary","shadow"],i.callback=e,i}return r(e,t),e.prototype.insertInto=function(e){var i=this,o=new a.default(window.mApp.utils.makeId(),d.basicHtml);return this.bgView=o.id,o.viewWasInsertedCallback=function(t){(0,c.default)("[".concat(t,"]")).on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),i.finish(),o.finish()}))},o.insertInto(new s.InsertedViewData(void 0,"body")),o.clipToParent(),t.prototype.insertInto.call(this,e)},e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this)},e.prototype.addCell=function(t,e){this.cells.push(t),null!=e&&(this.individualCallbacks[this.cells.length-1]=e)},e.prototype.setFrameAndShow=function(){var e=this;t.prototype.setFrameAndShow.call(this);var n=new o.UICollectionView("dropDownCV".concat(window.mApp.utils.makeId(15)),void 0,i.viewDefaultCollectionViewView);this.collectionView=n.id,this.insertNewView(new s.InsertedViewData(n.id,void 0)),n.clipToParent(),this.alignContent(),this.styleCollectionView(),n.dataSourceDelegate=this,n.delegate=this,n.reloadData();var r=n.getSize();(0,c.default)("body").off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),(t.clientX<e.frame.x||t.clientX>e.frame.x+r.width||t.clientY<e.frame.y||t.clientY>e.frame.y+r.height)&&e.finish()}))},e.prototype.alignContent=function(){var t=this.getView(this.collectionView);this.direction==n.ElemModalDirection.bottom&&t.style({},"[".concat(t.grid.getTag(),"]")),this.direction==n.ElemModalDirection.top&&t.style({position:"absolute",bottom:"0px",left:"0px",right:"0px"},"[".concat(t.grid.getTag(),"]"))},e.prototype.styleCollectionView=function(){var t=this.getView(this.collectionView);(0,c.default)("[".concat(t.id,"] [").concat(t.grid.getTag(),"]")).addClass(this.collectionViewStyles)},e.prototype.cvNumberOfItemsInSection=function(t,e){return this.cells.length},e.prototype.cvNumberOfSections=function(t){return 1},e.prototype.cvCellForItemAt=function(t,e){return this.cells[e.item]},e.prototype.cvCellForSectionAt=function(t,e,i){},e.prototype.getSeparator=function(t,e){},e.prototype.cvDidSelectItem=function(t,e){var i,o,n;null==this.individualCallbacks[e.item]?null===(n=this.callback)||void 0===n||n.call(this,e.item,this):null===(o=(i=this.individualCallbacks)[e.item])||void 0===o||o.call(i,e.item,this)},e.prototype.cvDidSelectSection=function(t,e,i){},e.prototype.finish=function(){var e,i=this;null===(e=this.getView(this.bgView))||void 0===e||e.finish(),(0,c.default)("body").off("click"),this.cells=[],this.callback=void 0,Object.keys(this.individualCallbacks).forEach((function(t){null!=window.mApp.utils.getNumberFromString(t)&&delete i.individualCallbacks[Number(t)]})),t.prototype.finish.call(this)},e}(n.ElementModalView);e.DropDown=u}.apply(e,o),void 0===n||(t.exports=n)},5219:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(8509),i(4542),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DefaultDropDownCell=void 0,n=l(n);var s=function(t){function e(e,o,n,s,r){void 0===e&&(e=void 0),void 0===o&&(o=void 0),void 0===n&&(n=void 0),void 0===s&&(s=!1),void 0===r&&(r=i.viewDefaultDropDownCell);var l=t.call(this,r)||this;return l.title=null!=e?e:"",l}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){return t.prototype.setUp.call(this),(0,n.default)("[".concat(this.id,"] .title")).text(this.title),this},e}(o.UICollectionViewCell);e.DefaultDropDownCell=s}.apply(e,o),void 0===n||(t.exports=n)},661:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1524),i(4580),i(1166)],n=function(t,e,i,o,n){"use strict";var s,a;Object.defineProperty(e,"__esModule",{value:!0}),e.ElementModalView=e.ElemModalDirection=e.ElementModalPos=void 0,n=l(n),function(t){t[t.left=0]="left",t[t.right=1]="right",t[t.center=2]="center",t[t.auto=3]="auto"}(s=e.ElementModalPos||(e.ElementModalPos={})),function(t){t[t.bottom=0]="bottom",t[t.top=1]="top",t[t.auto=2]="auto"}(a=e.ElemModalDirection||(e.ElemModalDirection={}));var c=function(t){function e(){var e=t.call(this,window.mApp.utils.makeId(15),i.viewDefaultElementModal)||this;return e.frame={x:0,y:0,height:0,width:0},e.insertViewsDefault=new o.InsertedViewData(e.id,"$idviews"),e}return r(e,t),e.prototype.setUpWithElement=function(t,e,i,o,n,r){void 0===e&&(e=t),void 0===i&&(i=s.auto),void 0===o&&(o=a.auto),this.generalSetUp(t,e,i,o,window.mApp.utils.getFrameFromElement(n),r)},e.prototype.setUpWithFrame=function(t,e,i,o,n,r){void 0===e&&(e=t),void 0===i&&(i=s.auto),void 0===o&&(o=a.auto)},e.prototype.setUpWithPoint=function(t,e,i,o,n,r){void 0===e&&(e=t),void 0===i&&(i=s.auto),void 0===o&&(o=a.auto)},e.prototype.generalSetUp=function(t,e,i,o,n,r){void 0===e&&(e=t),void 0===i&&(i=s.auto),void 0===o&&(o=a.auto),this.gap=t,this.margin=e,this.position=i,this.direction=o,this.elFrame=n;var l=this.elFrame.width;this.frame.width=null!=r?r:l,this.findAutoPositions(),this.setFrameAndShow()},e.prototype.findAutoPositions=function(){var t=window.mApp.utils.getCenter(this.elFrame),e=window.mApp.utils.windowSize();this.position==s.auto&&(t.x>e.width/2?this.position=s.left:this.position=s.right),this.direction==a.auto&&(t.y>e.height/2?this.direction=a.top:this.direction=a.bottom)},e.prototype.setFrameAndShow=function(){var t=window.mApp.utils.windowSize();this.position==s.left&&this.direction==a.bottom&&(this.frame.height=t.height-this.elFrame.y-this.margin,this.frame.x=this.elFrame.x-this.frame.width-this.gap,this.frame.y=this.elFrame.y),this.position==s.left&&this.direction==a.top&&(this.frame.height=this.elFrame.y+this.elFrame.height-this.margin,this.frame.x=this.elFrame.x-this.gap-this.frame.width,this.frame.y=this.margin),this.position==s.right&&this.direction==a.bottom&&(this.frame.height=t.height-this.margin-this.elFrame.y,this.frame.x=this.elFrame.x+this.elFrame.width+this.gap,this.frame.y=this.elFrame.y),this.position==s.right&&this.direction==a.top&&(this.frame.height=this.elFrame.y+this.elFrame.height-this.margin,this.frame.x=this.elFrame.x+this.elFrame.width+this.gap,this.frame.y=this.margin),this.position==s.center&&this.direction==a.bottom&&(this.frame.height=t.height-(this.elFrame.y+this.elFrame.height+this.gap+this.margin),this.frame.x=this.elFrame.x+this.elFrame.width/2-this.frame.width/2,this.frame.y=this.elFrame.y+this.elFrame.height+this.gap),this.position==s.center&&this.direction==a.top&&(this.frame.height=this.elFrame.y-this.gap-this.margin,this.frame.x=this.elFrame.x+this.elFrame.width/2-this.frame.width/2,this.frame.y=this.margin),this.setConstraints({left:"".concat(this.frame.x,"px"),top:"".concat(this.frame.y,"px"),height:"".concat(this.frame.height,"px"),width:"".concat(this.frame.width,"px")})},e.prototype.finish=function(){t.prototype.finish.call(this)},e}(n.default);e.ElementModalView=c}.apply(e,o),void 0===n||(t.exports=n)},5281:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9755)],n=function(t,e,i){"use strict";var o;Object.defineProperty(e,"__esModule",{value:!0}),e.ResizingStatus=void 0,i=s(i),function(t){t[t.started=0]="started",t[t.resizing=1]="resizing",t[t.finished=2]="finished"}(o=e.ResizingStatus||(e.ResizingStatus={}));var n=function(){function t(t){this.isActive=!0,this.insertedIntoData=t,this.setUpResizing()}return t.prototype.setUpResizing=function(){var t=this,e=this.insertedIntoData.getTag();return(0,i.default)("[".concat(e,"]")).on("mousedown",(function(e){t.isActive&&t.resizingHandler(o.started,e)})),!0},t.prototype.resizingHandler=function(t,e){var n,s=this;switch(null==this.resizeData&&t!=o.started?this.resizeData={status:o.started}:null!=this.resizeData&&(this.resizeData.status=t),t){case o.started:return(0,i.default)("body").on("mouseup",(function(t){s.resizingHandler(o.finished,t)})),void(0,i.default)("body").on("mousemove",(function(t){s.resizingHandler(o.resizing,t)}));case o.resizing:return void this.resizeMiddleMan(e,this.resizeData);case o.finished:return null!=(null===(n=this.resizeData)||void 0===n?void 0:n.status)&&(this.resizeData.status=o.finished),this.resize(e,this.resizeData),this.resizeData=void 0,(0,i.default)("body").off("mousemove"),void(0,i.default)("body").off("mouseup")}},t.prototype.resizeMiddleMan=function(t,e){var i;if(t.preventDefault(),null!=e&&null!=t.clientX&&null!=t.clientY){var n=e;if(e.status==o.started?(n.startPosition={x:t.clientX,y:t.clientY},n.currentPosition={x:t.clientX,y:t.clientY},n.previousPosition={x:t.clientX,y:t.clientY},n.positionFromOrigin={x:t.clientX-n.startPosition.x,y:t.clientY-n.startPosition.y}):(n.previousPosition=n.currentPosition,n.currentPosition={x:t.clientX,y:t.clientY},n.positionFromOrigin={x:t.clientX-n.startPosition.x,y:t.clientY-n.startPosition.y}),this.resizeData=n,0==(null===(i=t.originalEvent)||void 0===i?void 0:i.buttons)&&this.resizeData.status==o.resizing)return this.resizeData.status=o.finished,void this.resizingHandler(this.resizeData.status,t);this.resize(t,this.resizeData)}},t.prototype.resize=function(t,e){var i;null===(i=this.interface)||void 0===i||i.grabberResize(t,e)},t.prototype.finished=function(){var t,e,o=this.insertedIntoData.getTag();(0,i.default)("[".concat(o,"grabber]")).off("mousedown"),(0,i.default)("body").off("mousemove"),(0,i.default)("body").off("mouseup"),(0,i.default)("[".concat(o,"]")).off(),null!=(null===(t=this.interface)||void 0===t?void 0:t.grabberFinished)&&(null===(e=this.interface)||void 0===e||e.grabberFinished()),this.interface=void 0},t}();e.default=n}.apply(e,o),void 0===n||(t.exports=n)},9303:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(9755)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=l(i),o=l(o);var n=function(t){function e(e,i){var o=t.call(this,e,i)||this;return o.gridDistribution=[[]],o.gridElements=[],o.gridDesing={columns:[],rows:[]},o}return r(e,t),e.prototype.setDistribution=function(t){this.gridDistribution=t;for(var e={},i=1;i!=t.length+1;i++)for(var o=1;o!=t[i-1].length+1;o++){var n,s=t[i-1][o-1];null!=window.mApp.views.get(s)&&(null==e[s]?(n={column:{from:o,to:o},row:{from:i,to:i}},e[s]=n):((n=e[s]).column.to=o+1,n.row.to=i+1,e[s]=n))}for(var r=0,l=Object.entries(e);r<l.length;r++){var a=l[r],c=a[0],d=a[1];window.mApp.views.get(c).setPostion(d)}for(var u=0,g=this.gridElements;u<g.length;u++){var p=g[u],I=window.mApp.views.get(p);null==e[p]?null==I||I.isHidden(!0):null==I||I.isHidden(!1)}},e.prototype.setDesign=function(t){this.gridDesing=t;var e=t.columns.map((function(t){return"".concat(t.size).concat(t.magnitude)})).join(" "),i=t.rows.map((function(t){return"".concat(t.size).concat(t.magnitude)})).join(" ");(0,o.default)("[".concat(this.id,"]")).css({"grid-template-columns":"".concat(e),"grid-template-rows":"".concat(i)})},e}(i.default);e.default=n}.apply(e,o),void 0===n||(t.exports=n)},7321:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(7535),i(4580),i(3693),i(9755)],n=function(t,e,i,o,n,s,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GridElementWithView=void 0,i=l(i),a=l(a);var c=function(t){function e(e,i){return void 0===e&&(e=window.mApp.utils.makeId(15)),void 0===i&&(i=o.viewBaseGridElement),t.call(this,e,i)||this}return r(e,t),e.prototype.setUp=function(){return t.prototype.setUp.call(this),this},e.prototype.setPostion=function(t){this.position=t,(0,a.default)("[".concat(this.id,"]")).css({"grid-column":"".concat(t.column.from," / ").concat(t.column.to),"grid-row":"".concat(t.row.from," / ").concat(t.row.to)})},e.prototype.finish=function(){t.prototype.finish.call(this)},e}(i.default);e.default=c;var d=function(t){function e(e,i,o){void 0===o&&(o=s.basicHtml);var n=t.call(this,i,o)||this;return n.addView=e,n.setInsertDefaultViews(),n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){t.prototype.setUp.call(this);var e=this.getView(this.addView);return this.insertNewView(new n.InsertedViewData(this.addView,void 0)),null==e||e.clipToParent(),this},e}(c);e.GridElementWithView=d}.apply(e,o),void 0===n||(t.exports=n)},9243:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GridElementDesign=void 0;var i=function(){function t(t,e,i,o,n){void 0===o&&(o=void 0),void 0===n&&(n={min:40,max:999999}),this.limitBounds={min:0,max:999999},this.size=t,this.magnitude=e,this.isResizable=i,this.limitBounds=n,this.lockSizes=o}return t.prototype.isAuto=function(){return"auto"==this.size},t.prototype.addPx=function(t,e,i,o){var n=0;if(this.isAuto()){n=i;for(var s=0,r=e;s<r.length;s++){var l=r[s];"auto"!=l.size&&(n-=Number(l.size))}}else n=Number(this.size)+t;if(n>=this.limitBounds.max&&(n=this.limitBounds.max,this.isAuto()))return!1;if(n<=this.limitBounds.min&&(n=this.limitBounds.min,this.isAuto()&&t<0))return!1;if(null!=this.lockSizes)for(var a=0,c=this.lockSizes;a<c.length;a++){var d=c[a];if(n>=d.range.from&&n<=d.range.to){if(this.isAuto())return!1;null!=d.resize&&(n=d.resize);break}}if("auto"!=this.size){if(o==n)return!1;this.size="".concat(n)}return!0},t}();e.GridElementDesign=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},3802:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(2069),i(4759),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),o=l(o),n=l(n);var s=function(t){function e(e,o,n){return void 0===o&&(o=i.viewBaseGridHSeparator),void 0===n&&(n=!0),t.call(this,e,o,n)||this}return r(e,t),e.prototype.setCursorResize=function(){(0,n.default)("*").css("cursor","ns-resize")},e.prototype.getIndexSeparator=function(){if(null!=this.position)return this.position.row.from-1},e.prototype.getSpecificGridDesign=function(){var t=this.insertedInto.getView();if(null!=t.gridDesing)return t.gridDesing.rows},e.prototype.insertSpecificDesign=function(t){var e=this.insertedInto.getView();return null!=e.gridDesing&&(e.gridDesing.rows=t,e.setDesign(e.gridDesing),!0)},e.prototype.getSepcificGrabberPos=function(t){return t.y},e.prototype.getSpecificGridSize=function(){return this.getGridSize().height},e}(o.default);e.default=s}.apply(e,o),void 0===n||(t.exports=n)},4759:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__createBinding||(Object.create?function(t,e,i,o){void 0===o&&(o=i);var n=Object.getOwnPropertyDescriptor(e,i);n&&!("get"in n?!e.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return e[i]}}),Object.defineProperty(t,o,n)}:function(t,e,i,o){void 0===o&&(o=i),t[o]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),c=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&l(e,t,i);return a(e,t),e},d=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(5281),i(4580),i(7321),i(9755)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=c(i),n=d(n),s=d(s);var l=function(t){function e(e,i,o){void 0===o&&(o=!0);var n=t.call(this,e,i)||this;return n.canResize=o,n}return r(e,t),e.prototype.setCanResize=function(t){null!=this.mGrabberObserver&&(this.mGrabberObserver.isActive=t,this.mGrabberObserver.isActive?((0,s.default)("[".concat(this.id,"grabber]")).css({opacity:"1"}),(0,s.default)("[".concat(this.id,"grabber]")).css({opacity:"1"}).hasClass("cursor")||(0,s.default)("[".concat(this.id,"grabber]")).addClass("cursor")):(0,s.default)("[".concat(this.id,"grabber]")).css({opacity:"0"}).removeClass("cursor"))},e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.mGrabberObserver=new i.default(new o.InsertedViewData(this.id,"$idgrabber")),this.mGrabberObserver.interface=this,this.setCanResize(this.canResize)},e.prototype.setUp=function(){return t.prototype.setUp.call(this),this},e.prototype.finish=function(){t.prototype.finish.call(this)},e.prototype.finished=function(){var t;null===(t=this.mGrabberObserver)||void 0===t||t.finished(),this.mGrabberObserver=void 0},e.prototype.getIndexSeparator=function(){this.position},e.prototype.getSpecificGridDesign=function(){},e.prototype.getSepcificGrabberPos=function(t){return t.x},e.prototype.insertSpecificDesign=function(t){},e.prototype.insertDesing=function(t){var e=this.insertedInto.getView();return null!=e.gridDesing&&(e.gridDesing=t,e.setDesign(e.gridDesing),!0)},e.prototype.getGridSize=function(){var t={height:0,width:0},e=(0,s.default)("[".concat(this.insertedInto.view,"]"));if(null!=e){var i=e.outerHeight(),o=e.outerWidth();null!=i&&(t.height=i),null!=o&&(t.width=o)}return t},e.prototype.getSpecificGridSize=function(){return this.getGridSize().height},e.prototype.setCursorResize=function(){(0,s.default)("*").css("cursor","")},e.prototype.removeCursorResize=function(){(0,s.default)("*").css("cursor","")},e.prototype.grabberResize=function(t,e){var o,n;if(null!=e){e.status==i.ResizingStatus.started&&(this.gridDesign=null===(o=this.getSpecificGridDesign())||void 0===o?void 0:o.map((function(t){return window.mApp.utils.deepCopy(t)})),(0,s.default)("[".concat(this.id,"grabber] > div")).addClass("separator-hover-clicked"),(0,s.default)("[".concat(this.id,"grabber] > div")).removeClass("separator-hover"),this.setCursorResize()),e.status==i.ResizingStatus.finished&&((0,s.default)("[".concat(this.id,"grabber] > div")).removeClass("separator-hover-clicked"),(0,s.default)("[".concat(this.id,"grabber] > div")).addClass("separator-hover"),this.removeCursorResize());var r=[];null===(n=this.gridDesign)||void 0===n||n.forEach((function(t){r.push(window.mApp.utils.deepCopy(t))}));var l=this.getIndexSeparator(),a=null==e?void 0:e.positionFromOrigin;if(null!=r&&null!=l&&null!=a){var c=this.getSepcificGrabberPos(a),d=l-1,u=l+1;c>0&&(u=l-1,d=l+1),c<0&&(u=l+1,d=l-1);var g=r[u],p=r[d],I=this.getSpecificGridSize(),C=this.getSpecificGridDesign();if(null!=C){var h=g.addPx(this.getPositiveFromNumber(c),r,I,Number(C[u].size));p.addPx(this.getNegativeFromNumber(c),r,I,Number(C[d].size))&&h&&this.insertSpecificDesign(r)}}}},e.prototype.getPositiveFromNumber=function(t){return t<0?-1*t:t},e.prototype.getNegativeFromNumber=function(t){return t>0?-1*t:t},e}(n.default);e.default=l}.apply(e,o),void 0===n||(t.exports=n)},2614:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(2069),i(4759),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),o=l(o),n=l(n);var s=function(t){function e(e,o,n){return void 0===o&&(o=i.viewBaseGridVSeparator),void 0===n&&(n=!0),t.call(this,e,o,n)||this}return r(e,t),e.prototype.setCursorResize=function(){(0,n.default)("*").css("cursor","ew-resize")},e.prototype.getIndexSeparator=function(){if(null!=this.position)return this.position.column.from-1},e.prototype.getSpecificGridDesign=function(){var t=this.insertedInto.getView();if(null!=t.gridDesing)return t.gridDesing.columns},e.prototype.insertSpecificDesign=function(t){var e=this.insertedInto.getView();return null!=e.gridDesing&&(e.gridDesing.columns=t,e.setDesign(e.gridDesing),!0)},e.prototype.getSepcificGrabberPos=function(t){return t.x},e.prototype.getSpecificGridSize=function(){return this.getGridSize().width},e}(o.default);e.default=s}.apply(e,o),void 0===n||(t.exports=n)},2360:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(8144),i(4580),i(1166),i(4527)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MenuSelctor=void 0;var a=function(t){function e(e,n,r,l){void 0===l&&(l=i.viewDefaultMenuSelector);var a=t.call(this,e,l)||this;return a.cellsHolderId="",a.viewsHolderId="",a.menuViews=[],a.layout=new s.MenuSelectorLayout,a.menuViews=n,null==r&&n.length>0&&(a.selectedView=n[0]),a.insertViewsDefault=new o.InsertedViewData(a.id,"$idviews"),a}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){return t.prototype.setUp.call(this),this.setUpCellsHolder(),this.setUpViewsHolder(),this},e.prototype.setUpCellsHolder=function(){var t=this.layout.getCellsHolderCollectionView();this.cellsHolderId=t.id,t.delegate=this,t.dataSourceDelegate=this,this.insertNewView(new o.InsertedViewData(t.id)),this.layout.styleCellsHolder(t),t.setConstraints(this.layout.getCellsHolderConstraints()),t.reloadData()},e.prototype.setUpViewsHolder=function(){var t=this.layout.getViewsHolder(this.menuViews);this.viewsHolderId=t.id,this.insertNewView(new o.InsertedViewData(t.id)),t.setConstraints(this.layout.getViewsHolderConstraints())},e.prototype.selectByViewId=function(t){var e;this.selectedView=t,null===(e=this.interface)||void 0===e||e.menuSelectorWasSelected(t),this.getView(this.viewsHolderId).showView(this.selectedView),this.getView(this.cellsHolderId).reloadData()},e.prototype.selectByViewName=function(t){var e;console.log(t);for(var i=0,o=this.menuViews;i<o.length;i++){var n=o[i],s=this.getView(n);if(null!=s&&null!==(e=t==s.viewName)&&void 0!==e&&e)return void this.selectByViewId(n)}},e.prototype.cvNumberOfItemsInSection=function(t,e){return this.menuViews.length},e.prototype.cvNumberOfSections=function(t){return 1},e.prototype.cvCellForItemAt=function(t,e){return this.layout.getCell(t,e,this.menuViews,this.menuViews[e.item]==this.selectedView)},e.prototype.cvCellForSectionAt=function(t,e,i){},e.prototype.cvDidSelectItem=function(t,e){var i=this.menuViews[e.item];this.selectedView!=i&&this.selectByViewId(i)},e.prototype.cvDidSelectSection=function(t,e,i){console.log(e)},e.prototype.finish=function(){t.prototype.finish.call(this),this.interface=void 0},e}((n=l(n)).default);e.MenuSelctor=a}.apply(e,o),void 0===n||(t.exports=n)},2738:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(9755)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleSelectorCell=void 0,o=l(o);var n=function(t){function e(e,i,o,n,s){var r=t.call(this,s)||this;return r.selected=!1,r.menuSelectorViewId=o,r.selected=n,r}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasCreated.call(this),this.setUp()},e.prototype.setUp=function(){var e,i;return t.prototype.setUp.call(this),(0,o.default)("[".concat(this.id,"] .one-line")).text(null!==(i=null===(e=this.getView(this.menuSelectorViewId))||void 0===e?void 0:e.viewName)&&void 0!==i?i:""),this.selected&&(0,o.default)("[".concat(this.id,"]")).addClass("selected"),this},e}(i.UICollectionViewCell);e.ModuleSelectorCell=n}.apply(e,o),void 0===n||(t.exports=n)},4527:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});o=[i,e,i(8144),i(3369),i(2593),i(5353),i(2738)],n=function(t,e,i,o,n,s,l){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MenuSelectorLayout2=e.MenuSelectorLayout=void 0;var a=function(){function t(){}return t.prototype.getCellsHolderCollectionView=function(){var t=new o.UICollectionView("menuSelector".concat(window.mApp.utils.makeId(15)));return null==t.layoutDesign||(t.layoutDesign.flow=n.UICollectionViewFlowEnum.horizontal,t.layoutDesign.columnsTemplate="auto",t.layoutDesign.justifyContent="start",t.layoutDesign.height="100%",t.layoutDesign.width="100%",t.layoutDesign.overflowY="visible",t.layoutDesign.overflowX="visible"),t},t.prototype.getCellsHolderConstraints=function(){return{top:"0px",right:"0px",left:"0px",height:"40px"}},t.prototype.getViewsHolder=function(t){return new s.ViewsHolder("cvcell"+window.mApp.utils.makeId(15),t,void 0,void 0)},t.prototype.getViewsHolderConstraints=function(){return{top:"40px",right:"0px",bottom:"0px",left:"0px"}},t.prototype.getCell=function(t,e,o,n){return new l.ModuleSelectorCell(e,t.id,o[e.item],n,i.viewDefaultMenuSelectorCell)},t.prototype.styleViewsHolder=function(t){},t.prototype.styleCellsHolder=function(t){t.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)"})},t.prototype.getView=function(t){return window.mApp.views.get(t)},t}();e.MenuSelectorLayout=a;var c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.styleCellsHolder=function(t){t.style({"line-height":"1","box-sizing":"border-box","border-bottom":"1px solid rgba(255,255,255,.1)","padding-left":"0.5rem"})},e.prototype.getCell=function(t,e,o,n){return new l.ModuleSelectorCell(e,t.id,o[e.item],n,i.viewDefaultMenuSelectorCell2)},e.prototype.getCellsHolderConstraints=function(){return{top:"0px",right:"0px",left:"0px",height:"40px"}},e.prototype.getViewsHolderConstraints=function(){return{top:"40px",right:"0px",bottom:"0px",left:"0px"}},e}(a);e.MenuSelectorLayout2=c}.apply(e,o),void 0===n||(t.exports=n)},1199:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AutoSave=void 0;var i=function(){function t(){this.stopAutoSave=!1}return t.prototype.start=function(){var t=this;setInterval((function(){null==window.mApp.moduleManager.moduleObject||t.stopAutoSave?console.log("falied saving the module."):(console.log("AutoSaving the module."),window.mApp.moduleManager.saveModuleToLocalStorage(),Object.values(window.mApp.moduleManager.moduleViewsExecutor).forEach((function(t){var e;return null===(e=t.moduleAutoSaved)||void 0===e?void 0:e.call(t)})))}),3e4)},t.shared=new t,t}();e.AutoSave=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},6393:(t,e,i)=>{var o;o=function(t,e){"use strict";var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleDataTypeEnum=void 0,(i=e.ModuleDataTypeEnum||(e.ModuleDataTypeEnum={})).section="section",i.cell="cell"}.apply(e,[i,e]),void 0===o||(t.exports=o)},6544:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleJavascriptGenerator=void 0;var i=function(){function t(){}return t.prototype.addJsIndicators=function(t){return"/* JAVASCRIPT STARTS */ ".concat(t," /* JAVASCRIPT ENDS */")},t.prototype.generateUpdatedJs=function(t,e,i,o,n){if(!i&&!o&&!n)return t;var s=t,r="\n            function setModuleCreatorSettings() {\n    \n                let object = document.querySelector('#ketsu-final-data').textContent;\n                if (object == undefined) {return;}\n                let parsedObject = JSON.parse(object);\n                if (parsedObject == undefined) {return;}\n                \n                if (".concat(i,") {\n                let updatedRequest = atob(`").concat(e,"`);\n                    if (updatedRequest != '') {\n                        parsedObject['request'] =  JSON.parse(updatedRequest);\n                    }\n                }\n        \n                if (").concat(o,") {\n                    parsedObject['javascriptConfig']['removeJavascript'] = true;\n                    parsedObject['javascriptConfig']['loadInWebView'] = false;\n                }\n        \n                if (").concat(n,") {\n                    parsedObject['javascriptConfig']['loadInWebView'] = true;\n                    parsedObject['javascriptConfig']['removeJavascript'] = false;\n                }\n        \n                document.querySelector('#ketsu-final-data').textContent = JSON.stringify(parsedObject);\n\n                if (typeof KETSU_ASYNC === 'undefined') {\n                    return;\n                }\n\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n\n            }\n\n\n        ");return t.includes("window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');")?s=r+(s=s.replace(/window.*EXECUTE_KETSU_ASYNC.+\).*;/g,"\n            \n            setModuleCreatorSettings();\n            \n            ")):(s=r+s,s+="\n        \n        setModuleCreatorSettings();\n        \n        ")},t.prototype.setDebug=function(t){return"\n        try {\n\n            ".concat(t,"\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        ")},t.prototype.setAsync=function(t){return" \n\n        var KETSU_ASYNC = true;\n        \n        "+t},t}();e.ModuleJavascriptGenerator=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},323:(t,e,i)=>{var o,n;o=[i,e,i(6393)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleData=void 0;var o=function(){function t(t,e){this.jsonId="",this.sections=[],this.jsonPath=t,this.options=e,this.classType=i.ModuleDataTypeEnum.cell}return t.prototype.getSection=function(){return window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length-1])},t.prototype.setUp=function(t){return this.jsonId=this.getId(t),window.mApp.moduleManager.moduleMap.has(this.jsonId)||window.mApp.moduleManager.moduleMap.set(this.jsonId,this),this},t.prototype.isCellHidden=function(){return 0!=Object.keys(this.getOptions().sectionsHidden).length},t.prototype.getObjectIndex=function(){return window.mApp.utils.getNumberFromString(this.jsonPath[this.jsonPath.length-1])},t.prototype.checkIfIdExist=function(t){var e;return e=window.mApp.utils.getObjectFromPath(this.jsonPath,t),this.jsonId in e},t.prototype.getObject=function(){return window.mApp.utils.getObjectFromPath(this.jsonPath,window.mApp.moduleManager.moduleObject)},t.prototype.getId=function(t){var e=this;void 0===t&&(t=window.mApp.moduleManager.moduleObject);var i=t;i=window.mApp.utils.getObjectFromPath(this.jsonPath,t);var o="moduleCreatorId".concat(window.mApp.utils.makeId()),n={path:window.mApp.utils.makeId(5),id:this.jsonPath.join()+this.classType,sectionsHidden:[],options:this.options,cellsHidden:!1},s=this.jsonPath;Array.isArray(i)&&(n.path="".concat(this.jsonPath[this.jsonPath.length-1]),s=window.mApp.utils.deepCopy(this.jsonPath).filter((function(t,i){if(i!=e.jsonPath.length-1)return t})),i=window.mApp.utils.getObjectFromPath(s,t));for(var r=0,l=Object.keys(i);r<l.length;r++){var a=l[r];if(a.includes("moduleCreatorId")&&this.jsonPath.join()+this.classType==i[a].id)return window.mApp.utils.addMissingObjectKeys(i[a],n),a}return this.jsonId in i?this.jsonId:(i[o]=n,o)},t.prototype.getOptions=function(){var t=this,e=window.mApp.moduleManager.moduleObject,i=window.mApp.utils.getObjectFromPath(this.jsonPath,e);if(Array.isArray(i)){var o=window.mApp.utils.deepCopy(this.jsonPath).filter((function(e,i){if(i!=t.jsonPath.length-1)return e}));i=window.mApp.utils.getObjectFromPath(o,e)}return i[this.jsonId]},t.prototype.updatePath=function(t){void 0===t&&(t=window.mApp.moduleManager.moduleObject);var e=!1;""==this.jsonPath[this.jsonPath.length-1]&&(e=!0);var i=window.mApp.utils.getPath(this.jsonId,t),o=window.mApp.utils.getObjectFromPath(i,t);i.pop(),i.push(o.path),null==window.mApp.utils.getObjectFromPath(i,t)&&i.pop(),this.jsonPath=i,e&&this.jsonPath.push(""),this.getOptions().id=this.jsonPath.join()+this.classType},t.prototype.finish=function(t){void 0===t&&(t=this.jsonId);for(var e=window.mApp.moduleManager.moduleMap.get(this.sections[this.sections.length-1]),i=window.mApp.moduleManager.moduleObject,o=this.jsonPath,n=i,s=0;s<o.length;s++){var r=o[s];if(s==o.length-1){if(Array.isArray(n)){window.mApp.utils.deleteFromArray(Number(r),n);continue}delete n[r]}else n=n[r]}if(null!=e)for(s=0;s<e.cells.length;s++)if(this.jsonId==e.cells[s].jsonId){window.mApp.utils.deleteFromArray(s,e.cells);break}o=window.mApp.utils.getPath(this.jsonId,window.mApp.moduleManager.moduleObject),n=i;for(var l=0;l>o.length;l++){var a=o[l];o.length-1!=l?n=n[a]:delete n[a]}this.options=void 0,window.mApp.moduleManager.moduleMap.delete(this.jsonId)},t}();e.ModuleData=o}.apply(e,o),void 0===n||(t.exports=n)},8136:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});o=[i,e,i(6393),i(323)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleSectionData=void 0;var n=function(t){function e(e,o,n){var s=t.call(this,e,n)||this;return s.canModify=!1,s.parsed=!1,s.savedCells=[],s.cells=o,s.classType=i.ModuleDataTypeEnum.section,s}return r(e,t),e.prototype.setUp=function(i){var o,n;t.prototype.setUp.call(this,i);var s=window.mApp.utils.getObjectFromPath(this.jsonPath,i);this.savedCells=window.mApp.utils.deepCopy(this.cells);var r=window.mApp.utils.deepCopy(this.cells).pop()instanceof e;if(this.cells=[],Array.isArray(s)){this.canModify=!0;for(var l=0;l<s.length;l++)(u=window.mApp.utils.deepCopy(this.jsonPath)).push("".concat(l)),r?this.cells.push(this.createSection(u,this.savedCells).setUp(i)):this.cells.push(this.createCell(u).setUp(i))}else for(var a=0,c=this.savedCells;a<c.length;a++){var d=c[a],u=window.mApp.utils.deepCopy(this.jsonPath);for(d instanceof e||(d.options={name:null!==(n=null===(o=this.options)||void 0===o?void 0:o.listName)&&void 0!==n?n:""}),d.sections=window.mApp.utils.deepCopy(this.sections),d.sections.push(this.jsonId),l=0;l<d.jsonPath.length;l++)u[l]!=d.jsonPath[l]&&u.push(d.jsonPath[l]);d.jsonPath=u,this.cells.push(d.setUp(i))}return this.parsed=!0,this},e.prototype.updated=function(t){void 0===t&&(t=window.mApp.moduleManager.moduleObject);var i=window.mApp.utils.getObjectFromPath(this.jsonPath,t),o=window.mApp.utils.deepCopy(this.cells).pop()instanceof e;if(Array.isArray(i))for(var n=0;n<i.length;n++){for(var s=i[n],r=!1,l=0,a=Object.keys(s);l<a.length;l++)a[l].includes("moduleCreator")&&(r=!0);if(!r){var c=window.mApp.utils.deepCopy(this.jsonPath);if(c.push("".concat(n)),o){this.cells.push(this.createSection(c,this.savedCells).setUp(t));break}this.cells.push(this.createCell(c).setUp(t))}}else for(var d=0,u=this.cells;d<u.length;d++){var g=u[d];g instanceof e&&g.updated(t)}},e.prototype.createSection=function(t,i){var o,n,s=new e(t,i,{name:null!==(n=null===(o=this.options)||void 0===o?void 0:o.listName)&&void 0!==n?n:""});return s.sections=window.mApp.utils.deepCopy(this.sections),s.sections.push(this.jsonId),s},e.prototype.createCell=function(t){var e,i,n=new o.ModuleData(t,{name:null!==(i=null===(e=this.options)||void 0===e?void 0:e.listName)&&void 0!==i?i:""});return n.sections=window.mApp.utils.deepCopy(this.sections),n.sections.push(this.jsonId),n},e.prototype.addCell=function(){var t,e,i=this.cells[this.cells.length-1],o=window.mApp.utils.deepCopy(window.mApp.utils.getObjectFromPath(i.jsonPath,window.mApp.moduleManager.moduleObject));null!=(null===(t=null==o?void 0:o.javascriptConfig)||void 0===t?void 0:t.loadInWebView)&&(o.javascriptConfig.loadInWebView=!1),null!=(null===(e=null==o?void 0:o.javascriptConfig)||void 0===e?void 0:e.removeJavascript)&&(o.javascriptConfig.removeJavascript=!1),window.mApp.utils.removeKeysThatMatch("moduleCreator",o);var n=window.mApp.moduleManager.moduleObject;this.jsonPath.forEach((function(t){n=n[t]})),Array.isArray(n)&&n.push(o)},e.prototype.hideCells=function(t,i){var o;void 0===i&&(i=this.jsonId),i==this.jsonId&&null!=(null===(o=this.getOptions())||void 0===o?void 0:o.cellsHidden)&&(this.getOptions().cellsHidden=t);for(var n=0,s=this.cells;n<s.length;n++){var r=s[n],l=r.getOptions().sectionsHidden;r instanceof e&&r.hideCells(t,i),t&&!l.includes(i)?l.push(i):window.mApp.utils.deleteFromArray(l.indexOf(i),l)}console.log(this.getOptions()),console.log(this.jsonPath)},e.prototype.updatePaths=function(t){void 0===t&&(t=window.mApp.moduleManager.moduleObject);for(var i=0,o=this.cells;i<o.length;i++){var n=o[i];n instanceof e&&n.updatePaths(t),n.updatePath(t)}},e.prototype.updateCells=function(){},e.prototype.getAllCells=function(){for(var t=[],i=0,o=this.cells;i<o.length;i++){var n=o[i];t.push(n.jsonId),n instanceof e&&n.getAllCells().forEach((function(e){t.push(e)}))}return t},e.prototype.finish=function(e){if(void 0===e&&(e=this.jsonId),this.jsonId!=e)t.prototype.finish.call(this);else{var i=this.getAllCells();i.reverse();for(var o=0,n=i;o<n.length;o++){var s=n[o],r=window.mApp.moduleManager.moduleMap.get(s);null==r||r.finish("skrrrskfjdskjfskljflksjdl")}t.prototype.finish.call(this,"sdfsdffdssf")}},e}(o.ModuleData);e.ModuleSectionData=n}.apply(e,o),void 0===n||(t.exports=n)},3229:(t,e,i)=>{var o,n;o=[i,e,i(8136),i(9388),i(2271),i(9701),i(4095),i(6544)],n=function(t,e,i,o,n,s,r,l){"use strict";var a;Object.defineProperty(e,"__esModule",{value:!0}),e.ModuleManager=e.ModuleExecutionStatus=void 0,function(t){t[t.executing=0]="executing",t[t.canceling=1]="canceling",t[t.finished=2]="finished"}(a=e.ModuleExecutionStatus||(e.ModuleExecutionStatus={}));var c=function(){function t(){this.moduleObject=void 0,this.moduleViewsExecutor={},this.moudleParsed=[],this.moduleMap=new Map,this.executionStatus=a.finished,this.moduleExecutionInterfaces={},this.currentExecutionId=""}return t.prototype.getModuleOptions=function(){if(null==this.moduleObject)return{};var t={selected:"",notes:{},hideViews:[],id:window.mApp.utils.makeId(15),projectName:"New Project"};null==this.moduleObject.moduleCreatorGlobalOptions&&(this.moduleObject.moduleCreatorGlobalOptions=t);for(var e=0,i=Object.keys(t);e<i.length;e++){var o=i[e];null==this.moduleObject.moduleCreatorGlobalOptions[o]&&(this.moduleObject.moduleCreatorGlobalOptions[o]=t[o])}return this.moduleObject.moduleCreatorGlobalOptions},t.prototype.getDebugModule=function(){for(var t,e,o,n,s,r,a,c,d,u=window.mApp.utils.deepCopy(this.moduleObject),g=0,p=window.mApp.utils.getPathsThatMatchKey("moduleCreatorHeaderisActive",[],window.mApp.moduleManager.moduleObject);g<p.length;g++){var I=p[g];window.mApp.utils.deleteFromArray(I.length-1,I);var C=window.mApp.utils.getObjectFromPath(I,u);C.moduleCreatorHeaderisActive||(C.key="",C.value="")}for(var h=new l.ModuleJavascriptGenerator,f=[],A=0,v=Array.from(this.moduleMap.values());A<v.length;A++){var w=v[A];if(w instanceof i.ModuleSectionData){var m=w;if(!(m.cells.length<=0||m.cells[0]instanceof i.ModuleSectionData)){if(null==m.cells[0].getObject().request)continue;f.push(m)}}}for(var y=0,b=f;y<b.length;y++)for(var V=b[y],Z=void 0,G=0;G<V.cells.length;G++){var W=V.cells[G],S=W.getOptions(),_=window.mApp.utils.getObjectFromPath(W.jsonPath,u);if(null!=(null===(t=null==_?void 0:_.javascriptConfig)||void 0===t?void 0:t.javaScript))if(_.javascriptConfig.javaScript=h.addJsIndicators(_.javascriptConfig.javaScript),1==(null!==(e=null==S?void 0:S.async)&&void 0!==e&&e)&&(_.javascriptConfig.javaScript=h.setAsync(_.javascriptConfig.javaScript)),1==V.cells.length&&(_.javascriptConfig.javaScript=h.setDebug(_.javascriptConfig.javaScript)),null!=Z){var x=window.mApp.utils.getObjectFromPath(null==Z?void 0:Z.jsonPath,u);if(null!=(null===(o=null==x?void 0:x.javascriptConfig)||void 0===o?void 0:o.javaScript)){var O=h.generateUpdatedJs(x.javascriptConfig.javaScript,btoa(JSON.stringify(null!==(n=_.request)&&void 0!==n?n:"")),null!==(s=S.forceRequest)&&void 0!==s&&s,null!==(a=null===(r=null==_?void 0:_.javascriptConfig)||void 0===r?void 0:r.removeJavascript)&&void 0!==a&&a,null!==(d=null===(c=null==_?void 0:_.javascriptConfig)||void 0===c?void 0:c.loadInWebView)&&void 0!==d&&d);x.javascriptConfig.javaScript=O,x.javascriptConfig.javaScript=h.setDebug(x.javascriptConfig.javaScript),G==V.cells.length-1&&(_.javascriptConfig.javaScript=h.setDebug(_.javascriptConfig.javaScript)),console.log(x.javascriptConfig.javaScript),Z=W}}else Z=W}return JSON.stringify(u)},t.prototype.loadNewModule=function(t,e){void 0===e&&(e=void 0);for(var i=0,o=this.moudleParsed;i<o.length;i++)o[i].finish();this.moduleObject=JSON.parse(t),this.parseModule(e)},t.prototype.moduleUpdatedJavascript=function(){},t.prototype.getDefaultModule=function(){return atob(o.testModuleString)},t.prototype.saveModuleToLocalStorage=function(){window.localStorage.setItem("savedModule",JSON.stringify(this.moduleObject))},t.prototype.getLocalStotrageModule=function(){var t;return null!==(t=window.localStorage.getItem("savedModule"))&&void 0!==t?t:void 0},t.prototype.exportModule=function(){var t,e=this.getModuleOptions(),i=this.getDebugModule(),o=new Blob([i],{type:"application/json"}),n=URL.createObjectURL(o),s=document.createElement("a");s.href=n,s.download="".concat(null!==(t=e.projectName)&&void 0!==t?t:"module",".json"),document.body.appendChild(s),s.click(),document.body.removeChild(s)},t.prototype.parseModule=function(t){void 0===t&&(t=void 0);var e=!1;null==this.moduleObject.moduleCreatorGlobalOptions&&(e=!0);var i=this.getModuleOptions();null!=t&&(i.projectName=t),this.moudleParsed=window.mApp.utils.deepCopy(n.parseModuleStructure).filter((function(t){var e;if(!i.hideViews.includes(null!==(e=window.mApp.utils.deepCopy(t.jsonPath).pop())&&void 0!==e?e:""))return t}));for(var o=0,s=this.moudleParsed;o<s.length;o++)s[o].setUp(this.moduleObject);e&&this.disableOptionsFirstReadModules(),this.filterJavascriptFromRequests(),Object.entries(this.moduleViewsExecutor).forEach((function(t){t[0],t[1].moduleLoaded()}))},t.prototype.disableOptionsFirstReadModules=function(){for(var t=[],e=0,o=Array.from(this.moduleMap.values());e<o.length;e++){var n=o[e];if(n instanceof i.ModuleSectionData){var s=n;if(!(s.cells.length<=0||s.cells[0]instanceof i.ModuleSectionData)){if(null==s.cells[0].getObject().request)continue;t.push(s)}}}for(var r=0,l=t;r<l.length;r++)for(var a=l[r],c=0;c<a.cells.length;c++)if(0!=c){var d=a.cells[c].getObject();d.javascriptConfig.removeJavascript=!1,d.javascriptConfig.loadInWebView=!1}},t.prototype.filterJavascriptFromRequests=function(){for(var t,e,o,n=[],s=0,r=Array.from(this.moduleMap.values());s<r.length;s++){var l=r[s];if(l instanceof i.ModuleSectionData){var a=l;if(!(a.cells.length<=0||a.cells[0]instanceof i.ModuleSectionData)){if(null==a.cells[0].getObject().request)continue;n.push(a)}}}for(var c=0,d=n;c<d.length;c++)for(var u=d[c],g=0;g<u.cells.length;g++){var p=u.cells[g].getObject(),I=null===(t=null==p?void 0:p.javascriptConfig)||void 0===t?void 0:t.javaScript;if(null!=I){var C=null===(o=null===(e=I.match(/\/\* JAVASCRIPT STARTS \*\/(?<result>(.|\n)*)\/\* JAVASCRIPT ENDS \*\//))||void 0===e?void 0:e.groups)||void 0===o?void 0:o.result;null!=C&&(p.javascriptConfig.javaScript=C)}}},t.prototype.moduleDataUpdated=function(){Object.entries(this.moduleViewsExecutor).forEach((function(t){t[0];var e,i=t[1];null===(e=i.moduleDataUpdated)||void 0===e||e.call(i)}))},t.prototype.cancelCurrentExecution=function(){var t=this;this.executionStatus=a.canceling,this.updateModuleExecutionInterfaces(),this.currentExecutionId=window.mApp.utils.makeId();var e=this.currentExecutionId,i={id:window.mApp.utils.makeId(),functionName:"CancelExecution",logs:r.LogsParser.shared.getModuleLogsToSend(),sentCallback:!1,completionCallback:!1},o=new s.SocketMessageCallback((function(i,o){o&&e==t.currentExecutionId&&(t.executionStatus=a.finished,t.updateModuleExecutionInterfaces())}),(function(i,o){if(e==t.currentExecutionId){t.executionStatus=a.finished,t.updateModuleExecutionInterfaces();var n=i.logs;null!=n&&r.LogsParser.shared.logsUpdated(n)}}));window.mApp.sockets.sendMessage(i,o)},t.prototype.executeModule=function(t){var e=this;this.currentExecutionId=window.mApp.utils.makeId();var i=this.currentExecutionId;this.executionStatus=a.executing,this.updateModuleExecutionInterfaces();var o={id:window.mApp.utils.makeId(),functionName:"ExecuteModule",data:{moduleEncoded:this.getDebugModule(),executePath:t},logs:r.LogsParser.shared.getModuleLogsToSend(),sentCallback:!1,completionCallback:!1},n=new s.SocketMessageCallback((function(t,o){o&&i==e.currentExecutionId&&(e.executionStatus=a.finished,e.updateModuleExecutionInterfaces())}),(function(t,o){if(i==e.currentExecutionId){e.executionStatus=a.finished,e.updateModuleExecutionInterfaces();var n=t.logs;null!=n&&r.LogsParser.shared.logsUpdated(n)}}));window.mApp.sockets.sendMessage(o,n)},t.prototype.updateModuleExecutionInterfaces=function(){for(var t=0,e=Object.values(this.moduleExecutionInterfaces);t<e.length;t++)e[t].moduleExecutionUpdated()},t}();e.ModuleManager=c}.apply(e,o),void 0===n||(t.exports=n)},2271:(t,e,i)=>{var o,n;o=[i,e,i(323),i(8136)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.parseModuleStructure=void 0,e.parseModuleStructure=[new o.ModuleSectionData(["moduleInfo"],[new i.ModuleData([])],{name:"Module Info",listName:"Parameters"}),new o.ModuleSectionData(["mainPage"],[new i.ModuleData([])],{name:"Main Page",listName:"Request"}),new o.ModuleSectionData(["search"],[new i.ModuleData([])],{name:"Search Page",listName:"Request"}),new o.ModuleSectionData(["info"],[new i.ModuleData([])],{name:"Info Page",listName:"Request"}),new o.ModuleSectionData(["chapters"],[new i.ModuleData([])],{name:"Chapters",listName:"Request"}),new o.ModuleSectionData(["moduleResolvers"],[new o.ModuleSectionData(["resolverInfo"],[new i.ModuleData([])],{name:"Resolver Parameters",listName:"parameters"}),new o.ModuleSectionData(["resolver"],[new i.ModuleData([])],{name:"Resolver Request",listName:"Request"})],{name:"Resolvers",listName:"Resolver"}),new o.ModuleSectionData(["responseCodeFunctions"],[new o.ModuleSectionData([""],[new i.ModuleData([])],{name:"Function Parameters",listName:"Parameters"}),new o.ModuleSectionData(["functions"],[new i.ModuleData([])],{name:"Function Requests",listName:"Request"})],{name:"Response Code Funtions",listName:"Function"}),new o.ModuleSectionData(["helperFunctions"],[new o.ModuleSectionData([""],[new i.ModuleData([])],{name:"Function Parameters",listName:"Parameters"}),new o.ModuleSectionData(["functions"],[new i.ModuleData([])],{name:"Function Requests",listName:"Request"})],{name:"Helper Functions",listName:"Request"})]}.apply(e,o),void 0===n||(t.exports=n)},9388:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.testModuleString=void 0,e.testModuleString="ewogICJtb2R1bGVJbmZvIjogewogICAgIm1vZHVsZU5hbWUiOiAiIiwKICAgICJtb2R1bGVJbml0aWFscyI6ICIiLAogICAgIm1vZHVsZURlc2MiOiAiIiwKICAgICJkZXZlbG9wZXIiOiAiIiwKICAgICJtb2R1bGVJRCI6ICIiLAogICAgIm1vZHVsZUltYWdlIjogIiIsCiAgICAibW9kdWxlVmVyc2lvbiI6IDEuMCwKICAgICJtb2R1bGVMZW5ndWFnZSI6ICJFTkciLAogICAgIm1vZHVsZVR5cGUiOiAiVmlkZW8iLAogICAgImJhc2VVUkwiOiAiIiwKICAgICJtb2R1bGVEZXZlbG9wZXJTaXRlIjogIiIsCiAgICAiVXBkYXRlU2l0ZSI6ICIiLAogICAgInByZWZlcmVkU2VydmVyIjogIiIsCiAgICAicHJlZmVyZWREb3dubG9hZFNlcnZlciI6ICIiLAogICAgImJsYWNrTGlzdGVkIjogWwogICAgICAiIgogICAgXQogIH0sCiAgImdsb2JhbCI6IHsKICAgICJ2YXJpYWJsZXMiOiBbCiAgICAgIHsKICAgICAgICAia2V5IjogIiIsCiAgICAgICAgInZhbHVlIjogIiIKICAgICAgfQogICAgXSwKICAgICJjb29raWVzIjogWwogICAgICB7CiAgICAgICAgImtleSI6ICIiLAogICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgIH0KICAgIF0sCiAgICAiaGVhZGVycyI6IFsKICAgICAgewogICAgICAgICJrZXkiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgICB9CiAgICBdCiAgfSwKICAibWFpblBhZ2UiOiBbCiAgICB7CiAgICAgICJyZXF1ZXN0IjogewogICAgICAgICJ1cmwiOiAiIiwKICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgImhlYWRlcnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJodHRwQm9keSI6IG51bGwKICAgICAgfSwKICAgICAgImV4dHJhIjogewogICAgICAgICJjb21tYW5kcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbW1hbmROYW1lIjogIiIsCiAgICAgICAgICAgICJwYXJhbXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJleHRyYUluZm8iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJqYXZhc2NyaXB0Q29uZmlnIjogewogICAgICAgICJyZW1vdmVKYXZhc2NyaXB0IjogdHJ1ZSwKICAgICAgICAibG9hZEluV2ViVmlldyI6IGZhbHNlLAogICAgICAgICJqYXZhU2NyaXB0IjogIiBjb25zdCBEZWZhdWx0TGF5b3V0cyA9IHsgdWx0cmFXaWRlRnVsbCA6ICd1bHRyYVdpZGVGdWxsJywgdWx0cmFXaWRlIDogJ3VsdHJhV2lkZScsIHdpZGVGdWxsIDogJ3dpZGVGdWxsJywgd2lkZSA6ICd3aWRlJywgd2lkZVN0cmVjaGVkRnVsbCA6ICd3aWRlU3RyZWNoZWRGdWxsJywgd2lkZVN0cmVjaGVkRnVsbERvdWJsZSA6ICdXaWRlU3RyZWNoZWRGdWxsRG91YmxlJywgd2lkZVN0cmVjaGVkIDogJ3dpZGVTdHJlY2hlZCcsIHdpZGVTdHJlY2hlZERvdWJsZSA6ICd3aWRlU3RyZWNoZWREb3VibGUnLCB3aWRlU3RyZWNoZWRGdWxsTGlzdCA6ICd3aWRlU3RyZWNoZWRGdWxsTGlzdCcsIHdpZGVTdHJlY2hlZExpc3QgOiAnd2lkZVN0cmVjaGVkTGlzdCcsIGRvdWJsZXRzIDogJ2RvdWJsZXRzJywgZG91YmxldHNEb3VibGUgOiAnZG91YmxldHNEb3VibGUnLCBkb3VibGV0c0Z1bGwgOiAnZG91YmxldHNGdWxsJywgZG91YmxldHNGdWxsRG91YmxlIDogJ2RvdWJsZXRzRnVsbERvdWJsZScsIGRvdWJsZXRzQ29uc3RhbnQgOiAnZG91YmxldHNDb25zdGFudCcsIGRvdWJsZXRzRG91YmxlQ29uc3RhbnQgOiAnZG91YmxldHNEb3VibGVDb25zdGFudCcsIGRvdWJsZXRzRnVsbENvbnN0YW50IDogJ2RvdWJsZXRzRnVsbENvbnN0YW50JywgZG91YmxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAnZG91YmxldHNGdWxsRG91YmxlQ29uc3RhbnQnLCBsb25nRG91YmxldHMgOiAnbG9uZ0RvdWJsZXRzJywgbG9uZ0RvdWJsZXRzRG91YmxlIDogJ2xvbmdEb3VibGV0c0RvdWJsZScsIGxvbmdEb3VibGV0c0Z1bGwgOiAnbG9uZ0RvdWJsZXRzRnVsbCcsIGxvbmdEb3VibGV0c0Z1bGxEb3VibGUgOiAnbG9uZ0RvdWJsZXRzRnVsbERvdWJsZScsIGxvbmdEb3VibGV0c0NvbnN0YW50IDogJ2xvbmdEb3VibGV0c0NvbnN0YW50JywgbG9uZ0RvdWJsZXRzRG91YmxlQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzRG91YmxlQ29uc3RhbnQnLCBsb25nRG91YmxldHNGdWxsQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzRnVsbENvbnN0YW50JywgbG9uZ0RvdWJsZXRzRnVsbERvdWJsZUNvbnN0YW50IDogJ2xvbmdEb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIHRyaXBsZXRzIDogJ3RyaXBsZXRzJywgdHJpcGxldHNEb3VibGUgOiAndHJpcGxldHNEb3VibGUnLCB0cmlwbGV0c0Z1bGwgOiAndHJpcGxldHNGdWxsJywgdHJpcGxldHNGdWxsRG91YmxlIDogJ3RyaXBsZXRzRnVsbERvdWJsZScsIHRyaXBsZXRzQ29uc3RhbnQgOiAndHJpcGxldHNDb25zdGFudCcsIHRyaXBsZXRzRG91YmxlQ29uc3RhbnQgOiAndHJpcGxldHNEb3VibGVDb25zdGFudCcsIHRyaXBsZXRzRnVsbENvbnN0YW50IDogJ3RyaXBsZXRzRnVsbENvbnN0YW50JywgdHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAndHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQnLCBsb25nVHJpcGxldHMgOiAnbG9uZ1RyaXBsZXRzJywgbG9uZ1RyaXBsZXRzRG91YmxlIDogJ2xvbmdUcmlwbGV0c0RvdWJsZScsIGxvbmdUcmlwbGV0c0Z1bGwgOiAnbG9uZ1RyaXBsZXRzRnVsbCcsIGxvbmdUcmlwbGV0c0Z1bGxEb3VibGUgOiAnbG9uZ1RyaXBsZXRzRnVsbERvdWJsZScsIGxvbmdUcmlwbGV0c0NvbnN0YW50IDogJ2xvbmdUcmlwbGV0c0NvbnN0YW50JywgbG9uZ1RyaXBsZXRzRG91YmxlQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzRG91YmxlQ29uc3RhbnQnLCBsb25nVHJpcGxldHNGdWxsQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzRnVsbENvbnN0YW50JywgbG9uZ1RyaXBsZXRzRnVsbERvdWJsZUNvbnN0YW50IDogJ2xvbmdUcmlwbGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIG5vbmU6ICcnIH07IGNvbnN0IENlbGxEZXNpbmdzID0geyBTcGVjaWFsMSA6ICdTcGVjaWFsMScsIFNwZWNpYWwyIDogJ1NwZWNpYWwyJywgU3BlY2lhbDMgOiAnU3BlY2lhbDMnLCBDRUxMSGVscGVyVGV4dCA6ICdDRUxMSGVscGVyVGV4dCcsIHNtYWxsMSA6ICdzbWFsbDEnLCBzbWFsbDIgOiAnc21hbGwyJywgbm9ybWFsMSA6ICdub3JtYWwxJywgbm9ybWFsMiA6ICdub3JtYWwyJywgbm9ybWFsMyA6ICdub3JtYWwzJywgbm9ybWFsNCA6ICdub3JtYWw0Jywgbm9ybWFsNSA6ICdub3JtYWw1Jywgbm9ybWFsNiA6ICdub3JtYWw2Jywgbm9ybWFsNyA6ICdub3JtYWw3Jywgd2lkZTEgOiAnd2lkZTEnLCB3aWRlMiA6ICd3aWRlMicsIHdpZGUzIDogJ3dpZGUzJywgd2lkZTQgOiAnd2lkZTQnLCB3aWRlNSA6ICd3aWRlNScsIHdpZGU2IDogJ3dpZGU2Jywgd2lkZTcgOiAnd2lkZTcnLCB3aWRlOCA6ICd3aWRlOCcsIHdpZGU5IDogJ3dpZGU5Jywgd2lkZTEwIDogJ3dpZGUxMCcsIHdpZGUxMSA6ICd3aWRlMTEnIH07IGNvbnN0IFBhZ2luZyA9IHsgbGVhZGluZyA6ICdsZWFkaW5nJywgY2VudGVyZWQgOiAnY2VudGVyZWQnLCBub25lIDogJycgfTsgY29uc3QgT3JpZW50YXRpb24gPSB7IGhvcml6b250YWwgOiAnaG9yaXpvbnRhbCcsIHZlcnRpY2FsIDogJ3ZlcnRpY2FsJyB9OyBmdW5jdGlvbiBNYWluUGFnZShyZXF1ZXN0LCBleHRyYSwgamF2YXNjcmlwdENvbmZpZywgb3V0cHV0KSB7IHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7IHRoaXMuZXh0cmEgPSBleHRyYTsgdGhpcy5qYXZhc2NyaXB0Q29uZmlnID0gamF2YXNjcmlwdENvbmZpZzsgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7IH0gZnVuY3Rpb24gTW9kdWxlUmVxdWVzdCh1cmwsIG1ldGhvZCwgaGVhZGVycywgaHR0cEJvZHkpIHsgdGhpcy51cmwgPSB1cmw7IHRoaXMubWV0aG9kID0gbWV0aG9kOyB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzOyB0aGlzLmh0dHBCb2R5ID0gaHR0cEJvZHk7IH0gZnVuY3Rpb24gRXh0cmEoY29tbWFuZHMsIGV4dHJhSW5mbykgeyB0aGlzLmNvbW1hbmRzID0gY29tbWFuZHM7IHRoaXMuZXh0cmFJbmZvID0gZXh0cmFJbmZvOyB9IGZ1bmN0aW9uIENvbW1hbmRzKGNvbW1hbmROYW1lLCBwYXJhbXMpIHsgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lOyB0aGlzLnBhcmFtcyA9IHBhcmFtczsgfSBmdW5jdGlvbiBKYXZhc2NyaXB0Q29uZmlnKHJlbW92ZUphdmFzY3JpcHQsIGxvYWRJbldlYlZpZXcsIGphdmFTY3JpcHQpIHsgdGhpcy5yZW1vdmVKYXZhc2NyaXB0ID0gcmVtb3ZlSmF2YXNjcmlwdDsgdGhpcy5sb2FkSW5XZWJWaWV3ID0gbG9hZEluV2ViVmlldzsgdGhpcy5qYXZhU2NyaXB0ID0gamF2YVNjcmlwdDsgfSBmdW5jdGlvbiBLZXlWYWx1ZShrZXksIHZhbHVlKSB7IHRoaXMua2V5ID0ga2V5OyB0aGlzLnZhbHVlID0gdmFsdWU7IH0gZnVuY3Rpb24gT3V0cHV0KGNlbGxEZXNpbmcsIG9yaWVudGF0aW9uLCBkZWZhdWx0TGF5b3V0LCBwYWdpbmcsIHNlY3Rpb24sIGxheW91dCwgZGF0YSkgeyB0aGlzLmNlbGxEZXNpbmcgPSBjZWxsRGVzaW5nOyB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247IHRoaXMuZGVmYXVsdExheW91dCA9IGRlZmF1bHRMYXlvdXQ7IHRoaXMucGFnaW5nID0gcGFnaW5nOyB0aGlzLnNlY3Rpb24gPSBzZWN0aW9uOyB0aGlzLmxheW91dCA9IGxheW91dDsgdGhpcy5kYXRhID0gZGF0YTsgfSBmdW5jdGlvbiBTZWN0aW9uKHNlY3Rpb25OYW1lLCBzZXBhcmF0b3IpIHsgdGhpcy5zZWN0aW9uTmFtZSA9IHNlY3Rpb25OYW1lOyB0aGlzLnNlcGFyYXRvciA9IHNlcGFyYXRvcjsgfSBmdW5jdGlvbiBMYXlvdXQoaW5zZXRzLCB2aXNpYmxlQ2VsbHNXaWR0aFMsdmlzaWJsZUNlbGxzV2lkdGhNLHZpc2libGVDZWxsc1dpZHRoTCwgdmlzaWJsZUNlbGxzSGVpZ2h0LCBoZWlnaHRGb3JWaXNpYmxlQ2VsbHMsIGNlbGxTaXplLCByYXRpbywgY29uc3RhbnQsIGhvcml6b250YWxTcGFjaW5nLCB2ZXJ0aWNhbFNwYWNpbmcpIHsgdGhpcy5pbnNldHMgPSBpbnNldHM7IHRoaXMudmlzaWJsZUNlbGxzV2lkdGhTID0gdmlzaWJsZUNlbGxzV2lkdGhTOyB0aGlzLnZpc2libGVDZWxsc1dpZHRoTSA9IHZpc2libGVDZWxsc1dpZHRoTTsgdGhpcy52aXNpYmxlQ2VsbHNXaWR0aEwgPSB2aXNpYmxlQ2VsbHNXaWR0aEw7IHRoaXMudmlzaWJsZUNlbGxzSGVpZ2h0ID0gdmlzaWJsZUNlbGxzSGVpZ2h0OyB0aGlzLmhlaWdodEZvclZpc2libGVDZWxscyA9IGhlaWdodEZvclZpc2libGVDZWxsczsgdGhpcy5jZWxsU2l6ZSA9IGNlbGxTaXplOyB0aGlzLnJhdGlvID0gcmF0aW87IHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDsgdGhpcy5ob3Jpem9udGFsU3BhY2luZyA9IGhvcml6b250YWxTcGFjaW5nOyB0aGlzLnZlcnRpY2FsU3BhY2luZyA9IHZlcnRpY2FsU3BhY2luZzsgfSBmdW5jdGlvbiBJbnNldHModG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0KSB7IHRoaXMudG9wID0gdG9wOyB0aGlzLmJvdHRvbSA9IGJvdHRvbTsgdGhpcy5sZWZ0ID0gbGVmdDsgdGhpcy5yaWdodCA9IHJpZ2h0OyB9IGZ1bmN0aW9uIFNpemUod2lkdGgsIGhlaWdodCkgeyB0aGlzLndpZHRoID0gd2lkdGg7IHRoaXMuaGVpZ2h0ID0gaGVpZ2h0OyB9IGZ1bmN0aW9uIFJhdGlvKGluUmVsYXRpb24sIG51bWJlcjEsIG51bWJlcjIpIHsgdGhpcy5pblJlbGF0aW9uID0gaW5SZWxhdGlvbjsgdGhpcy5udW1iZXIxID0gbnVtYmVyMTsgdGhpcy5udW1iZXIyID0gbnVtYmVyMjsgfSBmdW5jdGlvbiBEYXRhKGltYWdlLCB0aXRsZSwgZGVzY3JpcHRpb24sIGZpZWxkMSwgZmllbGQyLCBmaWVsZDMsIGZpZWxkNCwgaXNDaGFwdGVyLCBsaW5rLG9wZW5JbldlYlZpZXcpIHsgdGhpcy5pbWFnZSA9IGltYWdlOyB0aGlzLnRpdGxlID0gdGl0bGU7IHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsgdGhpcy5maWVsZDEgPSBmaWVsZDE7IHRoaXMuZmllbGQyID0gZmllbGQyOyB0aGlzLmZpZWxkMyA9IGZpZWxkMzsgdGhpcy5maWVsZDQgPSBmaWVsZDQ7IHRoaXMuaXNDaGFwdGVyID0gaXNDaGFwdGVyOyB0aGlzLmxpbmsgPSBsaW5rOyB0aGlzLm9wZW5JbldlYlZpZXcgPSBvcGVuSW5XZWJWaWV3OyB9IGZ1bmN0aW9uIHF1aWNrRGF0YShsaW5rLGltYWdlLHRpdGxlLGZpZWxkMSkgeyByZXR1cm4gbmV3IERhdGEoaW1hZ2UsdGl0bGUsJ3Vua25vd24nLGZpZWxkMSwndW5rbm93bicsJ3Vua25vd24nLCd1bmtub3duJyxmYWxzZSxsaW5rKTsgfSBmdW5jdGlvbiBzaHVmZmxlKGEpIHsgdmFyIGosIHgsIGk7IGZvciAoaSA9IGEubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkgeyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7IHggPSBhW2ldOyBhW2ldID0gYVtqXTsgYVtqXSA9IHg7IH0gcmV0dXJuIGE7IH0gdmFyIHNhdmVkRGF0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXRzdS1maW5hbC1kYXRhJyk7IHZhciBwYXJzZWRKc29uID0gSlNPTi5wYXJzZShzYXZlZERhdGEuaW5uZXJIVE1MKTsgbGV0IG91dHB1dCA9IFtdOyBsZXQgZW1wdHlLZXlWYWx1ZSA9IFtuZXcgS2V5VmFsdWUoJycsJycpXTsgbGV0IE1haW5QYWdlT2JqZWN0ID0gbmV3IE1haW5QYWdlKG5ldyBNb2R1bGVSZXF1ZXN0KCcnLCdnZXQnLGVtcHR5S2V5VmFsdWUsbnVsbCksbmV3IEV4dHJhKFtuZXcgQ29tbWFuZHMoJycsZW1wdHlLZXlWYWx1ZSldLGVtcHR5S2V5VmFsdWUpLG5ldyBKYXZhc2NyaXB0Q29uZmlnKHRydWUsZmFsc2UsJycpLG91dHB1dCk7IHZhciBmaW5hbEpzb24gPSBKU09OLnN0cmluZ2lmeShNYWluUGFnZU9iamVjdCk7IHNhdmVkRGF0YS5pbm5lckhUTUwgPSBmaW5hbEpzb247IgogICAgICB9LAogICAgICAib3V0cHV0IjogWwogICAgICAgIHsKICAgICAgICAgICJjZWxsRGVzaW5nIjogIm5vcm1hbDEiLAogICAgICAgICAgIm9yaWVudGF0aW9uIjogInZlcnRpY2FsIiwKICAgICAgICAgICJkZWZhdWx0TGF5b3V0IjogIndpZGUiLAogICAgICAgICAgInBhZ2luZyI6ICIiLAogICAgICAgICAgInNlY3Rpb24iOiB7CiAgICAgICAgICAgICJzZWN0aW9uTmFtZSI6ICIiLAogICAgICAgICAgICAic2VwYXJhdG9yIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICAibGF5b3V0IjogewogICAgICAgICAgICAiaW5zZXRzIjogewogICAgICAgICAgICAgICJ0b3AiOiAwLAogICAgICAgICAgICAgICJib3R0b20iOiAwLAogICAgICAgICAgICAgICJsZWZ0IjogMCwKICAgICAgICAgICAgICAicmlnaHQiOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ2aXNpYmxlQ2VsbHNXaWR0aFMiOiAyLAogICAgICAgICAgICAidmlzaWJsZUNlbGxzV2lkdGhNIjogMiwKICAgICAgICAgICAgInZpc2libGVDZWxsc1dpZHRoTCI6IDIsCiAgICAgICAgICAgICJ2aXNpYmxlQ2VsbHNIZWlnaHQiOiAyLAogICAgICAgICAgICAiaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzIjogNDAwLAogICAgICAgICAgICAiY2VsbFNpemUiOiB7CiAgICAgICAgICAgICAgIndpZHRoIjogMzAwLAogICAgICAgICAgICAgICJoZWlnaHQiOiAzMDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJhdGlvIjogewogICAgICAgICAgICAgICJpblJlbGF0aW9uIjogIndpZHRoIiwKICAgICAgICAgICAgICAibnVtYmVyMSI6IDEsCiAgICAgICAgICAgICAgIm51bWJlcjIiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjb25zdGFudCI6IHsKICAgICAgICAgICAgICAid2lkdGgiOiAxLAogICAgICAgICAgICAgICJoZWlnaHQiOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJob3Jpem9udGFsU3BhY2luZyI6IDAsCiAgICAgICAgICAgICJ2ZXJ0aWNhbFNwYWNpbmciOiAwCiAgICAgICAgICB9LAogICAgICAgICAgImRhdGEiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAiaW1hZ2UiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogIiIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgImh0dHBCb2R5IjogbnVsbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInRpdGxlIjogIiIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICAgICAgICAgImZpZWxkMSI6ICIiLAogICAgICAgICAgICAgICJmaWVsZDIiOiAiIiwKICAgICAgICAgICAgICAiZmllbGQzIjogIiIsCiAgICAgICAgICAgICAgImZpZWxkNCI6ICIiLAogICAgICAgICAgICAgICJvcGVuSW5XZWJWaWV3IiA6IGZhbHNlLAogICAgICAgICAgICAgICJpc0NoYXB0ZXIiOiBmYWxzZSwKICAgICAgICAgICAgICAibGluayI6IHsKICAgICAgICAgICAgICAgICJ1cmwiOiAiIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiIiwKICAgICAgICAgICAgICAgICJoZWFkZXJzIjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAic2VhcmNoIjogWwogICAgewogICAgICAicmVxdWVzdCI6IHsKICAgICAgICAidXJsIjogIiIsCiAgICAgICAgIm1ldGhvZCI6ICJnZXQiLAogICAgICAgICJoZWFkZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgIH0sCiAgICAgICJzZXBhcmF0b3IiOiAiIiwKICAgICAgImV4dHJhIjogewogICAgICAgICJjb21tYW5kcyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbW1hbmROYW1lIjogIiIsCiAgICAgICAgICAgICJwYXJhbXMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJleHRyYUluZm8iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJqYXZhc2NyaXB0Q29uZmlnIjogewogICAgICAgICJyZW1vdmVKYXZhc2NyaXB0IjogdHJ1ZSwKICAgICAgICAibG9hZEluV2ViVmlldyI6IGZhbHNlLAogICAgICAgICJqYXZhU2NyaXB0IjogImNvbnN0IERlZmF1bHRMYXlvdXRzID0geyB1bHRyYVdpZGVGdWxsIDogJ3VsdHJhV2lkZUZ1bGwnLCB1bHRyYVdpZGUgOiAndWx0cmFXaWRlJywgd2lkZUZ1bGwgOiAnd2lkZUZ1bGwnLCB3aWRlIDogJ3dpZGUnLCB3aWRlU3RyZWNoZWRGdWxsIDogJ3dpZGVTdHJlY2hlZEZ1bGwnLCB3aWRlU3RyZWNoZWRGdWxsRG91YmxlIDogJ1dpZGVTdHJlY2hlZEZ1bGxEb3VibGUnLCB3aWRlU3RyZWNoZWQgOiAnd2lkZVN0cmVjaGVkJywgd2lkZVN0cmVjaGVkRG91YmxlIDogJ3dpZGVTdHJlY2hlZERvdWJsZScsIHdpZGVTdHJlY2hlZEZ1bGxMaXN0IDogJ3dpZGVTdHJlY2hlZEZ1bGxMaXN0Jywgd2lkZVN0cmVjaGVkTGlzdCA6ICd3aWRlU3RyZWNoZWRMaXN0JywgZG91YmxldHMgOiAnZG91YmxldHMnLCBkb3VibGV0c0RvdWJsZSA6ICdkb3VibGV0c0RvdWJsZScsIGRvdWJsZXRzRnVsbCA6ICdkb3VibGV0c0Z1bGwnLCBkb3VibGV0c0Z1bGxEb3VibGUgOiAnZG91YmxldHNGdWxsRG91YmxlJywgZG91YmxldHNDb25zdGFudCA6ICdkb3VibGV0c0NvbnN0YW50JywgZG91YmxldHNEb3VibGVDb25zdGFudCA6ICdkb3VibGV0c0RvdWJsZUNvbnN0YW50JywgZG91YmxldHNGdWxsQ29uc3RhbnQgOiAnZG91YmxldHNGdWxsQ29uc3RhbnQnLCBkb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudCA6ICdkb3VibGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIGxvbmdEb3VibGV0cyA6ICdsb25nRG91YmxldHMnLCBsb25nRG91YmxldHNEb3VibGUgOiAnbG9uZ0RvdWJsZXRzRG91YmxlJywgbG9uZ0RvdWJsZXRzRnVsbCA6ICdsb25nRG91YmxldHNGdWxsJywgbG9uZ0RvdWJsZXRzRnVsbERvdWJsZSA6ICdsb25nRG91YmxldHNGdWxsRG91YmxlJywgbG9uZ0RvdWJsZXRzQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzQ29uc3RhbnQnLCBsb25nRG91YmxldHNEb3VibGVDb25zdGFudCA6ICdsb25nRG91YmxldHNEb3VibGVDb25zdGFudCcsIGxvbmdEb3VibGV0c0Z1bGxDb25zdGFudCA6ICdsb25nRG91YmxldHNGdWxsQ29uc3RhbnQnLCBsb25nRG91YmxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAnbG9uZ0RvdWJsZXRzRnVsbERvdWJsZUNvbnN0YW50JywgdHJpcGxldHMgOiAndHJpcGxldHMnLCB0cmlwbGV0c0RvdWJsZSA6ICd0cmlwbGV0c0RvdWJsZScsIHRyaXBsZXRzRnVsbCA6ICd0cmlwbGV0c0Z1bGwnLCB0cmlwbGV0c0Z1bGxEb3VibGUgOiAndHJpcGxldHNGdWxsRG91YmxlJywgdHJpcGxldHNDb25zdGFudCA6ICd0cmlwbGV0c0NvbnN0YW50JywgdHJpcGxldHNEb3VibGVDb25zdGFudCA6ICd0cmlwbGV0c0RvdWJsZUNvbnN0YW50JywgdHJpcGxldHNGdWxsQ29uc3RhbnQgOiAndHJpcGxldHNGdWxsQ29uc3RhbnQnLCB0cmlwbGV0c0Z1bGxEb3VibGVDb25zdGFudCA6ICd0cmlwbGV0c0Z1bGxEb3VibGVDb25zdGFudCcsIGxvbmdUcmlwbGV0cyA6ICdsb25nVHJpcGxldHMnLCBsb25nVHJpcGxldHNEb3VibGUgOiAnbG9uZ1RyaXBsZXRzRG91YmxlJywgbG9uZ1RyaXBsZXRzRnVsbCA6ICdsb25nVHJpcGxldHNGdWxsJywgbG9uZ1RyaXBsZXRzRnVsbERvdWJsZSA6ICdsb25nVHJpcGxldHNGdWxsRG91YmxlJywgbG9uZ1RyaXBsZXRzQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzQ29uc3RhbnQnLCBsb25nVHJpcGxldHNEb3VibGVDb25zdGFudCA6ICdsb25nVHJpcGxldHNEb3VibGVDb25zdGFudCcsIGxvbmdUcmlwbGV0c0Z1bGxDb25zdGFudCA6ICdsb25nVHJpcGxldHNGdWxsQ29uc3RhbnQnLCBsb25nVHJpcGxldHNGdWxsRG91YmxlQ29uc3RhbnQgOiAnbG9uZ1RyaXBsZXRzRnVsbERvdWJsZUNvbnN0YW50Jywgbm9uZTogJycgfTsgY29uc3QgQ2VsbERlc2luZ3MgPSB7IFNwZWNpYWwxIDogJ1NwZWNpYWwxJywgU3BlY2lhbDIgOiAnU3BlY2lhbDInLCBTcGVjaWFsMyA6ICdTcGVjaWFsMycsIENFTExIZWxwZXJUZXh0IDogJ0NFTExIZWxwZXJUZXh0Jywgc21hbGwxIDogJ3NtYWxsMScsIHNtYWxsMiA6ICdzbWFsbDInLCBub3JtYWwxIDogJ25vcm1hbDEnLCBub3JtYWwyIDogJ25vcm1hbDInLCBub3JtYWwzIDogJ25vcm1hbDMnLCBub3JtYWw0IDogJ25vcm1hbDQnLCBub3JtYWw1IDogJ25vcm1hbDUnLCBub3JtYWw2IDogJ25vcm1hbDYnLCBub3JtYWw3IDogJ25vcm1hbDcnLCB3aWRlMSA6ICd3aWRlMScsIHdpZGUyIDogJ3dpZGUyJywgd2lkZTMgOiAnd2lkZTMnLCB3aWRlNCA6ICd3aWRlNCcsIHdpZGU1IDogJ3dpZGU1Jywgd2lkZTYgOiAnd2lkZTYnLCB3aWRlNyA6ICd3aWRlNycsIHdpZGU4IDogJ3dpZGU4Jywgd2lkZTkgOiAnd2lkZTknLCB3aWRlMTAgOiAnd2lkZTEwJywgd2lkZTExIDogJ3dpZGUxMScgfTsgY29uc3QgUGFnaW5nID0geyBsZWFkaW5nIDogJ2xlYWRpbmcnLCBjZW50ZXJlZCA6ICdjZW50ZXJlZCcsIG5vbmUgOiAnJyB9OyBjb25zdCBPcmllbnRhdGlvbiA9IHsgaG9yaXpvbnRhbCA6ICdob3Jpem9udGFsJywgdmVydGljYWwgOiAndmVydGljYWwnIH07IGZ1bmN0aW9uIFNlYXJjaChyZXF1ZXN0LGV4dHJhLHNlcGFyYXRvcixqYXZhc2NyaXB0Q29uZmlnLG91dHB1dCkgeyB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0OyB0aGlzLmV4dHJhID0gZXh0cmE7IHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yOyB0aGlzLmphdmFzY3JpcHRDb25maWcgPSBqYXZhc2NyaXB0Q29uZmlnOyB0aGlzLm91dHB1dCA9IG91dHB1dDsgfSBmdW5jdGlvbiBNb2R1bGVSZXF1ZXN0KHVybCxtZXRob2QsaGVhZGVycyxodHRwQm9keSkgeyB0aGlzLnVybCA9IHVybDsgdGhpcy5tZXRob2QgPSBtZXRob2Q7IHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7IHRoaXMuaHR0cEJvZHkgPSBodHRwQm9keTsgfSBmdW5jdGlvbiBFeHRyYShjb21tYW5kcyxleHRyYUluZm8pIHsgdGhpcy5jb21tYW5kcyA9IGNvbW1hbmRzOyB0aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbzsgfSBmdW5jdGlvbiBDb21tYW5kcyhjb21tYW5kTmFtZSxwYXJhbXMpIHsgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lOyB0aGlzLnBhcmFtcyA9IHBhcmFtczsgfSBmdW5jdGlvbiBKYXZhc2NyaXB0Q29uZmlnKHJlbW92ZUphdmFzY3JpcHQsbG9hZEluV2ViVmlldyxqYXZhU2NyaXB0KSB7IHRoaXMucmVtb3ZlSmF2YXNjcmlwdCA9IHJlbW92ZUphdmFzY3JpcHQ7IHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7IHRoaXMuamF2YVNjcmlwdCA9IGphdmFTY3JpcHQ7IH0gZnVuY3Rpb24gS2V5VmFsdWUoa2V5LHZhbHVlKSB7IHRoaXMua2V5ID0ga2V5OyB0aGlzLnZhbHVlID0gdmFsdWU7IH0gZnVuY3Rpb24gT3V0cHV0KGNlbGxEZXNpbmcsb3JpZW50YXRpb24sZGVmYXVsdExheW91dCxwYWdpbmcsc2VjdGlvbixsYXlvdXQsZGF0YSkgeyB0aGlzLmNlbGxEZXNpbmcgPSBjZWxsRGVzaW5nOyB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247IHRoaXMuZGVmYXVsdExheW91dCA9IGRlZmF1bHRMYXlvdXQ7IHRoaXMucGFnaW5nID0gcGFnaW5nOyB0aGlzLnNlY3Rpb24gPSBzZWN0aW9uOyB0aGlzLmxheW91dCA9IGxheW91dDsgdGhpcy5kYXRhID0gZGF0YTsgfSBmdW5jdGlvbiBTZWN0aW9uKHNlY3Rpb25OYW1lLHNlcGFyYXRvcikgeyB0aGlzLnNlY3Rpb25OYW1lID0gc2VjdGlvbk5hbWU7IHRoaXMuc2VwYXJhdG9yID0gc2VwYXJhdG9yOyB9IGZ1bmN0aW9uIExheW91dChpbnNldHMsIHZpc2libGVDZWxsc1dpZHRoUyx2aXNpYmxlQ2VsbHNXaWR0aE0sdmlzaWJsZUNlbGxzV2lkdGhMLCB2aXNpYmxlQ2VsbHNIZWlnaHQsIGhlaWdodEZvclZpc2libGVDZWxscywgY2VsbFNpemUsIHJhdGlvLCBjb25zdGFudCwgaG9yaXpvbnRhbFNwYWNpbmcsIHZlcnRpY2FsU3BhY2luZykgeyB0aGlzLmluc2V0cyA9IGluc2V0czsgdGhpcy52aXNpYmxlQ2VsbHNXaWR0aFMgPSB2aXNpYmxlQ2VsbHNXaWR0aFM7IHRoaXMudmlzaWJsZUNlbGxzV2lkdGhNID0gdmlzaWJsZUNlbGxzV2lkdGhNOyB0aGlzLnZpc2libGVDZWxsc1dpZHRoTCA9IHZpc2libGVDZWxsc1dpZHRoTDsgdGhpcy52aXNpYmxlQ2VsbHNIZWlnaHQgPSB2aXNpYmxlQ2VsbHNIZWlnaHQ7IHRoaXMuaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzID0gaGVpZ2h0Rm9yVmlzaWJsZUNlbGxzOyB0aGlzLmNlbGxTaXplID0gY2VsbFNpemU7IHRoaXMucmF0aW8gPSByYXRpbzsgdGhpcy5jb25zdGFudCA9IGNvbnN0YW50OyB0aGlzLmhvcml6b250YWxTcGFjaW5nID0gaG9yaXpvbnRhbFNwYWNpbmc7IHRoaXMudmVydGljYWxTcGFjaW5nID0gdmVydGljYWxTcGFjaW5nOyB9IGZ1bmN0aW9uIEluc2V0cyh0b3AsYm90dG9tLGxlZnQscmlnaHQpIHsgdGhpcy50b3AgPSB0b3A7IHRoaXMuYm90dG9tID0gYm90dG9tOyB0aGlzLmxlZnQgPSBsZWZ0OyB0aGlzLnJpZ2h0ID0gcmlnaHQ7IH0gZnVuY3Rpb24gU2l6ZSh3aWR0aCxoZWlnaHQpIHsgdGhpcy53aWR0aCA9IHdpZHRoOyB0aGlzLmhlaWdodCA9IGhlaWdodDsgfSBmdW5jdGlvbiBSYXRpbyhpblJlbGF0aW9uLG51bWJlcjEsbnVtYmVyMikgeyB0aGlzLmluUmVsYXRpb24gPSBpblJlbGF0aW9uOyB0aGlzLm51bWJlcjEgPSBudW1iZXIxOyB0aGlzLm51bWJlcjIgPSBudW1iZXIyOyB9IGZ1bmN0aW9uIERhdGEoaW1hZ2UsdGl0bGUsZGVzY3JpcHRpb24sZmllbGQxLGZpZWxkMixmaWVsZDMsZmllbGQ0LGlzQ2hhcHRlcixsaW5rLG9wZW5JbldlYlZpZXcpIHsgdGhpcy5pbWFnZSA9IGltYWdlOyB0aGlzLnRpdGxlID0gdGl0bGU7IHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsgdGhpcy5maWVsZDEgPSBmaWVsZDE7IHRoaXMuZmllbGQyID0gZmllbGQyOyB0aGlzLmZpZWxkMyA9IGZpZWxkMzsgdGhpcy5maWVsZDQgPSBmaWVsZDQ7IHRoaXMuaXNDaGFwdGVyID0gaXNDaGFwdGVyOyB0aGlzLmxpbmsgPSBsaW5rOyB0aGlzLm9wZW5JbldlYlZpZXcgPSBvcGVuSW5XZWJWaWV3OyB9IGZ1bmN0aW9uIHF1aWNrRGF0YShsaW5rLGltYWdlLHRpdGxlLGZpZWxkMSkgeyByZXR1cm4gbmV3IERhdGEoaW1hZ2UsdGl0bGUsJ3Vua25vd24nLGZpZWxkMSwndW5rbm93bicsJ3Vua25vd24nLCd1bmtub3duJyxmYWxzZSxsaW5rKTsgfSBmdW5jdGlvbiBzaHVmZmxlKGEpIHsgdmFyIGosIHgsIGk7IGZvciAoaSA9IGEubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkgeyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7IHggPSBhW2ldOyBhW2ldID0gYVtqXTsgYVtqXSA9IHg7IH0gcmV0dXJuIGE7IH0gdmFyIHNhdmVkRGF0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXRzdS1maW5hbC1kYXRhJyk7IHZhciBwYXJzZWRKc29uID0gSlNPTi5wYXJzZShzYXZlZERhdGEuaW5uZXJIVE1MKTsgbGV0IG91dHB1dCA9IFtdOyBsZXQgZW1wdHlLZXlWYWx1ZSA9IFtuZXcgS2V5VmFsdWUoJycsJycpXTsgbGV0IHNlYXJjaFBhZ2VPYmplY3QgPSBuZXcgU2VhcmNoKG5ldyBNb2R1bGVSZXF1ZXN0KCcnLCcnLGVtcHR5S2V5VmFsdWUsbnVsbCksbmV3IEV4dHJhKFtuZXcgQ29tbWFuZHMoJycsZW1wdHlLZXlWYWx1ZSldLGVtcHR5S2V5VmFsdWUpLCcnLG5ldyBKYXZhc2NyaXB0Q29uZmlnKHRydWUsZmFsc2UsJycpLG91dHB1dCk7IHZhciBmaW5hbEpzb24gPSBKU09OLnN0cmluZ2lmeShzZWFyY2hQYWdlT2JqZWN0KTsgc2F2ZWREYXRhLmlubmVySFRNTCA9IGZpbmFsSnNvbjsiCiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiBbCiAgICAgICAgewogICAgICAgICAgImNlbGxEZXNpbmciOiAibm9ybWFsMSIsCiAgICAgICAgICAib3JpZW50YXRpb24iOiAidmVydGljYWwiLAogICAgICAgICAgImRlZmF1bHRMYXlvdXQiOiAid2lkZSIsCiAgICAgICAgICAicGFnaW5nIjogIiIsCiAgICAgICAgICAic2VjdGlvbiI6IHsKICAgICAgICAgICAgInNlY3Rpb25OYW1lIjogIiIsCiAgICAgICAgICAgICJzZXBhcmF0b3IiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgICJsYXlvdXQiOiB7CiAgICAgICAgICAgICJpbnNldHMiOiB7CiAgICAgICAgICAgICAgInRvcCI6IDAsCiAgICAgICAgICAgICAgImJvdHRvbSI6IDAsCiAgICAgICAgICAgICAgImxlZnQiOiAwLAogICAgICAgICAgICAgICJyaWdodCI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZpc2libGVDZWxsc1dpZHRoUyI6IDIsCiAgICAgICAgICAgICJ2aXNpYmxlQ2VsbHNXaWR0aE0iOiAyLAogICAgICAgICAgICAidmlzaWJsZUNlbGxzV2lkdGhMIjogMiwKICAgICAgICAgICAgInZpc2libGVDZWxsc0hlaWdodCI6IDIsCiAgICAgICAgICAgICJoZWlnaHRGb3JWaXNpYmxlQ2VsbHMiOiA0MDAsCiAgICAgICAgICAgICJjZWxsU2l6ZSI6IHsKICAgICAgICAgICAgICAid2lkdGgiOiAzMDAsCiAgICAgICAgICAgICAgImhlaWdodCI6IDMwMAogICAgICAgICAgICB9LAogICAgICAgICAgICAicmF0aW8iOiB7CiAgICAgICAgICAgICAgImluUmVsYXRpb24iOiAid2lkdGgiLAogICAgICAgICAgICAgICJudW1iZXIxIjogMSwKICAgICAgICAgICAgICAibnVtYmVyMiI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNvbnN0YW50IjogewogICAgICAgICAgICAgICJ3aWR0aCI6IDEsCiAgICAgICAgICAgICAgImhlaWdodCI6IDIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImhvcml6b250YWxTcGFjaW5nIjogMCwKICAgICAgICAgICAgInZlcnRpY2FsU3BhY2luZyI6IDAKICAgICAgICAgIH0sCiAgICAgICAgICAiZGF0YSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJpbWFnZSI6IHsKICAgICAgICAgICAgICAgICJ1cmwiOiAiIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAgICAgICAgICJoZWFkZXJzIjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidGl0bGUiOiAiIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICAgICAgICAgICAiZmllbGQxIjogIiIsCiAgICAgICAgICAgICAgImZpZWxkMiI6ICIiLAogICAgICAgICAgICAgICJmaWVsZDMiOiAiIiwKICAgICAgICAgICAgICAiZmllbGQ0IjogIiIsCiAgICAgICAgICAgICAgIm9wZW5JbldlYlZpZXciIDogZmFsc2UsCiAgICAgICAgICAgICAgImlzQ2hhcHRlciI6IGZhbHNlLAogICAgICAgICAgICAgICJsaW5rIjogewogICAgICAgICAgICAgICAgInVybCI6ICJlbXB0eSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJrZXkiOiAia2V5IiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAiaW5mbyI6IFsKICAgIHsKICAgICAgInJlcXVlc3QiOiB7CiAgICAgICAgInVybCI6ICIiLAogICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImh0dHBCb2R5IjogbnVsbAogICAgICB9LAogICAgICAiZXh0cmEiOiB7CiAgICAgICAgImNvbW1hbmRzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiY29tbWFuZE5hbWUiOiAiIiwKICAgICAgICAgICAgInBhcmFtcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImV4dHJhSW5mbyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgImphdmFzY3JpcHRDb25maWciOiB7CiAgICAgICAgInJlbW92ZUphdmFzY3JpcHQiOiB0cnVlLAogICAgICAgICJsb2FkSW5XZWJWaWV3IjogZmFsc2UsCiAgICAgICAgImphdmFTY3JpcHQiOiAiZnVuY3Rpb24gSW5mbyhyZXF1ZXN0LCBleHRyYSwgamF2YXNjcmlwdENvbmZpZywgb3V0cHV0KSB7IHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7IHRoaXMuZXh0cmEgPSBleHRyYTsgdGhpcy5qYXZhc2NyaXB0Q29uZmlnID0gamF2YXNjcmlwdENvbmZpZzsgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7fWZ1bmN0aW9uIE1vZHVsZVJlcXVlc3QodXJsLCBtZXRob2QsIGhlYWRlcnMsIGh0dHBCb2R5KSB7IHRoaXMudXJsID0gdXJsOyB0aGlzLm1ldGhvZCA9IG1ldGhvZDsgdGhpcy5oZWFkZXJzID0gaGVhZGVyczsgdGhpcy5odHRwQm9keSA9IGh0dHBCb2R5O31mdW5jdGlvbiBFeHRyYShjb21tYW5kcywgZXh0cmFJbmZvKSB7IHRoaXMuY29tbWFuZHMgPSBjb21tYW5kczsgdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87fWZ1bmN0aW9uIENvbW1hbmRzKGNvbW1hbmROYW1lLCBwYXJhbXMpIHsgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lOyB0aGlzLnBhcmFtcyA9IHBhcmFtczt9ZnVuY3Rpb24gSmF2YXNjcmlwdENvbmZpZyhyZW1vdmVKYXZhc2NyaXB0LCBsb2FkSW5XZWJWaWV3LCBqYXZhU2NyaXB0KSB7IHRoaXMucmVtb3ZlSmF2YXNjcmlwdCA9IHJlbW92ZUphdmFzY3JpcHQ7IHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7IHRoaXMuamF2YVNjcmlwdCA9IGphdmFTY3JpcHQ7fWZ1bmN0aW9uIEtleVZhbHVlKGtleSwgdmFsdWUpIHsgdGhpcy5rZXkgPSBrZXk7IHRoaXMudmFsdWUgPSB2YWx1ZTt9ZnVuY3Rpb24gQ2hhcHRlcihjaGFwTmFtZSwgbGluayxvcGVuSW5XZWJWaWV3KSB7IHRoaXMuY2hhcE5hbWUgPSBjaGFwTmFtZTsgdGhpcy5saW5rID0gbGluazsgdGhpcy5vcGVuSW5XZWJWaWV3ID0gb3BlbkluV2ViVmlldzt9ZnVuY3Rpb24gT3V0cHV0KGltYWdlLCB0aXRsZSwgbGluaywgZGVzY3JpcHRpb24sIGdlbnJlcywgZmllbGQxLCBmaWVsZDIsIGZpZWxkMywgZmllbGQ0LCBjaGFwdGVycykgeyB0aGlzLmltYWdlID0gaW1hZ2U7IHRoaXMubGluayA9IGxpbms7IHRoaXMudGl0bGUgPSB0aXRsZTsgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uOyB0aGlzLmdlbnJlcyA9IGdlbnJlczsgdGhpcy5maWVsZDEgPSBmaWVsZDE7IHRoaXMuZmllbGQyID0gZmllbGQyOyB0aGlzLmZpZWxkMyA9IGZpZWxkMzsgdGhpcy5maWVsZDQgPSBmaWVsZDQ7IHRoaXMuY2hhcHRlcnMgPSBjaGFwdGVyczt9ZnVuY3Rpb24gZ2V0U3R1ZmYoYXJyYXksbWF0Y2gpIHsgZm9yICh2YXIgeCA9IDAgOyB4PCBhcnJheS5sZW5ndGg7eCsrKSB7IGxldCBkYXRhID0gYXJyYXlbeF0uaW5uZXJUZXh0OyBpZiAoZGF0YS5pbmNsdWRlcyhtYXRjaCkpIHsgcmV0dXJuIGRhdGEucmVwbGFjZShtYXRjaCwnJykudHJpbSgpOyB9IH0gfWZ1bmN0aW9uIGdldEh0bWxTdHVmZihhcnJheSxtYXRjaCkgeyBmb3IgKHZhciB4ID0gMCA7IHg8IGFycmF5Lmxlbmd0aDt4KyspIHsgbGV0IGRhdGEgPSBhcnJheVt4XS5pbm5lclRleHQ7IGlmIChkYXRhLmluY2x1ZGVzKG1hdGNoKSkgeyByZXR1cm4gYXJyYXlbeF07IH0gfX12YXIgc2F2ZWREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tldHN1LWZpbmFsLWRhdGEnKTt2YXIgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2Uoc2F2ZWREYXRhLmlubmVySFRNTCk7bGV0IGVtcHR5S2V5VmFsdWUgPSBbbmV3IEtleVZhbHVlKCcnLCAnJyldO3ZhciBlcGlzb2RlcyA9IFtdO3ZhciB0eXBlID0gJ2VtcHR5Jzt2YXIgc3RhdHVzID0gJ1Vua25vd24nO3ZhciBnZW5yZXMgPSBbXTt2YXIgZGVzYyA9ICcnO3ZhciB0aXRsZSA9ICcnO3ZhciBpbWFnZSA9ICcnO2ltYWdlID0gbmV3IE1vZHVsZVJlcXVlc3QoaW1hZ2UsJ2dldCcsZW1wdHlLZXlWYWx1ZSxudWxsKTt2YXIgZ2VucmVzQXJyYXkgPSBbXTtsZXQgaW5mb1BhZ2VPYmplY3QgPSBuZXcgSW5mbyhuZXcgTW9kdWxlUmVxdWVzdCgnJywgJycsIGVtcHR5S2V5VmFsdWUsIG51bGwpLCBuZXcgRXh0cmEoW25ldyBDb21tYW5kcygnJywgZW1wdHlLZXlWYWx1ZSldLCBlbXB0eUtleVZhbHVlKSwgbmV3IEphdmFzY3JpcHRDb25maWcoZmFsc2UsIGZhbHNlLCAnJyksIG5ldyBPdXRwdXQoaW1hZ2UsIHRpdGxlLCBwYXJzZWRKc29uLnJlcXVlc3QsIGRlc2MsIGdlbnJlcywgc3RhdHVzLCAnQW5pbWUnLCB0eXBlLCAnRXBzOiAnICsgZXBpc29kZXMubGVuZ3RoLCBlcGlzb2RlcykpO3ZhciBmaW5hbEpzb24gPSBKU09OLnN0cmluZ2lmeShpbmZvUGFnZU9iamVjdCk7c2F2ZWREYXRhLmlubmVySFRNTCA9IGZpbmFsSnNvbjsiCiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgImltYWdlIjogewogICAgICAgICAgInVybCI6ICIiLAogICAgICAgICAgIm1ldGhvZCI6ICJnZXQiLAogICAgICAgICAgImhlYWRlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJodHRwQm9keSI6IG51bGwKICAgICAgICB9LAogICAgICAgICJsaW5rIjogewogICAgICAgICAgInVybCI6ICIiLAogICAgICAgICAgIm1ldGhvZCI6ICJnZXQiLAogICAgICAgICAgImhlYWRlcnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJodHRwQm9keSI6IG51bGwKICAgICAgICB9LAogICAgICAgICJ0aXRsZSI6ICIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICJnZW5yZXMiOiBbCiAgICAgICAgICAiIgogICAgICAgIF0sCiAgICAgICAgImZpZWxkMSI6ICIiLAogICAgICAgICJmaWVsZDIiOiAiIiwKICAgICAgICAiZmllbGQzIjogIiIsCiAgICAgICAgImZpZWxkNCI6ICIiLAogICAgICAgICJjaGFwdGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImNoYXBOYW1lIjogIiIsCiAgICAgICAgICAgICJvcGVuSW5XZWJWaWV3IjogZmFsc2UsCiAgICAgICAgICAgICJsaW5rIjogewogICAgICAgICAgICAgICJ1cmwiOiAiZW1wdHkiLAogICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImtleSI6ICJrZXkiLAogICAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0KICBdLAogICJjaGFwdGVycyI6IFsKICAgIHsKICAgICAgInJlcXVlc3QiOiB7CiAgICAgICAgInVybCI6ICIiLAogICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImtleSI6ICJrZXkiLAogICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgIH0sCiAgICAgICJleHRyYSI6IHsKICAgICAgICAiY29tbWFuZHMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb21tYW5kTmFtZSI6ICIiLAogICAgICAgICAgICAicGFyYW1zIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZXh0cmFJbmZvIjogWwogICAgICAgICAgewogICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICAiamF2YXNjcmlwdENvbmZpZyI6IHsKICAgICAgICAicmVtb3ZlSmF2YXNjcmlwdCI6IHRydWUsCiAgICAgICAgImxvYWRJbldlYlZpZXciOiBmYWxzZSwKICAgICAgICAiamF2YVNjcmlwdCI6ICIgZnVuY3Rpb24gQ2hhcHRlcnMocmVxdWVzdCwgZXh0cmEsIGphdmFzY3JpcHRDb25maWcsIG91dHB1dCkgeyB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0OyB0aGlzLmV4dHJhID0gZXh0cmE7IHRoaXMuamF2YXNjcmlwdENvbmZpZyA9IGphdmFzY3JpcHRDb25maWc7IHRoaXMub3V0cHV0ID0gb3V0cHV0OyB9IGZ1bmN0aW9uIE1vZHVsZVJlcXVlc3QodXJsLCBtZXRob2QsIGhlYWRlcnMsIGh0dHBCb2R5KSB7IHRoaXMudXJsID0gdXJsOyB0aGlzLm1ldGhvZCA9IG1ldGhvZDsgdGhpcy5oZWFkZXJzID0gaGVhZGVyczsgdGhpcy5odHRwQm9keSA9IGh0dHBCb2R5OyB9IGZ1bmN0aW9uIEV4dHJhKGNvbW1hbmRzLCBleHRyYUluZm8pIHsgdGhpcy5jb21tYW5kcyA9IGNvbW1hbmRzOyB0aGlzLmV4dHJhSW5mbyA9IGV4dHJhSW5mbzsgfSBmdW5jdGlvbiBDb21tYW5kcyhjb21tYW5kTmFtZSwgcGFyYW1zKSB7IHRoaXMuY29tbWFuZE5hbWUgPSBjb21tYW5kTmFtZTsgdGhpcy5wYXJhbXMgPSBwYXJhbXM7IH0gZnVuY3Rpb24gSmF2YXNjcmlwdENvbmZpZyhyZW1vdmVKYXZhc2NyaXB0LCBsb2FkSW5XZWJWaWV3LCBqYXZhU2NyaXB0KSB7IHRoaXMucmVtb3ZlSmF2YXNjcmlwdCA9IHJlbW92ZUphdmFzY3JpcHQ7IHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7IHRoaXMuamF2YVNjcmlwdCA9IGphdmFTY3JpcHQ7IH0gZnVuY3Rpb24gS2V5VmFsdWUoa2V5LCB2YWx1ZSkgeyB0aGlzLmtleSA9IGtleTsgdGhpcy52YWx1ZSA9IHZhbHVlOyB9IGZ1bmN0aW9uIE91dHB1dCggdmlkZW9zLCBpbWFnZXMsIHRleHQpIHsgdGhpcy52aWRlb3MgPSB2aWRlb3M7IHRoaXMuaW1hZ2VzID0gaW1hZ2VzOyB0aGlzLnRleHQgPSB0ZXh0OyB9IGZ1bmN0aW9uIFZpZGVvcyhuZWVkc1Jlc29sdmVyLCByYXdWaWRlbykgeyB0aGlzLm5lZWRzUmVzb2x2ZXIgPSBuZWVkc1Jlc29sdmVyOyB0aGlzLnJhd1ZpZGVvID0gcmF3VmlkZW87IH0gZnVuY3Rpb24gTmVlZHNSZXNvbHZlcihyZXNvbHZlcklkZW50aWZpZXIsIGxpbmspIHsgdGhpcy5yZXNvbHZlcklkZW50aWZpZXIgPSByZXNvbHZlcklkZW50aWZpZXI7IHRoaXMubGluayA9IGxpbms7IH0gZnVuY3Rpb24gUmF3VmlkZW8odmlkZW8pIHsgdGhpcy52aWRlbyA9IHZpZGVvOyB9IGZ1bmN0aW9uIFZpZGVvKHZpZGVvUXVhbGl0eSwgdmlkZW9MaW5rKSB7IHRoaXMudmlkZW9RdWFsaXR5ID0gdmlkZW9RdWFsaXR5OyB0aGlzLnZpZGVvTGluayA9IHZpZGVvTGluazsgfSBmdW5jdGlvbiBUZXh0KHRleHQpIHsgdGhpcy50ZXh0ID0gdGV4dDsgfSB2YXIgb3V0cHV0ID0gW107IHZhciBzYXZlZERhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna2V0c3UtZmluYWwtZGF0YScpOyB2YXIgcGFyc2VkSnNvbiA9IEpTT04ucGFyc2Uoc2F2ZWREYXRhLmlubmVySFRNTCk7IHZhciBlbXB0eUtleVZhbHVlID0gW25ldyBLZXlWYWx1ZSgnJywgJycpXTsgbGV0IGVtcHR5RXh0cmEgPSBuZXcgRXh0cmEoW25ldyBDb21tYW5kcygnJywgZW1wdHlLZXlWYWx1ZSldLCBlbXB0eUtleVZhbHVlKTsgdmFyIGNoYXB0ZXJzT2JqZWN0ID0gbmV3IENoYXB0ZXJzKG5ldyBNb2R1bGVSZXF1ZXN0KCcnLCAnJywgZW1wdHlLZXlWYWx1ZSwgbnVsbCksIGVtcHR5RXh0cmEsIG5ldyBKYXZhc2NyaXB0Q29uZmlnKGZhbHNlLCBmYWxzZSwgJycpLCBuZXcgT3V0cHV0KG5ldyBWaWRlb3MobnVsbCwgb3V0cHV0KSwgbnVsbCwgbnVsbCkpOyB2YXIgZmluYWxKc29uID0gSlNPTi5zdHJpbmdpZnkoY2hhcHRlcnNPYmplY3QpOyBzYXZlZERhdGEuaW5uZXJIVE1MID0gZmluYWxKc29uOyIKICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidmlkZW9zIjogewogICAgICAgICAgIm5lZWRzUmVzb2x2ZXIiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicmVzb2x2ZXJJZGVudGlmaWVyIjogIiIsCiAgICAgICAgICAgICAgImxpbmsiOiB7CiAgICAgICAgICAgICAgICAidXJsIjogIiIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJrZXkiOiAia2V5IiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInJhd1ZpZGVvIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInZpZGVvIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAidmlkZW9RdWFsaXR5IjogIiIsCiAgICAgICAgICAgICAgICAgICJ2aWRlb0xpbmsiOiB7CiAgICAgICAgICAgICAgICAgICAgInVybCI6ICJodHRwOi8vY29tbW9uZGF0YXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZ3R2LXZpZGVvcy1idWNrZXQvc2FtcGxlL0JpZ0J1Y2tCdW5ueS5tcDQiLAogICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgImtleSI6ICJrZXkiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJpbWFnZXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cmwiOiAiZW1wdHkiLAogICAgICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgICAgICJoZWFkZXJzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJrZXkiOiAia2V5IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJ2YWx1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJodHRwQm9keSI6IG51bGwKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0ZXh0IjogewogICAgICAgICAgInRleHQiOiAiIgogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgIm1vZHVsZVJlc29sdmVycyI6IFsKICAgIHsKICAgICAgInJlc29sdmVySW5mbyI6IHsKICAgICAgICAicmVzb2x2ZXJOYW1lIjogIiIsCiAgICAgICAgIm5hbWVNYXRjaGVzIjogWwogICAgICAgICAgIiIKICAgICAgICBdLAogICAgICAgICJkZXZlbG9wZXIiOiAiIiwKICAgICAgICAibW9kdWxlSUQiOiAiIiwKICAgICAgICAicmVzb2x2ZXJWZXJzaW9uIjogMSwKICAgICAgICAiYmFzZVVSTCI6ICIiCiAgICAgIH0sCiAgICAgICJyZXNvbHZlciI6IFsKICAgICAgICB7CiAgICAgICAgICAicmVxdWVzdCI6IHsKICAgICAgICAgICAgInVybCI6ICIiLAogICAgICAgICAgICAibWV0aG9kIjogImdldCIsCiAgICAgICAgICAgICJoZWFkZXJzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJrZXkiOiAia2V5IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJ2YWx1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJodHRwQm9keSI6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICAiZXh0cmEiOiB7CiAgICAgICAgICAgICJjb21tYW5kcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29tbWFuZE5hbWUiOiAiIiwKICAgICAgICAgICAgICAgICJwYXJhbXMiOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImV4dHJhSW5mbyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAia2V5IjogIiIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJqYXZhc2NyaXB0Q29uZmlnIjogewogICAgICAgICAgICAicmVtb3ZlSmF2YXNjcmlwdCI6IGZhbHNlLAogICAgICAgICAgICAibG9hZEluV2ViVmlldyI6IGZhbHNlLAogICAgICAgICAgICAiamF2YVNjcmlwdCI6ICJmdW5jdGlvbiBSZXNvbHZlciAoIHJlcXVlc3QsIGV4dHJhLCBqYXZhc2NyaXB0Q29uZmlnLCBvdXRwdXQgKSB7IHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7IHRoaXMuZXh0cmEgPSBleHRyYTsgdGhpcy5qYXZhc2NyaXB0Q29uZmlnID0gamF2YXNjcmlwdENvbmZpZzsgdGhpcy5vdXRwdXQgPSBvdXRwdXQ7fWZ1bmN0aW9uIE1vZHVsZVJlcXVlc3QgKCB1cmwsIG1ldGhvZCwgaGVhZGVycywgaHR0cEJvZHkgKSB7IHRoaXMudXJsID0gdXJsOyB0aGlzLm1ldGhvZCA9IG1ldGhvZDsgdGhpcy5oZWFkZXJzID0gaGVhZGVyczsgdGhpcy5odHRwQm9keSA9IGh0dHBCb2R5O31mdW5jdGlvbiBFeHRyYSAoIGNvbW1hbmRzLCBleHRyYUluZm8gKSB7IHRoaXMuY29tbWFuZHMgPSBjb21tYW5kczsgdGhpcy5leHRyYUluZm8gPSBleHRyYUluZm87fWZ1bmN0aW9uIENvbW1hbmRzICggY29tbWFuZE5hbWUsIHBhcmFtcyApIHsgdGhpcy5jb21tYW5kTmFtZSA9IGNvbW1hbmROYW1lOyB0aGlzLnBhcmFtcyA9IHBhcmFtczt9ZnVuY3Rpb24gSmF2YXNjcmlwdENvbmZpZyAoIHJlbW92ZUphdmFzY3JpcHQsIGxvYWRJbldlYlZpZXcsIGphdmFTY3JpcHQgKSB7IHRoaXMucmVtb3ZlSmF2YXNjcmlwdCA9IHJlbW92ZUphdmFzY3JpcHQ7IHRoaXMubG9hZEluV2ViVmlldyA9IGxvYWRJbldlYlZpZXc7IHRoaXMuamF2YVNjcmlwdCA9IGphdmFTY3JpcHQ7fWZ1bmN0aW9uIEtleVZhbHVlICgga2V5LCB2YWx1ZSApIHsgdGhpcy5rZXkgPSBrZXk7IHRoaXMudmFsdWUgPSB2YWx1ZTt9ZnVuY3Rpb24gT3V0cHV0ICggdmlkZW8gKSB7IHRoaXMudmlkZW8gPSB2aWRlbzt9ZnVuY3Rpb24gVmlkZW8gKCB2aWRlb1F1YWxpdHksIHZpZGVvTGluayApIHsgdGhpcy52aWRlb1F1YWxpdHkgPSB2aWRlb1F1YWxpdHk7IHRoaXMudmlkZW9MaW5rID0gdmlkZW9MaW5rO31mdW5jdGlvbiBnZXROZXh0ICggbWF0Y2gsIGFycmF5ICkgeyBmb3IgKCB2YXIgeCA9IDA7IHggPCBhcnJheS5sZW5ndGg7IHgrKyApIHsgbGV0IG1NYXRjaCA9IGFycmF5WyB4IF07IGlmICggbU1hdGNoLmluY2x1ZGVzKCBtYXRjaCApICkgeyByZXR1cm4gYXJyYXlbIHggKyAxIF07IH0gfX12YXIgc2F2ZWREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICdrZXRzdS1maW5hbC1kYXRhJyApO3ZhciBwYXJzZWRKc29uID0gSlNPTi5wYXJzZSggc2F2ZWREYXRhLmlubmVySFRNTCApO3ZhciBlbXB0eUtleVZhbHVlID0gWyBuZXcgS2V5VmFsdWUoICdSZWZlcmVyJywgcGFyc2VkSnNvbi5yZXF1ZXN0LnVybCApIF07dmFyIHZpZGVvcyA9IFsgXTtsZXQgZW1wdHlFeHRyYSA9IG5ldyBFeHRyYSggWyBuZXcgQ29tbWFuZHMoICcnLCBlbXB0eUtleVZhbHVlICkgXSwgZW1wdHlLZXlWYWx1ZSApO3ZhciBjaGFwdGVyc09iamVjdCA9IG5ldyBSZXNvbHZlciggbmV3IE1vZHVsZVJlcXVlc3QoICcnLCAnJywgZW1wdHlLZXlWYWx1ZSwgbnVsbCApLCBlbXB0eUV4dHJhLCBuZXcgSmF2YXNjcmlwdENvbmZpZyggZmFsc2UsIGZhbHNlLCAnJyApLCBuZXcgT3V0cHV0KCB2aWRlb3MgKSApO3ZhciBmaW5hbEpzb24gPSBKU09OLnN0cmluZ2lmeSggY2hhcHRlcnNPYmplY3QgKTtzYXZlZERhdGEuaW5uZXJIVE1MID0gZmluYWxKc29uOyIKICAgICAgICAgIH0sCiAgICAgICAgICAib3V0cHV0IjogewogICAgICAgICAgICAibW9kdWxlSUQiOiAiIiwKICAgICAgICAgICAgInZpZGVvIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ2aWRlb1F1YWxpdHkiOiAiNzIwIiwKICAgICAgICAgICAgICAgICJ2aWRlb0xpbmsiOiB7CiAgICAgICAgICAgICAgICAgICJ1cmwiOiAiaHR0cDovL2NvbW1vbmRhdGFzdG9yYWdlLmdvb2dsZWFwaXMuY29tL2d0di12aWRlb3MtYnVja2V0L3NhbXBsZS9CaWdCdWNrQnVubnkubXA0IiwKICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiLAogICAgICAgICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAia2V5IjogImtleSIsCiAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAicmVzcG9uc2VDb2RlRnVuY3Rpb25zIjogWwogICAgewogICAgICAiY29kZSI6IDAsCiAgICAgICJtc2dUaXRsZSI6ICIiLAogICAgICAibXNnQm9keSI6ICIiLAogICAgICAidHlwZSI6ICJub3JtYWwiLAogICAgICAiZnVuY3Rpb25zIjogWwogICAgICAgIHsKICAgICAgICAgICJyZXF1ZXN0IjogewogICAgICAgICAgICAidXJsIjogImVtcHR5IiwKICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiLAogICAgICAgICAgICAiaGVhZGVycyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAia2V5IjogImtleSIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAidmFsdWUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaHR0cEJvZHkiOiBudWxsCiAgICAgICAgICB9LAogICAgICAgICAgImV4dHJhIjogewogICAgICAgICAgICAiY29tbWFuZHMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbW1hbmROYW1lIjogIiIsCiAgICAgICAgICAgICAgICAicGFyYW1zIjogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJleHRyYUluZm8iOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImtleSI6ICIiLAogICAgICAgICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAiamF2YXNjcmlwdENvbmZpZyI6IHsKICAgICAgICAgICAgInJlbW92ZUphdmFzY3JpcHQiOiB0cnVlLAogICAgICAgICAgICAibG9hZEluV2ViVmlldyI6IGZhbHNlLAogICAgICAgICAgICAiamF2YVNjcmlwdCI6ICIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAiaGVscGVyRnVuY3Rpb25zIjogWwogICAgewogICAgICAiZnVuY3Rpb25OYW1lIjogImV4YW1wbGUiLAogICAgICAibXNnVGl0bGUiOiAiIiwKICAgICAgIm1zZ0JvZHkiOiAiIiwKICAgICAgInR5cGUiOiAibm9ybWFsIiwKICAgICAgImZ1bmN0aW9ucyI6IFsKICAgICAgICB7CiAgICAgICAgICAicmVxdWVzdCI6IHsKICAgICAgICAgICAgInVybCI6ICJlbXB0eSIsCiAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IiwKICAgICAgICAgICAgImhlYWRlcnMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImtleSI6ICJrZXkiLAogICAgICAgICAgICAgICAgInZhbHVlIjogInZhbHVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImh0dHBCb2R5IjogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgICJleHRyYSI6IHsKICAgICAgICAgICAgImNvbW1hbmRzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb21tYW5kTmFtZSI6ICIiLAogICAgICAgICAgICAgICAgInBhcmFtcyI6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiZXh0cmFJbmZvIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJrZXkiOiAiIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgImphdmFzY3JpcHRDb25maWciOiB7CiAgICAgICAgICAgICJyZW1vdmVKYXZhc2NyaXB0IjogdHJ1ZSwKICAgICAgICAgICAgImxvYWRJbldlYlZpZXciOiBmYWxzZSwKICAgICAgICAgICAgImphdmFTY3JpcHQiOiAiIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgXQogICAgfQogIF0KfQo="}.apply(e,[i,e]),void 0===o||(t.exports=o)},9045:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(3983),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ClickCellController=void 0,n=l(n);var s=function(t){function e(e,i,n){var s=t.call(this,o.clickCellView)||this;return s.didSelect=n,s.enalbed=i,s.data=e,s}return r(e,t),e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),(0,n.default)("[".concat(this.id,"] .title")).html(this.data.title),(0,n.default)("[".concat(this.id,"] .message")).html(this.data.message),this.updateSelectedClass(),(0,n.default)("[".concat(this.id,"]")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),e.enalbed=!e.enalbed,null!=e.didSelect&&e.didSelect(e.enalbed)&&e.updateSelectedClass()}))},e.prototype.updateSelectedClass=function(){this.enalbed?(0,n.default)("[".concat(this.id,"]")).addClass("selected"):(0,n.default)("[".concat(this.id,"]")).removeClass("selected")},e.prototype.finish=function(){(0,n.default)("[".concat(this.id,"]")).off(),t.prototype.finish.call(this)},e}(i.UICollectionViewCell);e.ClickCellController=s}.apply(e,o),void 0===n||(t.exports=n)},6254:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__awaiter||function(t,e,i,o){return new(i||(i=Promise))((function(n,s){function r(t){try{a(o.next(t))}catch(t){s(t)}}function l(t){try{a(o.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,l)}a((o=o.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var i,o,n,s,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function l(s){return function(l){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,o&&(n=2&s[0]?o.return:s[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,s[1])).done)return n;switch(o=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return r.label++,{value:s[1],done:!1};case 5:r.label++,o=s[1],s=[0];continue;case 7:s=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){r=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){r.label=s[1];break}if(6===s[0]&&r.label<n[1]){r.label=n[1],n=s;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(s);break}n[2]&&r.ops.pop(),r.trys.pop();continue}s=e.call(t,r)}catch(t){s=[6,t],o=0}finally{i=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},c=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(1582),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JSLogsCellController=void 0,n=c(n);var s=function(t){function e(e,i){void 0===i&&(i=!1);var n=t.call(this,o.jsLogsCellView)||this;return n.string=e,n.error=i,n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setData()},e.prototype.setData=function(){return l(this,void 0,void 0,(function(){return a(this,(function(t){return(0,n.default)("[".concat(this.id,"]")).addClass([this.returnClass("error",this.error)]),(0,n.default)("[".concat(this.id,"] .title")).text(this.string),[2]}))}))},e.prototype.returnClass=function(t,e){return e?t:""},e.prototype.finish=function(){t.prototype.finish.call(this)},e}(i.UICollectionViewCell);e.JSLogsCellController=s}.apply(e,o),void 0===n||(t.exports=n)},8699:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(4449),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LogsCellController=void 0,n=l(n);var s=function(t){function e(e,i,n,s,r,l){void 0===n&&(n=!1),void 0===s&&(s=!1),void 0===r&&(r=!1),void 0===l&&(l=!1);var a=t.call(this,o.logsCellView)||this;return a.didClick=i,a.isSelected=r,a.title=e,a.isError=n,a.isSelectable=s,a.arrow=l,a}return r(e,t),e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),(0,n.default)("[".concat(this.id,"]")).addClass([this.returnClass("selected",this.isSelected),this.returnClass("error",this.isError),this.returnClass("selectable",this.isSelectable),this.returnClass("arrow",this.arrow)]),(0,n.default)("[".concat(this.id,"] .title")).text(this.title),(0,n.default)("[".concat(this.id,"]")).off().on("click",(function(t){t.preventDefault(),t.stopImmediatePropagation(),null!=e.didClick&&e.didClick()}))},e.prototype.returnClass=function(t,e){return e?t:""},e.prototype.finish=function(){(0,n.default)("[".concat(this.id,"]")).off(),t.prototype.finish.call(this)},e}(i.UICollectionViewCell);e.LogsCellController=s}.apply(e,o),void 0===n||(t.exports=n)},9072:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9990),i(4542),i(9755)],n=function(t,e,i,o,n){"use strict";var s;Object.defineProperty(e,"__esModule",{value:!0}),e.ParamEditorCellController=e.dataType=void 0,n=l(n),(s=e.dataType||(e.dataType={}))[s.string=0]="string",s[s.int=1]="int",s[s.stringArray=2]="stringArray";var a=function(t){function e(e,o,n,s,r,l,a){void 0===o&&(o=void 0),void 0===a&&(a=i.paramEditorCellView);var c=t.call(this,a)||this;return console.log(n),c.value=n,c.valueChanged=r,c.finishedEditing=l,c.title=e,c.message=o,c.tinted=s,null!=o?c.message+="<br>":c.message="",c.message+=c.getPlaceholderString(),c}return r(e,t),e.prototype.getPlaceholderString=function(){return"string"==typeof this.value?"This field allows any character.":"number"==typeof this.value?"This field allows numbers and decimals, use . to indicate the decimals.":"boolean"==typeof this.value?"This field only allows either true | flase":Array.isArray(this.value)?"This field is a list, separate the values with comas.":""},e.prototype.viewWasInserted=function(){var e,i=this;t.prototype.viewWasInserted.call(this),this.tinted&&(0,n.default)("[".concat(this.id,"]")).addClass("bg-secondary"),(0,n.default)("[".concat(this.id,"] .title")).text(window.mApp.utils.capitalizeFirstLetter(this.title.replace(/([A-Z][a-z])/g," $1").trim())),(0,n.default)("[".concat(this.id,"] .message")).html(null!==(e=this.message)&&void 0!==e?e:""),(0,n.default)("[".concat(this.id,"] input")).attr("placeholder",this.getPlaceholderString()),(0,n.default)("[".concat(this.id,"] input")).val("".concat(this.value)),(0,n.default)("[".concat(this.id,"] input")).off().on("input",(function(t){var e,o,s,r,l=null!==(s=null===(o=null===(e=(0,n.default)(t.target))||void 0===e?void 0:e.val())||void 0===o?void 0:o.toString())&&void 0!==s?s:"";"string"==typeof i.value&&(i.value=l),"number"==typeof i.value&&(i.value=null!==(r=window.mApp.utils.getNumberFromString(l))&&void 0!==r?r:0),"boolean"==typeof i.value&&(i.value="true"==l.toLowerCase()),Array.isArray(i.value)&&(i.value=l.split(",")),null!=i.valueChanged&&i.valueChanged(i.value)})),(0,n.default)("[".concat(this.id,"] input")).on("focus",(function(t){(0,n.default)("[".concat(i.id,"] input")).attr("placeholder","")})),(0,n.default)("[".concat(this.id,"] input")).on("blur",(function(t){(0,n.default)("[".concat(i.id,"] input")).attr("placeholder",i.getPlaceholderString())}))},e.prototype.finish=function(){(0,n.default)("[".concat(this.id,"] input")).off(),this.valueChanged=void 0,this.finishedEditing=void 0,t.prototype.finish.call(this)},e}(o.UICollectionViewCell);e.ParamEditorCellController=a}.apply(e,o),void 0===n||(t.exports=n)},6266:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(4542),i(1132),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SectionCellController=void 0,n=l(n);var s=function(t){function e(e,i){void 0===i&&(i=o.sectionCellView);var n=t.call(this,i)||this;return n.title=e,n}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),(0,n.default)("[".concat(this.id,"] .title")).text(this.title)},e}(i.UICollectionViewCell);e.SectionCellController=s}.apply(e,o),void 0===n||(t.exports=n)},936:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(3369),i(4580),i(1166)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsCellController=e.settingsControllerView=void 0,n=l(n),e.settingsControllerView='<div $id> \n\n    <div $idviews class="fill-absolute"> \n    \n    \n    </div>\n    \n\n</div>';var s=function(t){function n(i,n,s){void 0===n&&(n=window.mApp.utils.makeId()),void 0===s&&(s=e.settingsControllerView);var r=t.call(this,n,s)||this;return r.cells=[],r.insertViewsDefault=new o.InsertedViewData(r.id,"$idviews"),r.cells=i,r}return r(n,t),n.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},n.prototype.setUp=function(){t.prototype.setUp.call(this);var e=new i.UICollectionView;return this.collectionView=e.id,e.dataSourceDelegate=this,this.insertNewView(new o.InsertedViewData(e.id,void 0)),e.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),null!=this.interceptCollectionView&&this.interceptCollectionView(e),e.reloadData(),this},n.prototype.getCollectionView=function(){return this.getView(this.collectionView)},n.prototype.cvNumberOfItemsInSection=function(t,e){return this.cells.length},n.prototype.cvNumberOfSections=function(t){return 1},n.prototype.cvCellForItemAt=function(t,e){return this.getView(this.cells[e.item])},n.prototype.cvCellForSectionAt=function(t,e,i){},n.prototype.getSeparator=function(t,e){},n.prototype.finish=function(){this.interceptCollectionView=void 0,t.prototype.finish.call(this)},n}(n.default);e.SettingsCellController=s}.apply(e,o),void 0===n||(t.exports=n)},1795:function(t,e,i){var o,n,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(9755)],n=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Utils=void 0,i=s(i);var o=function(){function t(){}return t.prototype.deepCopy=function(t){var e=this;return Array.isArray(t)?t.map((function(t){return e.deepCopy(t)})):t instanceof Date?new Date(t.getTime()):t&&"object"==typeof t?Object.getOwnPropertyNames(t).reduce((function(i,o){return Object.defineProperty(i,o,Object.getOwnPropertyDescriptor(t,o)),i[o]=e.deepCopy(t[o]),i}),Object.create(Object.getPrototypeOf(t))):t},t.prototype.makeId=function(t){void 0===t&&(t=20);for(var e="",i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",o=i.length,n=0;n<t;n++)e+=i.charAt(Math.floor(Math.random()*o));return e},t.prototype.getPath=function(t,e){var i,o;return null!==(o=null===(i=this.getPathString(t,e))||void 0===i?void 0:i.split("."))&&void 0!==o?o:[]},t.prototype.getPathString=function(t,e){if(!e||"object"!=typeof e)return"";for(var i=Object.keys(e),o=0;o<i.length;o++){if(i[o]===t)return t;var n=this.getPathString(t,e[i[o]]);if(n)return i[o]+"."+n}return""},t.prototype.getObjectFromPath=function(t,e){var i=e;return t.forEach((function(t){""!=t&&(i=i[t])})),i},t.prototype.setObjectFromPath=function(t,e){var i=e;return t.forEach((function(t){""!=t&&(i=i[t])})),i},t.prototype.getValueForKey=function(t,e){if(e&&"object"==typeof e)for(var i=Object.keys(e),o=0;o<i.length;o++){if(i[o]===t)return e[t];var n=this.getValueForKey(t,e[i[o]]);if(n)return n}},t.prototype.getKeysThatMatch=function(t,e,i){var o;void 0===i&&(i=[]);var n=i;if(!e||"object"!=typeof e)return n;for(var s=Object.keys(e),r=0;r<s.length;r++)s[r].includes(t)&&n.push(s[r]),null===(o=this.getKeysThatMatch(t,e[s[r]],[]))||void 0===o||o.forEach((function(t){n.push(t)}));return n},t.prototype.getPathsThatMatchKey=function(t,e,i){void 0===e&&(e=[]);var o=[];if(!i||"object"!=typeof i)return o;for(var n=Object.keys(i),s=0;s<n.length;s++){if(n[s].includes(t)){var r=this.deepCopy(e);r.push(n[s]),o.push(r)}var l=this.deepCopy(e);l.push(n[s]),this.getPathsThatMatchKey(t,l,i[n[s]]).forEach((function(t){o.push(t)}))}return o},t.prototype.removeKeysThatMatch=function(t,e){if(e&&"object"==typeof e)for(var i=Object.keys(e),o=0;o<i.length;o++)i[o].includes(t)&&delete e[i[o]],this.removeKeysThatMatch(t,e[i[o]])},t.prototype.getNumberFromString=function(t){if(""!=t){var e=Number(t);if(!Number.isNaN(e))return e}},t.prototype.deleteFromArray=function(t,e){-1!==t&&e.splice(t,1)},t.prototype.addMissingObjectKeys=function(t,e){Object.keys(e).forEach((function(i){i in t||(t[i]=e[i])}))},t.prototype.capitalizeFirstLetter=function(t){return t.charAt(0).toUpperCase()+t.slice(1)},t.prototype.windowSize=function(){var t,e;return{width:null!==(t=(0,i.default)(window).width())&&void 0!==t?t:0,height:null!==(e=(0,i.default)(window).height())&&void 0!==e?e:0}},t.prototype.getCenter=function(t){return{x:t.x+t.width/2,y:t.y+t.height/2}},t.prototype.getFrameFromElement=function(t){var e,o,n,s,r,l,a=(0,i.default)(t);return{x:null!==(o=null===(e=a.offset())||void 0===e?void 0:e.left)&&void 0!==o?o:0,y:null!==(s=null===(n=a.offset())||void 0===n?void 0:n.top)&&void 0!==s?s:0,width:null!==(r=a.width())&&void 0!==r?r:0,height:null!==(l=a.height())&&void 0!==l?l:0}},t.prototype.isInViewport=function(t){var e,o,n,s,r,l=null!==(o=null===(e=t.offset())||void 0===e?void 0:e.top)&&void 0!==o?o:0,a=l+(null!==(n=t.outerHeight())&&void 0!==n?n:0),c=null!==(s=(0,i.default)(window).scrollTop())&&void 0!==s?s:0,d=c+(null!==(r=(0,i.default)(window).height())&&void 0!==r?r:0);return a>c&&l<d},t.prototype.getImageUrl=function(t){return"./images/".concat(t)},t.prototype.prepend=function(t,e){return e.slice().unshift(t)},t.prototype.isSafari=function(){var t=navigator.userAgent.toLowerCase();return-1==t.indexOf("safari")||!(t.indexOf("chrome")>-1)},t.prototype.isChrome=function(){var t=navigator.userAgent.toLowerCase();return-1!=t.indexOf("safari")&&t.indexOf("chrome")>-1},t}();e.Utils=o}.apply(e,o),void 0===n||(t.exports=n)},4580:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InsertedViewData=void 0;var i=function(){function t(t,e){this.view=t,this.htmlTag=e}return t.prototype.getView=function(){if(null!=this.view)return window.mApp.views.get(this.view)},t.prototype.getTag=function(){var t,e=null===(t=this.getView())||void 0===t?void 0:t.id;return null==e&&(e=""),null!=this.htmlTag?this.htmlTag.replace(/\$id/gi,e):null!=this.view?this.view.replace(/\$id/gi,e):""},t}();e.InsertedViewData=i}.apply(e,[i,e]),void 0===o||(t.exports=o)},1166:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(3693),i(2872),i(4580),i(9755)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),o=l(o),s=l(s);var a=function(t){function e(e,o){void 0===e&&(e=window.mApp.utils.makeId()),void 0===o&&(o=i.basicHtml);var n,s=this;return(s=t.call(this)||this).insertedViews=[],s.limitBounds={height:{min:0,max:9999999},width:{min:0,max:9999999}},s.viewName="",s.viewImageRoute="",s.insertedFlag=!1,s.isHiddenFlag=!1,s.id=e,s.html=null!=o?null==o?void 0:o.replace(/\$id/gi,e):null===(n=s.html)||void 0===n?void 0:n.replace(/\$id/gi,e),window.mApp.views.set(e,s),s.viewWasCreated(),s}return r(e,t),e.prototype.setInsertDefaultViews=function(){return this.insertViewsDefault=new n.InsertedViewData(this.id,"$idviews"),this},e.prototype.insertNewView=function(t){var e,i,o=t.getView();return null==this.html&&null!=o?(this.insertedFlag=!1,!1):(null==t.htmlTag&&(t.htmlTag=null!==(i=null===(e=this.insertViewsDefault)||void 0===e?void 0:e.getTag())&&void 0!==i?i:this.id),this.insertedViews.push(t),null==o||o.insertInto(new n.InsertedViewData(this.id,t.htmlTag)),!0)},e.prototype.insertInto=function(t){var e=this.parseHtml();return null==(e=this.htmlInsertionInterceptor(e))?(this.insertedFlag=!1,!1):(this.insertedInto=t,document.querySelector("[".concat(t.getTag(),"]")).append(e),this.insertedFlag=!0,this.viewWasInserted(),null!=this.viewWasInsertedCallback&&this.viewWasInsertedCallback(this.id),!0)},e.prototype.viewWasInserted=function(){},e.prototype.viewWasCreated=function(){},e.prototype.replaceView=function(t){},e.prototype.setUp=function(){return t.prototype.setUp.call(this),this},e.prototype.setData=function(){},e.prototype.setFrame=function(t){(0,s.default)("[".concat(this.id,"]")).css({position:"absolute",top:"".concat(t.y),left:"".concat(t.y),width:"".concat(t.width),height:"".concat(t.height),bottom:"",right:""})},e.prototype.setConstraints=function(t){var e,i,o,n,r,l;(0,s.default)("[".concat(this.id,"]")).css({position:"absolute",top:"".concat(null!==(e=t.top)&&void 0!==e?e:""),right:"".concat(null!==(i=t.right)&&void 0!==i?i:""),bottom:"".concat(null!==(o=t.bottom)&&void 0!==o?o:""),left:"".concat(null!==(n=t.left)&&void 0!==n?n:""),width:"".concat(null!==(r=t.width)&&void 0!==r?r:""),height:"".concat(null!==(l=t.height)&&void 0!==l?l:"")})},e.prototype.clipToParent=function(){this.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"})},e.prototype.style=function(t,e){void 0===e&&(e=void 0),(0,s.default)("[".concat(this.id,"] ").concat(null!=e?e:"")).css(t)},e.prototype.setLimitBounds=function(t){this.limitBounds=t},e.prototype.htmlInsertionInterceptor=function(t){return t},e.prototype.getSize=function(){var t,e,i=(0,s.default)("[".concat(this.id,"]"));return{width:null!==(t=i.width())&&void 0!==t?t:0,height:null!==(e=i.height())&&void 0!==e?e:0}},e.prototype.getFrame=function(t){var e,i,o,n,r,l;void 0===t&&(t="");var a=(0,s.default)("[".concat(this.id,"] ").concat(t));return{x:null!==(i=null===(e=a.offset())||void 0===e?void 0:e.left)&&void 0!==i?i:0,y:null!==(n=null===(o=a.offset())||void 0===o?void 0:o.top)&&void 0!==n?n:0,width:null!==(r=a.outerWidth())&&void 0!==r?r:0,height:null!==(l=a.outerHeight())&&void 0!==l?l:0}},e.prototype.deleteSubviews=function(){for(var t,e=0,i=this.insertedViews;e<i.length;e++)null===(t=i[e].getView())||void 0===t||t.finish()},e.prototype.finish=function(){var e,i=this;t.prototype.finish.call(this),(0,s.default)("[".concat(this.id,"]")).off(),(0,s.default)("[".concat(this.id,"]")).find("*").off(),this.insertedViews.forEach((function(t){var e;null===(e=t.getView())||void 0===e||e.finish()}));var o=null===(e=this.insertedInto.getView())||void 0===e?void 0:e.insertedViews;null!=o&&(this.insertedInto.getView().insertedViews=o.filter((function(t){t.view,i.insertedInto.view}))),this.viewWasInsertedCallback=void 0,this.removeHtmlOfView(),window.mApp.views.delete(this.id),delete window.mApp.moduleManager.moduleViewsExecutor[this.id],null!=this.viewWasFinishedCallback&&this.viewWasFinishedCallback(this.id),this.viewWasFinishedCallback=void 0},e.prototype.parseHtml=function(){var t;if(null!=this.html){var e=document.createElement("html");e.innerHTML=this.html;var i=null===(t=e.querySelector("body"))||void 0===t?void 0:t.firstElementChild;if(null!=i)return i}},e.prototype.isHidden=function(t){return void 0===t&&(t=void 0),null==t?this.isHiddenFlag:(this.isHiddenFlag=t,t?(0,s.default)("[".concat(this.id,"]")).css({display:"none"}):(0,s.default)("[".concat(this.id,"]")).css({display:""}),t)},e.prototype.getView=function(t){return window.mApp.views.get(t)},e.prototype.parentResized=function(t){},e.prototype.removeHtmlOfView=function(){(0,s.default)("[".concat(this.id,"]")).remove()},e.prototype.bringSubViewToTop=function(t){for(var e,i=!1,o=0,n=this.insertedViews;o<n.length;o++){var r=n[o];null!=r.view&&r.view==t&&(i=!0)}if(!i)return!1;var l=(0,s.default)("[".concat(t,"]")).parent(),a=(0,s.default)("[".concat(t,"]"));return null===(e=this.getView(t))||void 0===e||e.removeHtmlOfView(),l.append(a),!0},e.prototype.bringViewToTheTop=function(){var t=this.insertedInto.getView();return null!=t&&t.bringSubViewToTop(this.id)},e}(o.default);e.default=a}.apply(e,o),void 0===n||(t.exports=n)},8110:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(2938),i(4580),i(1166),i(9755)],n=function(t,e,i,o,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopUpView=void 0,n=l(n),s=l(s);var a=function(t){function e(e,o,n){void 0===o&&(o=window.mApp.utils.makeId()),void 0===n&&(n=i.viewPopUp);var s=t.call(this,o,n)||this;return s.canExit=!0,s.setInsertDefaultViews(),s.view=e,s}return r(e,t),e.prototype.disableExit=function(){this.canExit=!1},e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),this.insertNewView(new o.InsertedViewData(this.view,void 0));var i=this.getView(this.view);null!=i&&(i.viewWasFinishedCallback=function(t){e.finish()}),this.canExit&&(0,s.default)("[".concat(this.id,"]")).off().on("click",(function(t){var i;t.preventDefault(),t.stopImmediatePropagation();var o=null===(i=e.getView(e.view))||void 0===i?void 0:i.getFrame();null!=o&&(t.clientX<o.x||t.clientX>o.x+o.width||t.clientY<o.y||t.clientY>o.y+o.height)&&e.finish()}))},e.showPopUpViewOnBody=function(t,i){void 0===i&&(i=!0);var n=new e(t);return i||n.disableExit(),n.insertInto(new o.InsertedViewData(void 0,"body")),n.setConstraints({top:"0px",bottom:"0px",left:"0px",right:"0px"}),n.clipToParent(),n},e.prototype.finish=function(){(0,s.default)("[".concat(this.id,"]")).off();var e=this.getView(this.view);null!=e&&(e.viewWasFinishedCallback=void 0),t.prototype.finish.call(this)},e}(n.default);e.PopUpView=a}.apply(e,o),void 0===n||(t.exports=n)},5044:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1166),i(9755)],n=function(t,e,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SelectionView=void 0,i=l(i),o=l(o);var n=function(t){function e(e,i,o){var n=t.call(this,i,o)||this;return n.isSelectedFlag=!1,n.isSelectedFlag=e,n}return r(e,t),e.prototype.viewWasInserted=function(){this.addClickListener(),this.isSelectedWasSet(this.isSelectedFlag)},e.prototype.clickHandler=function(t){return t||!t},e.prototype.addClickListener=function(){var t=this;(0,o.default)("[".concat(this.id,"]")).off().on("click",(function(e){e.preventDefault(),e.stopImmediatePropagation(),t.isSelected(t.clickHandler(t.isSelectedFlag))}))},e.prototype.isSelectedWasSet=function(t){t?(0,o.default)("[".concat(this.id,"]")).addClass("selected"):(0,o.default)("[".concat(this.id,"]")).removeClass("selected")},e.prototype.isSelected=function(t,e){var i;return void 0===e&&(e=!0),null==t||(this.isSelectedFlag=t,this.isSelectedWasSet(this.isSelectedFlag),e&&(null===(i=this.selectedInterface)||void 0===i||i.viewWasSelected(this.id))),this.isSelectedFlag},e.prototype.finish=function(){this.selectedInterface=void 0,t.prototype.finish.call(this)},e}(i.default);e.SelectionView=n}.apply(e,o),void 0===n||(t.exports=n)},2265:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(952),i(1166),i(9755)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StateManagerController=void 0,o=l(o),n=l(n);var s=function(t){function e(e,o){var n=t.call(this,window.mApp.utils.makeId(),i.viewStateManager)||this;return n.canExit=!0,n.mInterface=o,n.title=e,n}return r(e,t),e.prototype.disableExit=function(){this.canExit=!1},e.prototype.viewWasInserted=function(){var e=this;t.prototype.viewWasInserted.call(this),(0,n.default)("[".concat(this.id,"] .title")).text(this.title),this.canExit?(0,n.default)("[".concat(this.id,"] .button")).off().on("click",(function(t){t.stopPropagation(),t.preventDefault(),null!=e.mInterface.finished&&e.mInterface.finished()})):(0,n.default)("[".concat(this.id,"] img")).css("display","none")},e.prototype.finish=function(){(0,n.default)("[".concat(this.id,"] .button")).off(),t.prototype.finish.call(this)},e}(o.default);e.StateManagerController=s}.apply(e,o),void 0===n||(t.exports=n)},5353:function(t,e,i){var o,n,s,r=this&&this.__extends||(s=function(t,e){return s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},s(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};o=[i,e,i(1882),i(4580),i(1166)],n=function(t,e,i,o,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ViewsHolder=void 0;var s=function(t){function e(e,n,s,r){void 0===r&&(r=i.viewDefaultViewsHolder);var l=t.call(this,e,r)||this;return l.availableViews=[],l.activeView="",l.availableViews=n,0==n.length||(l.activeView=null!=s?s:n[0],l.insertViewsDefault=new o.InsertedViewData(l.id,"$idviews")),l}return r(e,t),e.prototype.viewWasInserted=function(){t.prototype.viewWasInserted.call(this),this.setUp()},e.prototype.setUp=function(){var e=this;return t.prototype.setUp.call(this),this.availableViews.forEach((function(t){var i=e.getView(t);e.insertNewView(new o.InsertedViewData(t)),null==i||i.setConstraints({top:"0px",left:"0px",right:"0px",bottom:"0px"})})),this.showView(this.activeView),this},e.prototype.showView=function(t){for(var e,i,o=0,n=this.availableViews;o<n.length;o++){var s=n[o];t==s?null===(e=this.getView(s))||void 0===e||e.style({"z-index":"3"}):null===(i=this.getView(s))||void 0===i||i.style({"z-index":"1"})}},e}((n=l(n)).default);e.ViewsHolder=s}.apply(e,o),void 0===n||(t.exports=n)},7535:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewBaseGridElement=void 0,e.viewBaseGridElement='\n\n<div $id class="test-grid-element">\n\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},2069:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewBaseGridHSeparator=e.viewBaseGridVSeparator=void 0,e.viewBaseGridVSeparator='\n\n<div $id class="test-grid-v-separator">\n\n    \n\n    <div $idgrabber class="separator-transparent cursor">\n         <div  class="separator-hover bg-accent"></div>\n    </div>\n\n</div>\n',e.viewBaseGridHSeparator='\n\n<div $id class="test-grid-h-separator">\n\n<div $idgrabber class="separator-transparent cursor">\n        <div  class="separator-hover bg-accent"></div>\n</div>\n\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},6465:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewBaseGridHtml=void 0,e.viewBaseGridHtml='\n\n<div $id class="test-grid">\n\n\n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},371:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.KetsuLogsViewerView=void 0,e.KetsuLogsViewerView='\n\n\n\n<div $id class="ketsu-logs-viewer" >  \n\n        \n    <div class="nav-bar"> \n        \n        <div class="center-v-flex title"> \n\n        Logs\n        </div>\n\n        <div class="center-flex button pointer"> <img src="./images/arrow-bottom.png"></div>\n\n        \n    </div>\n\n\n    <div> \n        \n        <div $idviews class="fill-absolute cv"> \n\n        </div>\n    \n    </div>\n\n</div>\n\n\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9450:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.bottomStatusBarView=void 0,e.bottomStatusBarView='<div $id> \n\n    <div class="fill-absolute bottom-status"> \n\n        <div class="center-flex sockets"> <div class="center-flex"> <img src="./images/connected.png">  </div> <div class="one-line title">Connected</div> </div>\n\n        <div class="logs"></div>\n\n    </div>\n\n\n</div>'}.apply(e,[i,e]),void 0===o||(t.exports=o)},191:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CenterGridElementControllerView=void 0,e.CenterGridElementControllerView='\n    \n\n        <div $id class="center-grid-controller">\n\n        <div $idviews class="fill-absolute"> </div>\n\n        </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9726:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDropDownRequestType=e.viewDataRequestController=void 0,e.viewDataRequestController='\n<div $id class="data-request-controller">\n\n    <div  class="fill-absolute data-request-grid"> \n\n        <div $idnotification > \n        \n        </div>\n\n        <div> \n            <div class="fill-absolute">\n                <div class="input-holder "> \n                        <div class="input-grid "> \n                        <input class="request-input" placeholder="Type the url here.">\n                    <div id="requesttype" class="button center-flex pointer">GET</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div $idviews class="params"> \n        \n        \n        \n        </div>\n    \n    </div>\n\n</div>\n',e.viewDropDownRequestType='\n\n   <div $id >\n\n   <div class="fill-absolute"> \n   \n      <div class="dropdown-cell-requesttype">\n\n         <div class="title"> GET </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8959:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewHtmlHeaders=void 0,e.viewHtmlHeaders='\n\n<div $id class="bg-primary"> \n\n<div class="fill-absolute"> \n\n    <div class="headers-view"> \n\n    <table $idheadersTable >\n        <tr>\n        <th>\n        <div  class="key-holder"> \n            <div class="checkbox-holder"> \n            \n            </div>\n            <div class="relative elem-padding-equal-wide-only center-v-flex"> \n                Key\n            </div>\n        </div>\n        </th>\n        <th class="elem-padding-equal-wide-only">Value</th>\n        </tr>\n        <tr>\n        <td>\n            <div  class="key-holder"> \n                <div class="checkbox-holder"> \n\n                <input type=\'checkbox\' class="ignore center-absolute" checked >\n                </div>\n                <div class="relative"> \n                    <input class="input-header-key header-input" placeholder="Key">\n                </div>\n            </div>\n        </td>\n        <td class="relative">\n            <input class="input-header-value header-input" placeholder="Value">\n        </td>\n        </tr>\n \n    </table>\n    \n    </div>\n\n</div>\n\n\n</div>\n\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},4748:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.javascriptControllerView=void 0,e.javascriptControllerView='\n<div $id class="javascript-controller">\n\n<div $idviews class="fill-absolute"> </div>\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},5963:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.navBarView=void 0,e.navBarView='\n\n<div $id > \n\n    <div class="fill-absolute navbar-holder"> \n        <div class="one-line relative center-flex title">\n            MODULE CREATOR\n            <div class="beta">beta</div>\n        </div>\n        <div class="buttons-holder fill-absolute">\n            <div class="save button-holder center-v-flex"> <div class="test-button one-line">Save</div> </div>\n            <div class="export  button-holder center-v-flex"><div class="test-button">Export</div></div>\n        </div>\n\n    </div>\n\n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9434:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewRequestController=void 0,e.viewRequestController='\n    <div $id class="request-controller">\n\n        <div $idviews class="fill-absolute"> </div>\n\n    </div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},5141:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewRoute=void 0,e.viewRoute='\n<div $id >\n\n    <div class="fill-absolute route-view">\n        <div class="route-holder  center-v-flex">\n            <div class="route ">\n            \n            </div>\n        </div>\n   \n        <div class="execute-button loading center-flex one-line"> \n        <div class="spinner-holder"> </div> \n            <div class="title">Execute Chapters</div> \n        </div>\n     </div>\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},3693:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.basicHtml=void 0,e.basicHtml='\n\n<div $id>  <div $idviews class="fill-absolute"> \n\n\n\n</div></div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},1882:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDefaultViewsHolder=void 0,e.viewDefaultViewsHolder='\n    <div $id class="views-holder">\n\n        <div $idviews class="fill-absolute"> </div>\n\n    </div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},5446:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDefaultCollectionViewView=void 0,e.viewDefaultCollectionViewView='\n\n<div $id >\n\n    <div  class="fill-absolute"> \n\n        <div $idgrid class="collection-view"> \n        \n        </div>\n\n    </div>\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8509:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDefaultDropDownCell=void 0,e.viewDefaultDropDownCell='\n\n   <div $id >\n\n   <div class="fill-absolute"> \n   \n      <div class="default-dropdown-cell">\n\n         <div class="title"> title </div>\n      \n      </div>\n      \n   </div>\n\n\n   </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},1524:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDefaultElementModal=void 0,e.viewDefaultElementModal='\n\n<div $id > <div $idviews class="fill-absolute" > </div> </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8144:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewDefaultMenuSelectorCell2=e.viewDefaultMenuSelectorCell=e.viewDefaultMenuSelector=void 0,e.viewDefaultMenuSelector='\n<div $id class="default-menu-selector">\n\n<div $idviews class="fill-absolute"> </div>\n\n\n</div>\n',e.viewDefaultMenuSelectorCell='\n<div $id class="default-menu-selector-cell pointer">\n\n    <div class="fill-absolute center-flex"> \n        <div class="one-line">Hello world</div>\n    </div>\n\n    <div class="selected-overflow"></div>\n</div>\n',e.viewDefaultMenuSelectorCell2='\n<div $id class="default-menu-selector-cell-2 pointer">\n\n    <div class="fill-absolute center-flex"> \n        <div class="one-line">Hello world</div>\n    </div>\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},952:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewStateManager=void 0,e.viewStateManager='\n\n<div $id> \n    <div class="fill-absolute view-state-manager"> \n\n    <div class="title center-v-flex">This is the title of the widnow</div>\n    <div class="button center-flex">  <img src="./images/close-button.png">   </div>\n\n    </div>\n</div>\n\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8166:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuGridElView=void 0,e.leftMenuGridElView='\n\n<div $id class="left-menu-grid-element left-menu-big">\n\n\n\n\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8130:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuMenuViewerView=void 0,e.leftMenuMenuViewerView='\n\n<div $id class="left-menu-viewer"> \n    \n\n    \n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},5066:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuTopView=void 0,e.leftMenuTopView='\n\n<div $id class="left-top-view"> \n    \n    <div class="fill-absolute grid"> \n\n        <div class="p-name"> <div class= "center-v-absolute one-line">Project Name</div> </div>\n\n        <div class="buttons-holder">\n            <div class="button center-absolute ">\n                <div class="center-absolute new-button">New</div>\n            </div>\n\n            <div> </div>\n            <div class="button  "> \n                <div class="center-absolute load-button">Load</div>\n            </div>\n        </div>\n\n\n    </div>\n    \n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},3753:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuViewerModuleCellView=void 0,e.leftMenuViewerModuleCellView='\n<div $id class="collection-view-cell-test pointer">\n    <div class=" cell-holder ">\n        <div class="fill-absolute cell-distr">\n        <div class="center-flex"><img src=""></div> \n\n            <div class="click-select relative"> \n            <div class="title tc-t-primary one-line">Cell</div> \n            </div>\n            <div class="button-holder"> <div class="bh-txt  center-absolute">Del</div> </div>\n        </div>\n    </div>\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9146:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuViewerModuleCollectionView=void 0,e.leftMenuViewerModuleCollectionView='\n\n<div $id  class="relative">\n\n    <div style="left: 15px" class="cv-section-viewer"> </div>\n\n    <div style="left: 30px" class="cv-section-viewer"> </div>\n\n    <div class="fill-absolute left-collection-view"> \n    \n        <div class="fill-absolute"> \n\n            <div $idgrid class="collection-view">\n\n            </div>\n\n        </div>\n\n        <div class="bg-secondary" style="z-index:5"> </div>\n    \n    </div>\n\n \n    \n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9028:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuViewerModuleSectionView=void 0,e.leftMenuViewerModuleSectionView='\n<div $id class="collection-view-cell-header-test pointer"> \n    <div class="cell-holder">\n        <div class="fill-absolute bottom-border section-distr">\n            <div class="section-controller"> <img src="./images/arrow-bottom.png"></div>\n            <div class="title tc-t-primary-hover"> <div class="text one-line">   </div>  </div> \n            <div class="button-holder"> <div class="bh-txt  center-absolute">Add</div> </div>\n\n        </div>\n    </div>\n</div>\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8128:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuSubMenuCellView=void 0,e.leftMenuSubMenuCellView='\n\n<div $id class="cell bg-secondary-dark-hover fs-caption-1 fw-regular center-flex"> \n\n    \n\n    <div class="cell-holder "> \n\n        <div class="center-flex relative"> \n            <img class="" src="$imageUrl">\n        </div>\n    \n        <div class="title">$title</div>\n\n    </div>\n    \n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8408:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.leftMenuSubMenuView=void 0,e.leftMenuSubMenuView='\n\n<div $id class="left-sub-menu"> \n    \n    <div leftMenuSubMenuHolder class="left-sub-menu-holder"> \n        \n    </div>\n    \n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},8409:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewConnectSocket=void 0,e.viewConnectSocket='\n\n<div $id class="connect-socket shadow"> \n\n    <div $idstatemanager class="relative"></div>\n    <div  class="relative">  \n        \n        <div>- To execute and debug modules you will need to connect to KETSU module creator server, it can be found on the KETSU app.<br>\n        - Type the ws url [ws://***.**.***:***] that is displayed on KETSU Module Creator and click connect.<br>- Keep your phone screen on and dont leave KETSU module creator to avoid disconnections.<br>- Your phone and computer have to be connected to the same wifi or your computer has to be connected to your phone hotspot.</div>\n        \n        <div class="connection-holder"> \n        <input  class="input-header-value header-input" placeholder="ex: ws://999.23.43.1:3000">\n        <div class="status center-flex relative"> <img class="status-image" src="./images/disconnected.png"> <div class="loading bg-primary relative"> </div>   </div>\n        <div class="button bg-secondary-dark-hover center-flex"> <div class="elem-padding-wider connect-button">Connect</div> </div>\n        </div>\n    </div>\n\n\n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},7965:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.newProjectView=void 0,e.newProjectView='\n    <div $id class="new-project-view"> \n        <div $idstatemanager class="relative">\n        </div>\n        <div class="h-separator"> </div>\n\n        <div class="elements-holder">\n            <input placeholder="Insert Project Name...">\n            <div class="center-flex create-button">Create!</div>\n        </div>\n    \n    </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},2938:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.viewPopUp=void 0,e.viewPopUp='\n\n<div $id> \n    <div class="fill-absolute   "> \n        <div class="  pop-up-holder"> \n            <div $idviews class="relative center-flex"> </div>\n        </div>\n\n    </div>\n</div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},3983:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.clickCellView=void 0,e.clickCellView='\n\n    <div $id> \n    \n        <div class="settings-click-cell"> \n\n            <div class="text"> \n            \n                <div class="title">THIS IS THE TITLE</div>\n                <div class="message">THIS IS THE Msdkfh sdhfjasdhflskajhf skljdah flakjshf slakdjhf salkd jfhalskdjhf lkasdjhf lsdakjhf laskjdhf aldksj fhadlskjfh alsdkjhf alsdkjfhalskdjfh alskdj fhsdjklfh lksajdf ESSAGE</div>\n\n            </div>\n\n            <div class="center-flex"> \n                <div class="switch">\n                \n                    <div class="circle"> </div>\n            \n                </div>\n            </div>\n        </div>\n\n    </div>\n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},1582:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.jsLogsCellView=void 0,e.jsLogsCellView='<div $id class="js-logs-cell-holder "> \n\n    <div class="fill-absolute js-logs-cell"> \n\n        <pre  class="title center-v-flex"></pre>\n\n    </div>\n\n</div>'}.apply(e,[i,e]),void 0===o||(t.exports=o)},4449:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.logsCellView=void 0,e.logsCellView='<div $id class="logs-cell-holder "> \n\n    <div class="fill-absolute logs-cell"> \n\n        <div class="title center-v-flex">\n            Hello world\n        </div>\n\n        <div class="center-flex arrow">></div>\n\n    </div>\n\n</div>'}.apply(e,[i,e]),void 0===o||(t.exports=o)},9990:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.paramEditorCellView=void 0,e.paramEditorCellView='\n\n<div $id> \n\n    <div class=" param-editor-holder">\n     \n        <div class="param-editor"> \n            <div class="title"> This is the title</div>\n            <input placeholder="Type here.">\n            <div class="message">The input here is a boolea insert either true or false</div>\n\n        </div>\n     \n    </div>\n\n</div> \n\n'}.apply(e,[i,e]),void 0===o||(t.exports=o)},1132:(t,e,i)=>{var o;o=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.sectionCellView=void 0,e.sectionCellView='<div $id> \n\n    <div class="fill-absolute section-cell"> \n    \n    <div class="title"></div>\n    \n    </div>\n\n</div>'}.apply(e,[i,e]),void 0===o||(t.exports=o)}},t=>{t.O(0,[54],(()=>(3607,t(t.s=3607)))),t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
export const quickDocNotes = [

    {
        sectionName: "Welcome",
        notes: [{
                "noteId": "oFwjzvDpdfxlaKQrGUwc",
                "noteTitle": "Welcome Note",
                "noteDesc": "This note will open on every new project, it will contain general information to guide the user.",
                "noteData": "\n## Welcome!\n\nFirst of all you might have a better experience if you zoom out the navigator to a 90%.\n\nThis is the KETSU / ZETSU  module creator.\n\nWith this tool you can create and fix modules on an intuitive way.\n\n>Features\n\n- Tutorials: The Module Tutorials on the left menu are modules prepared with Notes like this one and code inside them so you can follow up as it was a tutorial to learn everything about creating modules.\n\n- Quick Documentation: This are Notes that you can open at any time, they can be found on the left menu, these notes have documentation about modules in general.\n\n-  Module tree: Visualize the module on a tree to modify it intuitively.\n\n-  Code Execution:  You can execute the code in real time while you create your module.\n\n    \n  -  Logs:  Get the logs of the code you executed.\n\n  -  Module Creator Server: In order to execute the module code you will need the KETSU app, it will create  WebSockets server that will allow you to connect this website to it and execute the code to have all the benefits mentioned above.\n\n  -  Visualize the result: The KETSU app will display you the result of your module everytime you execute it.\n\n- Notes: You can create notes like this ones on your projects so if anyone wants to take over he can read over the notes you left. With this notes you can also contribute to the Github with your own Module tutorials or Notes with documentation about making modules.\n\n\n## Contribute Quick Documentation\n\nYou can contribute Documentation Notes by creating notes with usefull documentation about Module Making and pushing it  to the github.\n\n> Steps to contribute  quick documentation notes.\n\n- export the Note you created clicking on the top right button of the note.\n- Add the json object (The note) to the ./src/model/moduleNotes/quickDocNotes.ts notes array.\n- you can either create a section inside the array or add the note inside a section.\n \n> Example Structure:\n \n``` json\n{ \n    sectionName : \"Section Name\",\n    notes : [\n        {\n            noteId: \"\",\n            noteTitle : \"\",\n            noteDesc : \"\",\n            noteData : \"\",\n            isDocumentation : true\n        }\n    ]\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "gWqQAigfKchqidNofFEh",
                "noteTitle": "How KETSU works",
                "noteDesc": "Note explaining the basics on how KETSU works and how you will use the module creator to make modules for it.",
                "noteData": "## How KETSU Works\n\nKETSU is an app that operates using modules, and it's these modules that provide functionality to KETSU. These modules are crafted by individuals like you!\n\nModules contain the code that KETSU will utilize to fetch information from the websites you intend to create modules for.\n\nThe process is straightforward. Let's consider a brief example—imagine you're working on the main page part of a module:\n\n- First, you specify the URL of the website from which you wish to extract data.\n\n- Next, KETSU visits that URL and retrieves the HTML content.\n\n- KETSU then injects the JavaScript code you've created within your module into this HTML. Your JavaScript code must extract data from this HTML, format it in a way that KETSU can comprehend, and interpret it accordingly.\n\n- And that's it! It's as simple as that.\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "MZsvZLUdSlfdfPFgOixf",
                "noteTitle": "About Modules",
                "noteDesc": "Brief explanation about modules.",
                "noteData": "# Modules\n\nModules contain the code and information that allow KETSU to perform its tasks. You can think of them as small programs that KETSU executes. You need to write these programs.\n\nModules are not compiled; they are JSON files that contain code URLs, etc. You can view them by clicking on the top-right button labeled \"export.\"\n\nModules can be of three types: Video, Image, or Text. You will need to specify the type of module you want to create. For example, if you want to create a module that plays videos on KETSU, you will need to make a video module.\n\nIf you go to the left side of the module creator and click on \"Module,\" you will see the structure of a module in a tree format. It is categorized into sections such as Module Info, Main Page, Search Page, Info Page, Chapters, Resolvers, and more. The most important sections are from \"Module Info\" to \"Chapters,\" and \"Resolvers\" are also important if you are creating a video module.\n\nThe \"Module Info\" section has a button that says \"Parameters.\" If you click on it, you will be able to edit the parameters of the module.\n\nThe other sections (Main Page, Search, etc.) have a button called \"Request 1.\" If you click on it, you will see three subsections:\n\n- Request: Here, you will configure the request you want KETSU to make.\n- JavaScript: This is where you will write the module's code to fetch and format the data for KETSU.\n- Settings: Here, you will find some settings to modify certain parameters of the request and other options.\n\nYou can have more than one request per section in case you need to fetch data from multiple sources. This will be explained later on.\n",
                "isDocumentation": true
            },
            {
                "noteId": "jqiZLSwhJLtdQgVWyxPn",
                "noteTitle": "Module Creator Tour",
                "noteDesc": "Tour of the module creator and its capablities.",
                "noteData": "\n## Module Creator\n\nThe Module Creator is an environment created to streamline the process of creating modules.\n\nWithin this tool, you can create, fix, debug, and execute code in real-time—essentially, everything you need to create a module.\n\n### Left Section\n\nLet's begin by exploring the left section of the Module Creator.\n\nBelow the page's title, \"MODULE CREATOR,\" you'll find two buttons: \"new\" and \"load.\" These buttons are used to either create a new module or load an existing one.\n\nIn the left submenu, you'll find four options. The first, \"Module,\" is where you'll spend most of your time. The second, \"Module Notes,\" is a section where you can add notes inside your module in case you want to make comments about it. The remaining options contain documentation and tutorials for your learning.\n\nThe \"Module Tab\" houses the module, organized into sections in a tree format (Module Info, Main Page, etc.). You'll notice there are request and parameters buttons. Clicking on any request will open it, allowing you to edit it, and the same goes for parameters.\n\nOpening any request will display a window for modification, which is divided into three sections:\n\n- **Request:** Here, you can set the URL, headers, and so on.\n- **JavaScript:** This is where you code the JavaScript for this request.\n- **Settings:** Configure the request as per your needs.\n\nIn the top-right corner of any request, you'll find a button to execute the section you're coding (e.g., Execute Main Page). To use this function, you'll need to connect the Module Creator to KETSU, enabling you to execute and debug your module in real-time.\n\n### Logs Section\n\nThe logs can be found at the bottom center, just above the blue submenu at the bottom. You can show or hide them by clicking the arrow to the right. The logs are separated into three sections:\n\n- **JS Logs:** This functions like the console of your code. If you use `console.log()` to print something when you execute your code, it will appear here.\n\n- **Selected Log:** If you select any log from the logs section on the right (where it probably says \"Logs are empty\"), that log will be displayed on the Selected Log Tab.\n\n- **Logs:** Positioned to the right, this is a list of logs that KETSU generates for you to see what's going on. When you execute any code, this section will be filled with these logs. If you click on any of them, they will appear in the previous section, \"Selected Log.\"\n\n### Blue Menu at the Bottom\n\nThis is the blue stripe where it says \"disconnected\" on the bottom left. If you click on \"disconnected,\" a pop-up will appear for you to connect the Module Creator to KETSU.\n\nIf you want to learn how to connect the Module Creator to KETSU, there is a note available in the Quick Documentation tab.\n\nIn the center of this menu, you'll see three buttons. These buttons allow you to control the layout of the Module Creator, enabling you to hide or show each section to customize your screen space.\n\n## Right Side\n\nThis side is where you are reading this, the Notes side. Here, you can have notes open to read documentation as you create a module or follow any tutorial.",
                "isDocumentation": true
            },
            {
                "noteId": "RbZPdNjIuJlpswcNabLZ",
                "noteTitle": "Connect KETSU to the Module Creator",
                "noteDesc": "How to connect the module creator to KETSU so you can execute code and debug your modules.",
                "noteData": "\n### Connecting the Module Creator to KETSU\n\nBefore proceeding, ensure that you have the Module Creator open using HTTP instead of HTTPS. If it's currently open with HTTPS, it won't work. You can check this by examining the URL. If it starts with \"https,\" replace it with \"http,\" and then refresh the page.\n\nThe reason we use HTTP is because the website needs to connect to a local WebSocket server running on the KETSU App within your local network. HTTPS does not support the use of the WebSocket (ws) protocol.\n\nTo establish a connection between KETSU and this website, both your phone and computer must be connected to the same Wi-Fi network. Alternatively, you can create a hotspot with your phone and connect your computer to it.\n\n1. Open KETSU and navigate to the main page.\n2. Open the left side menu.\n3. Click on \"Module Creator.\" This will open a window displaying an IP address and the URL to access the Module Creator.\n\nOn the Module Creator website:\n\n4. Locate the bottom-left button labeled \"Disconnected.\"\n5. Click on it, and a pop-up window will appear.\n6. Enter the IP address shown on KETSU.\n7. Click the \"Connect\" button.\n\nIf everything goes smoothly, you should see a message indicating that the connection is established.\n\nEnsure that you do not close or interact with anything in KETSU, and keep your phone screen from going off during this process. Now, you can execute and debug your code, among other tasks.",
                "isDocumentation": true
            },
            {
                "noteId": "MevnmverxtGdwUAZkVFv",
                "noteTitle": "Parameters of Module Info",
                "noteDesc": "Description of each parameter on the Module Info section.",
                "noteData": "\n# Module Info Parameters\n\nIn this section, you will configure and provide information about the module.\n\n- **Project Name:** Enter the name of your project.\n- **Module Name:** Specify the name of the module.\n- **Module Initials:** Provide the initials of the module.\n- **Module Description:** Describe the module's purpose and content.\n- **Developer:** Your nickname as the developer of the module.\n- **Module ID:** Assign a unique ID to the module (no spaces, can contain letters and numbers).\n- **Module Image:** Provide the URL of an image that represents your module.\n- **Module Version:** Set a decimal number to control the module's version (used for updates).\n- **Module Language:** Indicate the language of the module.\n- **Module Type:** Specify the type of the module (Video, Image, or Text).\n- **Base URL:** Enter the base URL of the website that your module is adapting (e.g., https://google.com/).\n- **Module Developer Site:** Share the website where users can find more modules created by you.\n- **Preferred Server:** Choose the preferred video server that KETSU will use when selecting from multiple options.\n- **Preferred Download Server:** Select the preferred download server that KETSU will use when choosing from multiple servers.\n- **Blacklisted:** List names of things you want KETSU not to display.\n\nThis information is crucial for configuring your module and ensuring it functions correctly within the KETSU environment.",
                "isDocumentation": true
            },
            {
                "noteId": "GhuCYUQVcXsRLElxWIyc",
                "noteTitle": "Understand the logic of the code.",
                "noteDesc": "Explanation on what is going on with the code so you can understand what you need to do when coding a module.",
                "noteData": "\n## Module Logic\n\nIn this section, we'll break down the behind-the-scenes process so you can better understand the logic and start coding your modules.\n\n### Requesting Website Data\n\n1. When creating a module, let's say you're designing the main page.\n\n2. KETSU initiates a request to the specified website's URL you set on the Main Page. This request fetches the website's HTML content, like this:\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Sample Website</title>\n   </head>\n   <body>\n       <!-- Content of the website -->\n   </body>\n   </html>\n   ```\n\n### Modifying the HTML\n\n3. KETSU enhances this HTML by adding two elements:\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Sample Website</title>\n   </head>\n   <body>\n       <div id=\"ketsu-final-data\">{JSON object created by KETSU}</div>\n       <!-- Content of the website -->\n       <script>\n           // Your JavaScript code\n       </script>\n   </body>\n   </html>\n   ```\n\n   These additions include a `div` containing a JSON object at the top of the website's content and your JavaScript code at the bottom.\n\n### Executing JavaScript\n\n4. KETSU then executes your JavaScript on the website. Your JavaScript code retrieves data from the HTML using DOM manipulation (query selectors) and compiles it into a JSON object. This JSON object is saved within the `div` with the ID `ketsu-final-data`.\n\n   Here's a simplified example of what your JavaScript would do:\n\n   ```javascript\n   <script>\n       // An empty object\n       let object = {};\n       // Retrieving data from the website and adding it to our object\n       let dataFromWebsite = document.querySelectorAll(\".data-array\");\n       for (let data of dataFromWebsite) {\n           object[\"title\"] = data.textContent;\n       }\n       // Saving this object in string format inside the ketsu-final-data div\n       document.querySelector(\"#ketsu-final-data\").innerHTML = JSON.stringify(object);\n   </script>\n   ```\n\n### Final Result\n\n5. After executing your JavaScript, the website's HTML looks like this:\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Sample Website</title>\n   </head>\n   <body>\n       <div id=\"ketsu-final-data\">{JSON object created by your JavaScript with data from the website's HTML, formatted for KETSU}</div>\n       <!-- Content of the website -->\n       <script>\n           // Your executed JavaScript code\n       </script>\n   </body>\n   </html>\n   ```\n\n6. KETSU then will go to the `div` with the ID `ketsu-final-data`, collect the JSON object and display it.\n\nThis process allows you to extract and format data from websites, making it accessible for further use within your modules. The specific object types and instructions for each section of the module are documented within the code to guide your development efforts.",
                "isDocumentation": true
            },
            {
                "noteId": "ZqVYOcRldBddDCDgISDP",
                "noteTitle": "JS and Enums Documentation.",
                "noteDesc": "Documentation of all the functions and enums used on the code.",
                "noteData": "## Important\n\n\nIt's essential to consistently show respect for both optional and mandatory parameters. If you find yourself creating an object and encounter a non-optional parameter that you don't require, ensure you populate it with its data type, even if it remains empty, never leave it undefined.\n\n## Index\n\n- Enums\n  - [DefaultLayouts](?noteId=ZqVYOcRldBddDCDgISDP&line=59)\n  - [CellDesings](?noteId=ZqVYOcRldBddDCDgISDP&line=115)\n  - [Paging](?noteId=ZqVYOcRldBddDCDgISDP&line=152)\n  - [Orientation](?noteId=ZqVYOcRldBddDCDgISDP&line=168)\n\n- Functions\n   - [ModuleRequest](?noteId=ZqVYOcRldBddDCDgISDP&line=199)\n    -  [KeyValue](?noteId=ZqVYOcRldBddDCDgISDP&line=218)\n    - [Extra](?noteId=ZqVYOcRldBddDCDgISDP&line=238)\n    - [Commands](?noteId=ZqVYOcRldBddDCDgISDP&line=257)\n    - [JavascriptConfig](?noteId=ZqVYOcRldBddDCDgISDP&line=273)\n    - [Section](?noteId=ZqVYOcRldBddDCDgISDP&line=291)\n    - [Layout](?noteId=ZqVYOcRldBddDCDgISDP&line=308)\n    - [Insets](?noteId=ZqVYOcRldBddDCDgISDP&line=334)\n    - [Size](?noteId=ZqVYOcRldBddDCDgISDP&line=353)\n    - [Ratio](?noteId=ZqVYOcRldBddDCDgISDP&line=370)\n    - [Data](?noteId=ZqVYOcRldBddDCDgISDP&line=387)\n\n - Main Page\n   - [MainPage](?noteId=ZqVYOcRldBddDCDgISDP&line=418)\n    -  [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=436)\n  \n  - Search Page\n    - [Search](?noteId=ZqVYOcRldBddDCDgISDP&line=460)\n    - [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=479)\n\n  - Info Page\n    - [Info](?noteId=ZqVYOcRldBddDCDgISDP&line=501)\n    - [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=519)\n    - [Chapter](?noteId=ZqVYOcRldBddDCDgISDP&line=543)\n\n   \n- Chapters Page\n  - [Chapters](?noteId=ZqVYOcRldBddDCDgISDP&line=561)\n  - [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=580)\n  - [Videos](?noteId=ZqVYOcRldBddDCDgISDP&line=598)\n  - [NeedsResolver](?noteId=ZqVYOcRldBddDCDgISDP&line=616)\n  - [RawVideo](?noteId=ZqVYOcRldBddDCDgISDP&line=634)\n  - [Subtitiles](?noteId=ZqVYOcRldBddDCDgISDP&line=651)\n  - [Video](?noteId=ZqVYOcRldBddDCDgISDP&line=669)\n  - [Text](?noteId=ZqVYOcRldBddDCDgISDP&line=686)\n\n- Resolvers \n  - [Resolver](?noteId=ZqVYOcRldBddDCDgISDP&line=702)\n  - [Subtititiles](?noteId=ZqVYOcRldBddDCDgISDP&line=721)\n  - [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=738)\n  - [Video](?noteId=ZqVYOcRldBddDCDgISDP&line=755)\n\n## Enums\n\n\n### DefaultLayouts Enum\n\n```javascript\nenum DefaultLayouts {\n  ultraWideFull,\n  ultraWide,\n  wideFull,\n  wide,\n  wideStrechedFull,\n  wideStrechedFullDouble,\n  wideStreched,\n  wideStrechedDouble,\n  wideStrechedFullList,\n  wideStrechedList,\n  doublets,\n  doubletsDouble,\n  doubletsFull,\n  doubletsFullDouble,\n  doubletsConstant,\n  doubletsDoubleConstant,\n  doubletsFullConstant,\n  doubletsFullDoubleConstant,\n  longDoublets,\n  longDoubletsDouble,\n  longDoubletsFull,\n  longDoubletsFullDouble,\n  longDoubletsConstant,\n  longDoubletsDoubleConstant,\n  longDoubletsFullConstant,\n  longDoubletsFullDoubleConstant,\n  triplets,\n  tripletsDouble,\n  tripletsFull,\n  tripletsFullDouble,\n  tripletsConstant,\n  tripletsDoubleConstant,\n  tripletsFullConstant,\n  tripletsFullDoubleConstant,\n  longTriplets,\n  longTripletsDouble,\n  longTripletsFull,\n  longTripletsFullDouble,\n  longTripletsConstant,\n  longTripletsDoubleConstant,\n  longTripletsFullConstant,\n  longTripletsFullDoubleConstant,\n  none\n}\n```\n\n**Description**\n\nThis enum will assing the layout of a group of cells within a section.\n\n---\n\n### CellDesings Enum\n\n```javascript\nenum CellDesings {\n  Special1,\n  Special2,\n  Special3,\n  CELLHelperText,\n  small1,\n  small2,\n  normal1,\n  normal2,\n  normal3,\n  normal4,\n  normal5,\n  normal6,\n  normal7,\n  wide1,\n  wide2,\n  wide3,\n  wide4,\n  wide5,\n  wide6,\n  wide7,\n  wide8,\n  wide9,\n  wide10,\n  wide11\n}\n```\n\n**Description**\n\nThis enum asigns the cell design.\n\n---\n\n### Paging Enum\n\n```javascript\nenum Paging {\n  leading,\n  centered,\n  none\n}\n```\n\n**Description**\n\nThis enum sets the paging of a section when you scroll through it horizontally .\n\n---\n\n### Orientation Enum\n\n```javascript\nenum Orientation {\n  horizontal,\n  vertical\n}\n```\n\n**Description**\n\nThis enum asigns the layout distribution of a section.\n \n---\n\n### RatioRelation \n\n```javascript\nenum RatioRelation = {\n  width,\n  height\n};\n```\n\n**Description**\n\nThis object represents the ratio relation options for a UI component. if you set the relaion of a custom layout to with and set it to 0.8 the height of that section will be 0.8 * width.\n\n## Functions\n\n\n### ModuleRequest\n\n``` js\nnew ModuleRequest(url, method, headers, httpBody)\n```\n\n**Parameters**\n\n- `url` **string**: The URL to which the HTTP request will be sent.\n- `method` **string**: The HTTP method (e.g., \"GET\", \"POST\") for the request.\n- `headers` **KeyValue[]**: An array of key-value pairs representing HTTP headers.\n- `httpBody` **string, optional**: The HTTP request body, if applicable.\n\n**Description**\n\nThis function creates a ModuleRequest object used to make requests.\n\n---\n\n### KeyValue\n\n``` js\nfunction KeyValue ( key, value )\n```\n\n**Parameters**\n\n- `key` **string**: The key.\n- `value` **string**: The value associated with the key.\n\n**Description**\n\nThis function creates a KeyValue object for storing key-value pairs used in KETSU.\n\nIts used on multiple places as headers, commands, to store information etc.\n\n\n---\n\n### Extra\n\n```javascript\nfunction Extra(commands, extraInfo)\n```\n\n**Parameters**\n\n- `commands` **Commands[]**: An array of Commands objects.\n- `extraInfo` **KeyValue[]**: An array of key-value pairs for extra information.\n\n**Description**\n\nThis function creates an Extra object used to store additional information.\n\nIt is used to either execute custom commands on KETSU and to store information that will be passed to the following request if there is one.\n\n---\n\n### Commands\n\n```javascript\nfunction Commands(commandName, params)\n```\n\n**Parameters**\n\n- `commandName` **string**: The name of the command.\n- `params` **KeyValue[]**: An array of key-value pairs representing command parameters.\n\n**Description**\n\nThis function creates a Commands object used so KETSU can execute them, there are commands to save and inject certain cookies, headers or just to store permament data to use it anywehere on the module.\n\n---\n### JavascriptConfig\n\n```javascript\nfunction JavascriptConfig(removeJavascript, loadInWebView)\n```\n\n**Parameters**\n\n- `removeJavascript` **boolean**: Indicates whether to remove JavaScript.\n- `loadInWebView` **boolean**: Indicates whether to load content in a WebView.\n- `javaScript` **string**: The JavaScript code to execute.\n\n**Description**\n\nThis function creates a JavascriptConfig object, this object its used to configure the request that KETSU will execute, the first request you do is configured direclty on the module creator, the following requests in case there is multiple chained requests on a section can be configured here too.\n\n---\n\n### Section\n\n```javascript\nfunction Section(sectionName, separator)\n```\n\n**Parameters**\n\n- `sectionName` **string**: The section name.\n- `separator` **boolean**: Indicates whether to add a separator.\n\n**Description**\n\nThis object represents the Section title of a list of Data Objects on either the MainPage or SearchPage of KETSU, if you leave the title string empty the title of the section wont appear.\n\n---\n\n### Layout\n\n```javascript\nfunction Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing)\n```\n\n**Parameters**\n\n- `insets` **Insets**: The insets settings.\n- `visibleCellsWidthS` **number**: Width for small-sized cells.\n- `visibleCellsWidthM` **number**: Width for medium-sized cells.\n- `visibleCellsWidthL` **number**: Width for large-sized cells.\n- `visibleCellsHeight` **number**: Height for visible cells.\n- `heightForVisibleCells` **number**: Height for visible cells.\n- `cellSize` **Insets**: The cell size settings.\n- `ratio` **Ratio (optional)**: The ratio settings.\n- `constant` **Size**: The constant size settings.\n- `horizontalSpacing` **number**: Horizontal spacing.\n- `verticalSpacing` **number**: Vertical spacing.\n\n**Description**\n\nThis function creates a Layout object used to create custom layouts for sections on the MainPage or SearchPage of KETSU. Most of the times u wont need to use them because KETSU has default layouts that you can use.\n\n---\n\n### Insets\n\n```javascript\nfunction Insets(top, bottom, left, right)\n```\n\n**Parameters**\n\n- `top` **number**: Top inset.\n- `bottom` **number**: Bottom inset.\n- `left` **number**: Left inset.\n- `right` **number**: Right inset.\n\n**Description**\n\nThis function creates an Insets object used to define inset settings.\n\n----\n\n### Size\n\n```javascript\nfunction Size(width, height)\n```\n\n**Parameters**\n\n- `width` **number**: Width.\n- `height` **number**: Height.\n\n**Description**\n\nThis function creates a Size object used to define size settings.\n\n---\n\n### Ratio\n\n```javascript\nfunction Ratio(inRelation, number1, number2)\n```\n\n**Parameters**\n\n- `inRelation` **RatioRelation**: The relation type (e.g., \"width\", \"height\").\n- `number1` **number**: The first number.\n- `number2` **number**: The second number.\n\n**Description**\n\nThis function creates a Ratio object used to define ratio settings.\n\n---\n### Data\n\n```javascript\nfunction Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView)\n```\n\n**Parameters**\n\n- `image` **ModuleRequest**: The image for the data.\n- `title` **string**: The title of the data.\n- `description` **string**: The description of the data.\n- `field1` **string**: Field 1 value.\n- `field2` **string**: Field 2 value.\n- `field3` **string**: Field 3 value.\n- `field4` **string**: Field 4 value.\n- `isChapter` **boolean**: Indicates if the data is a chapter.\n- `link` **ModuleRequest**: The link that will be used to get the Info Section when the user clicks on this cell.\n- `openInWebView` **boolean (optional)**: Indicates whether to open the link in a WebView instead of KETSU when the cell is clicked.\n\n**Description**\n\nThis function creates a Data object used to define data. \n\nThis objects are used to represent cells on the mainpage, or on the search page of KETSU. They will contain the image and link that will be used on the Info Page of the module.\n\n\n\n## Main Page\n\n\n\n### MainPage \n\n```javascript\nfunction MainPage(request, extra, javascriptConfig, output)\n```\n\n**Parameters**\n\n- `request` **ModuleRequest**: The request object representing module request information.\n- `extra` **Extra**: Additional information (optional).\n- `javascriptConfig` **JavascriptConfig**: JavaScript configuration settings.\n- `output` **Output[]**: An array of Output objects representing the layout and data of the main page.\n\n**Description**\n\nThis constructor function creates a `MainPage` object, which represents the main page of the application. In case you dont need to do another request and you already have your output array, just fill all the other parameters with dummy objects, don´t leave them undefined. \n\n---\n### Output\n\n```javascript\nfunction Output(cellDesing, orientation, defaultLayout, paging, section, layout, data)\n```\n\n**Parameters**\n\n- `cellDesing` **CellDesings**: The cell design.\n- `orientation` **Orientation**: The orientation (e.g., \"vertical\", \"horizontal\").\n- `defaultLayout` **DefaultLayouts**: The default layout.\n- `paging` **Paging**: The paging type.\n- `section` **Section**: The section object.\n- `layout` **Layout (optional)**: The layout settings.\n- `data` **Data[]**: An array of Data objects.\n\n**Description**\n\nThis function creates an Output object, this output is used to design the layout of a section on either the Main Page or Search Page of KETSU. It contains an array of Data objects that will represent each cell of this section.\n\n\n## Search\n\n\n### Search \n\n```javascript\nfunction Search(request, extra, javascriptConfig, output)\n```\n\n**Parameters**\n\n- `request` **ModuleRequest**: The request object representing module request information.\n- `extra` **Extra**: Additional information (optional).\n- `javascriptConfig` **JavascriptConfig**: JavaScript configuration settings.\n- `output` **Output[]**: An array of Output objects representing the layout and data of the search page.\n\n**Description**\n\nThis constructor function creates a `Search` object, which represents the search page of the application. In case you dont need to do another request and you already have your output array, just fill all the other parameters with dummy objects, don´t leave them undefined. \n\n\n---\n### Output\n\n```javascript\nfunction Output(cellDesing, orientation, defaultLayout, paging, section, layout, data)\n```\n\n**Parameters**\n\n- `cellDesing` **CellDesings**: The cell design.\n- `orientation` **Orientation**: The orientation (e.g., \"vertical\", \"horizontal\").\n- `defaultLayout` **DefaultLayouts**: The default layout.\n- `paging` **Paging**: The paging type.\n- `section` **Section**: The section object.\n- `layout` **Layout (optional)**: The layout settings.\n- `data` **Data[]**: An array of Data objects.\n\n**Description**\n\nThis function creates an Output object, this output is used to design the layout of a section on either the Main Page or Search Page of KETSU. It contains an array of Data objects that will represent each cell of this section.\n\n## Info\n\n### Info \n\n```javascript\nfunction Info(request, extra, javascriptConfig, output)\n```\n\n**Parameters**\n\n- `request` **ModuleRequest**: The request object representing module request information.\n- `extra` **Extra**: Additional information (optional).\n- `javascriptConfig` **JavascriptConfig**: JavaScript configuration settings.\n- `output` **Output**: An Output object representing the layout and data of the info page.\n\n**Description**\n\nThis constructor function creates a `Info` object, which represents the info page of the application. In case you dont need to do another request and you already have your output array, just fill all the other parameters with dummy objects, don´t leave them undefined. \n\n---\n### Output \n\n```javascript\nfunction Output(image, title, link, description, genres, field1, field2, field3, field4, chapters)\n```\n\n**Parameters**\n\n- `image` **ModuleRequest**: The image representing the content.\n- `title` **string**: The title of the content.\n- `link` **ModuleRequest**: The link representing the content (usually the URL of the first request).\n- `description` **string**: The description of the content.\n- `genres` **string[]**: An array of genres associated with the content.\n- `field1` **string**: The first custom field.\n- `field2` **string**: The second custom field.\n- `field3` **string**: The third custom field.\n- `field4` **string**: The fourth custom field.\n- `chapters` **Chapter[]**: An array of Chapter objects representing the chapters of the content.\n\n**Description**\n\nThis constructor function creates an `Output` object, which represents the information of the Info page.\n\n---\n### Chapter \n\n```javascript\nfunction Chapter(chapName, link, openInWebView)\n```\n\n**Parameters**\n\n- `chapName` **string**: The name of the chapter.\n- `link` **ModuleRequest**: The link that will be loaded on the Chapters section of the module when the user clicks on it.\n- `openInWebView` **boolean**: A boolean indicating whether to open the link in a web view instead of KETSU.\n\n**Description**\n\nThis constructor function creates a `Chapter` object, which represents  the part of the info page where all the links are ordered at the bottom, they dont need to be chapters of anything, it will depend on what content your module is based on.\n\n## Chapters\n\n### Chapters\n\n```javascript\nfunction Chapters(request, extra, javascriptConfig, output)\n```\n\n**Parameters**\n\n- `request` **ModuleRequest**: The module request.\n- `extra` **Extra**: Extra information.\n- `javascriptConfig` **JavascriptConfig**: JavaScript configuration.\n- `output` **Output**: The output object.\n\n**Description**\n\nCreates a Chapters object.\n\n---\n\n### Output\n\n```javascript\nfunction Output(videos, images, text)\n```\n\n**Parameters**\n\n- `videos` **Videos (optional)**: An optional array of video objects.\n- `images` **ModuleRequest[] (optional)**: An optional array of module request objects for images.\n- `text` **Text (optional)**: An optional text object.\n\n**Description**\n\nCreates an Output object, leave as undefined the ones that you don`t need, if you are doing a video module set the videos and leave the rest undefined.\n\n---\n\n### Videos\n\n```javascript\nfunction Videos(needsResolver, rawVideo)\n```\n\n**Parameters**\n\n- `needsResolver` **NeedsResolver[] (optional)**: An optional array of needs resolver objects.\n- `rawVideo` **RawVideo[] (optional)**: An optional array of raw video objects.\n\n**Description**\n\nif the videos are from websites where the raw video needs to be scraped add the video on needs resolver, example: streamtape etc. If the video url is mp4, m3u8 etc add a raw video object.\n\n\n----\n\n### NeedsResolver\n\n```javascript\nfunction NeedsResolver(resolverIdentifier, link)\n```\n\n**Parameters**\n\n- `resolverIdentifier` **String**: You can leave the identifier as \"\" and KETSU will find it through the URL. This is used to select the resolver that will be used to get the video.\n- `link` **ModuleRequest**: The module request for the link.\n\n**Description**\n\nCreates a NeedsResolver object, set the url of the video and its identifier, the identifier is refered as the identifier of the video resolver that you want to use, if you leave it \"\" the identifier will be the domain name of the website example: https://streamtape/videourl would have as Identifier: STREAMTAPE.\n\n\n---\n\n### RawVideo\n\n```javascript\nfunction RawVideo(video, subs)\n```\n\n**Parameters**\n\n- `video` **Video[] (optional)**: An optional array of video objects.\n- `subs` **Subtitles[] (optional)**: An optional array of subtitle objects.\n\n**Description**\n\nCreates a RawVideo object, video is an array because you can add different qualities urls of that same video.\n\n---\n\n### Subtitles\n\n```javascript\nfunction Subtitles(link, language)\n```\n\n**Parameters**\n\n- `link` **ModuleRequest**: The module request for the subtitle link.\n- `language` **String**: The language of the subtitle.\n\n**Description**\n\nCreates a Subtitles object.\n\n\n---\n\n### Video\n\n```javascript\nfunction Video(videoQuality, videoLink)\n```\n\n**Parameters**\n\n- `videoQuality` **String**: The video quality.\n- `videoLink` **ModuleRequest**: The module request for the video link.\n\n**Description**\n\nCreates a Video object.\n\n---\n\n### Text\n\n```javascript\nfunction Text(text)\n```\n\n**Parameters**\n\n- `text` **String**: The text.\n\n**Description**\n\nCreates a Text object.\n\n## Resolvers\n\n### Resolver\n\n```javascript\nfunction Resolver(request, extra, javascriptConfig, output)\n```\n\n**Parameters**\n\n- `request` **ModuleRequest**: The module request object.\n- `extra` **Extra**: An extra object.\n- `javascriptConfig` **JavascriptConfig**: A JavaScript configuration object.\n- `output` **Output**: An output object.\n\n**Description**\n\nCreates a Resolver object.\n\n---\n\n### Subtitles\n\n```javascript\nfunction Subtitles(link, language)\n```\n\n**Parameters**\n\n- `link` **ModuleRequest**: The module request object representing the link to subtitles.\n- `language` **String**: The language of the subtitles.\n\n**Description**\n\nCreates a Subtitles object.\n\n---\n\n### Output\n\n```javascript\nfunction Output(video, subs)\n```\n\n**Parameters**\n\n- `video` **Video[] (optional)**: An array of Video objects.\n- `subs` **Subtitles[] (optional)**: An array of Subtitles objects.\n\n**Description**\n\nCreates an Output object that may contain video and subtitle information.\n\n---\n\n### Video\n\n```javascript\nfunction Video(videoQuality, videoLink)\n```\n\n**Parameters**\n\n- `videoQuality` **String**: The quality of the video.\n- `videoLink` **ModuleRequest**: The module request object representing the link to the video.\n\n**Description**\n\nCreates a Video object.\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "wgvkylVDYxNbSpRUFotJ",
                "noteTitle": "About Main Page",
                "noteDesc": "Things to know about the main page section.",
                "noteData": "## Main Page\n\nYour code needs to create a  [MainPage](?noteId=ZqVYOcRldBddDCDgISDP&line=418) Object and store it as a JSON string inside the div with the \"ketsu-final-data\" id. If you uncomment and execute the sample code of the `Main Page > Request 1` you will see how the `MainPage` object is created and stored, and how the output output is drawn on KETSU with sample data.\n\n### Layout\n\nThe layout is drawn by you, the MainPage Object has an array of Output objects as a parameter, each one of these output objects represent a section of the Main Page with its own layout and cells.\n\n```js\noutput = [new Output(\n    CellDesings.wide11\n    Orientation.vertical,\n    DefaultLayouts.wideFull,\n    Paging.leading,\n    new Section('Section', true),\n    null,\n    sampleDataArray\n)]\n```\n\nYou can look at the sample code to and execute to have a better idea.\n\n[Click here](?noteId=sYNtSrYYxTCTrmCVgvNp&line=1) to learn more about Layouts.",
                "isDocumentation": true
            },
            {
                "noteId": "sYNtSrYYxTCTrmCVgvNp",
                "noteTitle": "Layouts",
                "noteDesc": "Note explaining the logic of using the default layouts on KETSU.",
                "noteData": "\n## Layouts\n\nLayouts play a crucial role in designing both the main page and the search page of KETSU.\n\nThe underlying logic is straightforward: In both the MainPage and Search Constructors, you pass an array of Output objects as a parameter. Each Output object corresponds to a specific section of the main page.\n\nWithin the Output constructor, you'll encounter various parameters that allow you to customize your section, such as `cellDesign`, `orientation`, `defaultLayout`, `paging`, `section`, and `layout`. Additionally, there's a parameter that accepts an array of data objects. These data objects represent each cell within the section, complete with their respective images, titles, and more. Let's visualize this concept for better understanding.\n\n![Local Image](https://i.imgur.com/h4e2tcy.png)\n\nAs depicted in the image above, this is a snapshot of a module's main page on KETSU. This image comprises multiple sections, but we'll focus on the one enclosed in the blue square:\n\n- The blue square represents a single section. Within this section, you find a title and the cells that make up that section. In code, this corresponds to an Output object.\n\n- The yellow square denotes the title of the section, which is one of the parameters of the Output object, namely `section`, and it is a Section Object.\n\n- The green square signifies an individual cell within the section. In code, this corresponds to a Data object found within the array of Data objects in the Output.\n\nHere's an example of how you'd code the design for this section:\n\n```js\nnew Output(\n    CellDesigns.normal1,\n    Orientation.horizontal,\n    DefaultLayouts.longTripletsConstant,\n    Paging.leading,\n    new Section('Popular', true),\n    null,\n    sampleDataArray\n)\n```\n\nAs you can see, all the design elements are configured through the parameters, and the section is populated with data by passing an array of sampleData, which consists of Data Objects.\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "NxIbyAAGwLRoumHVeDNX",
                "noteTitle": "Search Page",
                "noteDesc": "Things to know before starting the Search Page Section.",
                "noteData": "## Search Page\n\nYour code needs to create a [Search](?noteId=ZqVYOcRldBddDCDgISDP&line=460) Object. If you uncomment and execute the sample code, you will see how the output is drawn on KETSU with sample data. \n\n### Layout\n\nThe Search Page handles the layout the same way the main page does,  for the search page its recommended to use one section (one output object) with the layout Orientation set to Vertical.\n\n```js\noutput = [new Output(\n    CellDesings.wide11\n    Orientation.vertical,\n    DefaultLayouts.wideFull,\n    Paging.leading,\n    new Section('', false),\n    null,\n    sampleDataArray\n)]\n```\n\nYou can look at the sample code to and execute to have a better idea.\n\n[Click here](?noteId=sYNtSrYYxTCTrmCVgvNp&line=1) to learn more about Layouts.\n\n### Dynamic search URL \n\nIn most cases, websites employ dynamic search URLs where search parameters are directly embedded in the URL. However, for more complex websites where user input is encoded or stored within the request body, documentation on this topic will be provided in the near future.\n\n1. **Passing User Input in the URL:**\n   - When a user performs a search, you want to include their input in the URL as a parameter. For example:\n     ```js\n     https://domain.com/search?query=userInput&page=currentPage\n     ```\n   - This allows you to capture the user's search query and the current page they are on.\n\n2. **Setting the Initial Search URL:**\n   - During the development of your search module, you'll need to set a fixed URL with specific parameters for testing and building the module. For instance:\n     ```js\n     https://domain.com/search?query=something&page=1\n     ```\n   - This URL format helps you work on your module without relying on user input initially.\n\n3. **Building the Search Module:**\n   - While developing your search module, you'll use the fixed URL with predefined parameters to retrieve search results and display them in the layout of the search page.\n\n4. **Replacing URL Parameters with User Input:**\n   - Once your search module is functional and can retrieve search results, you'll need to replace the fixed parameters in the URL with placeholders. For example:\n     ```js\n     https://domain.com/search?query=<searched>&page=<page>\n     ```\n   - The placeholders `<searched>` and `<page>` represent where you will insert the actual user input for the search query and the current page number when a user performs a search.\n\n5. **Dynamic Parameter Replacement (KETSU):**\n   - KETSU will replace `<searched>` and `<page>` with the user's actual input and the current page number before making the request to the server. This ensures that the search results are customized based on the user's query and navigation.\n\n\n### URL Search Separator\n\nIt's important to note that URLs cannot contain spaces. When a user searches for a query with spaces, such as \"Hello world,\" the white space must be replaced with a specific character, such as \"Hello+World.\" Different websites use different separators, like the plus sign (+) or \"%20\". To configure this, navigate to Search Page -> Request 1 -> Search Parameters -> Search Separator, and set it to match the separator used by the website for its search URLs (e.g., +, %20, -). This ensures proper handling of user input with spaces in search queries.\n\n\n``` js\n- Wrong\n\n  https://domain.com/search?query=Hello World&page=currentPage\n\n- Right\n\n  https://domain.com/search?query=Hello+World&page=currentPage\n  ```\n\n\n\n\n\n\n\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "UKQdgvIFjjVpWepVAVBh",
                "noteTitle": "Info Page",
                "noteDesc": "Brief explanation about things that are important to know before starting to code the Info Page.",
                "noteData": "## About the Info\n\nThe info page displays  more in depth data about the selection of the user from either the main page or the search page. It offers options to display a list of links as that will result in the use of KETSU video player,  Image Viewer or Text Reader depending of the nature of the mdoule type (Video, Image, Text)\n\n### Code\n\n\nYour mission is to create an  [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=519) object which holds the information that will be displayed on the KETSU info page.\n\nThe chapters parameter is a list of [Chapter](?noteId=ZqVYOcRldBddDCDgISDP&line=543) Objects that contains the link that will be used for the Chapters section of the module, used to get the metadata that will be feed to KETSU in form of Video, Images or Text\n\nTo gain a clearer understanding, you can uncomment and execute the sample code. This action will help you grasp the expected outcome of your task.\n\n### The request\n\nFor the Info page, it is not necessary to set the request URL in Request 1 for module functionality. The Request is derived from the user's selection on either the Main Page or the Search Page results.\n\nFor testing and debugging purposes, you will need to manually set the search URL (Request) to any URL you might obtain from the search or main page. This step simulates the process of selecting any of the results.\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "ZjiTAeCTtZsRTFlYKlKL",
                "noteTitle": "About the Chapters",
                "noteDesc": "Brief explanation to start coding the Chapters Section.",
                "noteData": "## Chapters\n\nThe \"Chapters\" section is responsible for gathering data for the Video Player, Image Viewer, or Text Reader, depending on the type of module in use.\n\n## Request and Debugging\n\nIn this section, it is not necessary to manually set the URL for `Request 1` to ensure the module's functionality, as it is dynamically set by user input. However, for debugging purposes and to execute the module, a sample URL must be set.\n\n## Code Development\n\nThe aim of this section is to create an [Output](?noteId=ZqVYOcRldBddDCDgISDP&line=580) Object. This object encapsulates the necessary data for the Video Player, Image Viewer, or Text Reader to operate.\n\n```js\nfunction Output(videos, images, text)\n```\n\nYou need to populate only one of the parameters (videos, images, or text), corresponding to the module type, while leaving the others undefined.\n\nExample for a Text Module:\n\n```js\nnew Output(undefined,\n           undefined,\n           new Text(\"Sample Text to be fed into the Text Reader\"))\n```",
                "isDocumentation": true
            },
            {
                "noteId": "PPSENpApfsGBAqdpNxob",
                "noteTitle": "Extract Data From API Request.",
                "noteDesc": "",
                "noteData": "## Extract Data From API Request\n\nMost API responses return their data in JSON format, so no HTML is returned. KETSU takes the response from the API and inserts it into an HTML script tag. so you can Acces to it Through your JS.\n\n>  Sample Response Before KETSU\n\n```json\n{\n  \"data\" : \"Response data from the api\"\n}\n```\n\n> After KETSU\n\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n   </head>\n   <body>\n       <script> \n              /*\n              {\n                \"data\" : \"Response data from the api\"\n              }\n              */\n      </script>\n       <!-- Content of the website -->\n       <script>\n           // Your JavaScript code\n       </script>\n   </body>\n   </html>\n   ```\nAs you can see, the response gets inserted as a comment into a script tag.  \n\nWith this piece of code you can store it and do whatever you need with it.\n\n```js\nlet apiResponse = document.querySelector( 'script' ).innerHTML.replace( '/*', '' ).replace( '*/', '' )\n```\n\n\n\n\n\n\n\n\n\n\n",
                "isDocumentation": true
            },
            {
                "noteId": "rxeANGItFPHFKujXQadN",
                "noteTitle": "Execute Asynchronous Code",
                "noteDesc": "",
                "noteData": "## Execute Code Asynchronously\n\nKETSU, by default, waits until all the synchronous HTML code has executed, including your code, before retrieving the data saved in the `ketsu-final-data` div. However, what if the website you are creating the module for has asynchronous code that retrieves or displays essential data? This is where executing code asynchronously becomes relevant.\n\nYou can adjust the Request to complete at your discretion, rather than after the execution of synchronous code.\n\nTo configure this, go to the Request Settings and enable `Async Request`. With this function enabled, KETSU will not conclude the request when the synchronous code finishes.\n\nAs per the option's guidance, you can invoke the following function:\n\n```js\nwindow.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n```\n\nThis function allows you to compel KETSU to complete the Request. You might set a timer or a timeout to check when the asynchronous operations are complete.\n\n### Safety Considerations\n\nIf your code is unsafe, your request may not conclude, leaving the user in limbo and rendering your module ineffective. It is crucial to incorporate safety measures, such as timers or a fixed number of attempts, to prevent the request from running indefinitely.",
                "isDocumentation": true
            },
            {
                "noteId": "wYNymKAnnvMZzyVCVTWg",
                "noteTitle": "Load in webview.",
                "noteDesc": "Inject your code directly inside the website loaded on a webview. ",
                "noteData": "## Inject Code Inside the Website\n\nKETSU typically operates by sending a request to a URL endpoint, receiving the response (usually HTML), and then loading this HTML into a webview to run alongside your JavaScript. This approach speeds up requests, as it avoids rendering the website and running its JavaScript.\n\nHowever, this default method limits your ability to interact with the website beyond extracting data from the HTML.\n\nOn certain websites, data may be encrypted, loaded asynchronously, or acquired through APIs. Injecting your code directly into the website's domain enables access to the website's JavaScript functions, execution of requests from their API, interception of responses, simulation of clicks, etc.\n\nTo activate this feature, go to the Request Settings and enable `Load in Webview`. This option will slow down your requests.\n\nActivating `Async Request`. will allow you to signal the completion of the request once your code has finished executing, which, in some scenarios, can actually expedite the process.",
                "isDocumentation": true
            }




        ]
    }
]
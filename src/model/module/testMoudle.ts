


export const testModuleString = '{"moduleInfo":{"moduleName":"","moduleInitials":"","moduleDesc":"","developer":"","moduleID":"","moduleImage":"","moduleVersion":1,"moduleLenguage":"ENG","moduleType":"Video","baseURL":"","moduleDeveloperSite":"","UpdateSite":"","preferedServer":"","preferedDownloadServer":"","blackListed":[""],"moduleCreatorIdnvnUVgCvPWZkpGqFNqJN":{"path":"IiLwT","id":"moduleInfosection","sectionsHidden":[],"options":{"name":"Module Info","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdtVvUvfDOnWQQYCkdsaMq":{"path":"FLMZa","id":"moduleInfocell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false}},"global":{"variables":[{"key":"","value":""}],"cookies":[{"key":"","value":""}],"headers":[{"key":"","value":""}]},"mainPage":[{"request":{"url":"","method":"get","headers":[{"key":"","value":"","moduleCreatorHeaderisActive":true}]},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */   const DefaultLayouts = {\n          ultraWideFull: 'ultraWideFull',\n          ultraWide: 'ultraWide',\n          wideFull: 'wideFull',\n          wide: 'wide',\n          wideStrechedFull: 'wideStrechedFull',\n          wideStrechedFullDouble: 'WideStrechedFullDouble',\n          wideStreched: 'wideStreched',\n          wideStrechedDouble: 'wideStrechedDouble',\n          wideStrechedFullList: 'wideStrechedFullList',\n          wideStrechedList: 'wideStrechedList',\n          doublets: 'doublets',\n          doubletsDouble: 'doubletsDouble',\n          doubletsFull: 'doubletsFull',\n          doubletsFullDouble: 'doubletsFullDouble',\n          doubletsConstant: 'doubletsConstant',\n          doubletsDoubleConstant: 'doubletsDoubleConstant',\n          doubletsFullConstant: 'doubletsFullConstant',\n          doubletsFullDoubleConstant: 'doubletsFullDoubleConstant',\n          longDoublets: 'longDoublets',\n          longDoubletsDouble: 'longDoubletsDouble',\n          longDoubletsFull: 'longDoubletsFull',\n          longDoubletsFullDouble: 'longDoubletsFullDouble',\n          longDoubletsConstant: 'longDoubletsConstant',\n          longDoubletsDoubleConstant: 'longDoubletsDoubleConstant',\n          longDoubletsFullConstant: 'longDoubletsFullConstant',\n          longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant',\n          triplets: 'triplets',\n          tripletsDouble: 'tripletsDouble',\n          tripletsFull: 'tripletsFull',\n          tripletsFullDouble: 'tripletsFullDouble',\n          tripletsConstant: 'tripletsConstant',\n          tripletsDoubleConstant: 'tripletsDoubleConstant',\n          tripletsFullConstant: 'tripletsFullConstant',\n          tripletsFullDoubleConstant: 'tripletsFullDoubleConstant',\n          longTriplets: 'longTriplets',\n          longTripletsDouble: 'longTripletsDouble',\n          longTripletsFull: 'longTripletsFull',\n          longTripletsFullDouble: 'longTripletsFullDouble',\n          longTripletsConstant: 'longTripletsConstant',\n          longTripletsDoubleConstant: 'longTripletsDoubleConstant',\n          longTripletsFullConstant: 'longTripletsFullConstant',\n          longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant',\n          none: ''\n  };\n  const CellDesings = {\n          Special1: 'Special1',\n          Special2: 'Special2',\n          Special3: 'Special3',\n          CELLHelperText: 'CELLHelperText',\n          small1: 'small1',\n          small2: 'small2',\n          normal1: 'normal1',\n          normal2: 'normal2',\n          normal3: 'normal3',\n          normal4: 'normal4',\n          normal5: 'normal5',\n          normal6: 'normal6',\n          normal7: 'normal7',\n          wide1: 'wide1',\n          wide2: 'wide2',\n          wide3: 'wide3',\n          wide4: 'wide4',\n          wide5: 'wide5',\n          wide6: 'wide6',\n          wide7: 'wide7',\n          wide8: 'wide8',\n          wide9: 'wide9',\n          wide10: 'wide10',\n          wide11: 'wide11'\n  };\n  const Paging = {\n          leading: 'leading',\n          centered: 'centered',\n          none: ''\n  };\n  const Orientation = {\n          horizontal: 'horizontal',\n          vertical: 'vertical'\n  };\n\n  function MainPage ( request, extra, javascriptConfig, output ) {\n          this.request = request;\n          this.extra = extra;\n          this.javascriptConfig = javascriptConfig;\n          this.output = output;\n  }\n\n  function ModuleRequest ( url, method, headers, httpBody ) {\n          this.url = url;\n          this.method = method;\n          this.headers = headers;\n          this.httpBody = httpBody;\n  }\n\n  function Extra ( commands, extraInfo ) {\n          this.commands = commands;\n          this.extraInfo = extraInfo;\n  }\n\n  function Commands ( commandName, params ) {\n          this.commandName = commandName;\n          this.params = params;\n  }\n\n  function JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) {\n          this.removeJavascript = removeJavascript;\n          this.loadInWebView = loadInWebView;\n          this.javaScript = javaScript;\n  }\n\n  function KeyValue ( key, value ) {\n          this.key = key;\n          this.value = value;\n  }\n\n  function Output ( cellDesing, orientation, defaultLayout, paging, section, layout, data ) {\n          this.cellDesing = cellDesing;\n          this.orientation = orientation;\n          this.defaultLayout = defaultLayout;\n          this.paging = paging;\n          this.section = section;\n          this.layout = layout;\n          this.data = data;\n  }\n\n  function Section ( sectionName, separator ) {\n          this.sectionName = sectionName;\n          this.separator = separator;\n  }\n\n  function Layout ( insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing ) {\n          this.insets = insets;\n          this.visibleCellsWidthS = visibleCellsWidthS;\n          this.visibleCellsWidthM = visibleCellsWidthM;\n          this.visibleCellsWidthL = visibleCellsWidthL;\n          this.visibleCellsHeight = visibleCellsHeight;\n          this.heightForVisibleCells = heightForVisibleCells;\n          this.cellSize = cellSize;\n          this.ratio = ratio;\n          this.constant = constant;\n          this.horizontalSpacing = horizontalSpacing;\n          this.verticalSpacing = verticalSpacing;\n  }\n\n  function Insets ( top, bottom, left, right ) {\n          this.top = top;\n          this.bottom = bottom;\n          this.left = left;\n          this.right = right;\n  }\n\n  function Size ( width, height ) {\n          this.width = width;\n          this.height = height;\n  }\n\n  function Ratio ( inRelation, number1, number2 ) {\n          this.inRelation = inRelation;\n          this.number1 = number1;\n          this.number2 = number2;\n  }\n\n  function Data ( image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView ) {\n          this.image = image;\n          this.title = title;\n          this.description = description;\n          this.field1 = field1;\n          this.field2 = field2;\n          this.field3 = field3;\n          this.field4 = field4;\n          this.isChapter = isChapter;\n          this.link = link;\n          this.openInWebView = openInWebView;\n  }\n\n  function quickData ( link, image, title, field1 ) {\n          return new Data( image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link );\n  }\n\n  function shuffle ( a ) {\n          var j, x, i;\n          for ( i = a.length - 1; i > 0; i-- ) {\n                  j = Math.floor( Math.random( ) * ( i + 1 ) );\n                  x = a[ i ];\n                  a[ i ] = a[ j ];\n                  a[ j ] = x;\n          }\n          return a;\n  }\n  var savedData = document.getElementById( 'ketsu-final-data' );\n  var parsedJson = JSON.parse( savedData.innerHTML );\n  let output = [ ];\n  let emptyKeyValue = [ new KeyValue( '', '' ) ];\n  let MainPageObject = new MainPage( new ModuleRequest( '', 'get', emptyKeyValue, null ), new Extra( [ new Commands( '', emptyKeyValue ) ], emptyKeyValue ), new JavascriptConfig( true, false, '' ), output );\n  var finalJson = JSON.stringify( MainPageObject );\n  savedData.innerHTML = finalJson;\n /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"output":[{"cellDesing":"normal1","orientation":"vertical","defaultLayout":"wide","paging":"","section":{"sectionName":"","separator":false},"layout":{"insets":{"top":0,"bottom":0,"left":0,"right":0},"visibleCellsWidthS":2,"visibleCellsWidthM":2,"visibleCellsWidthL":2,"visibleCellsHeight":2,"heightForVisibleCells":400,"cellSize":{"width":300,"height":300},"ratio":{"inRelation":"width","number1":1,"number2":2},"constant":{"width":1,"height":2},"horizontalSpacing":0,"verticalSpacing":0},"data":[{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","field1":"","field2":"","field3":"","field4":"","openInWebView":false,"isChapter":false,"link":{"url":"","method":"","headers":[{"key":"","value":""}],"httpBody":null}}]}],"moduleCreatorIdgTejVMVgvktRAagxqgKO":{"path":"NhQLt","id":"mainPage,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false,"javascriptEditorScroll":0}}],"search":[{"request":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"separator":"","extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */  const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function Search(request,extra,separator,javascriptConfig,output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url,method,headers,httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands,extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName,params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript,loadInWebView,javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key,value) { this.key = key; this.value = value; } function Output(cellDesing,orientation,defaultLayout,paging,section,layout,data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName,separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top,bottom,left,right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width,height) { this.width = width; this.height = height; } function Ratio(inRelation,number1,number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image,title,description,field1,field2,field3,field4,isChapter,link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = []; let emptyKeyValue = [new KeyValue('','')]; let searchPageObject = new Search(new ModuleRequest('','',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),'',new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(searchPageObject); savedData.innerHTML = finalJson;  /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"output":[{"cellDesing":"normal1","orientation":"vertical","defaultLayout":"wide","paging":"","section":{"sectionName":"","separator":false},"layout":{"insets":{"top":0,"bottom":0,"left":0,"right":0},"visibleCellsWidthS":2,"visibleCellsWidthM":2,"visibleCellsWidthL":2,"visibleCellsHeight":2,"heightForVisibleCells":400,"cellSize":{"width":300,"height":300},"ratio":{"inRelation":"width","number1":1,"number2":2},"constant":{"width":1,"height":2},"horizontalSpacing":0,"verticalSpacing":0},"data":[{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","field1":"","field2":"","field3":"","field4":"","openInWebView":false,"isChapter":false,"link":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]}],"moduleCreatorIdrXOxpPKVLDWBMlvvWHwE":{"path":"ZIqDf","id":"search,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"info":[{"request":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */  function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Chapter(chapName, link,openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView;}function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters;}function getStuff(array,match) { for (var x = 0 ; x< array.length;x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match,'').trim(); } } }function getHtmlStuff(array,match) { for (var x = 0 ; x< array.length;x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let emptyKeyValue = [new KeyValue('', '')];var episodes = [];var type = 'empty';var status = 'Unknown';var genres = [];var desc = '';var title = '';var image = '';image = new ModuleRequest(image,'get',emptyKeyValue,null);var genresArray = [];let infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(image, title, parsedJson.request, desc, genres, status, 'Anime', type, 'Eps: ' + episodes.length, episodes));var finalJson = JSON.stringify(infoPageObject);savedData.innerHTML = finalJson;  /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"output":{"image":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"link":{"url":"","method":"get","headers":[{"key":"","value":""}],"httpBody":null},"title":"","description":"","genres":[""],"field1":"","field2":"","field3":"","field4":"","chapters":[{"chapName":"","openInWebView":false,"link":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]},"moduleCreatorIdwcTnzsNFsomVxWZWOZEd":{"path":"JIFKa","id":"info,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"chapters":[{"request":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */   function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output( videos, images, text) { this.videos = videos; this.images = images; this.text = text; } function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo; } function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link; } function RawVideo(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function Text(text) { this.text = text; } var output = []; var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('', '')]; let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Chapters(new ModuleRequest('', '', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(new Videos(null, output), null, null)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;  /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"output":{"videos":{"needsResolver":[{"resolverIdentifier":"","link":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}],"rawVideo":[{"video":[{"videoQuality":"","videoLink":{"url":"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]}]},"images":[{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}],"text":{"text":""}},"moduleCreatorIdmksjTADbGATGngkPZuFB":{"path":"YLKJq","id":"chapters,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleResolvers":[{"resolverInfo":{"resolverName":"","nameMatches":[""],"developer":"","moduleID":"","resolverVersion":1,"baseURL":"","moduleCreatorIdEGGNDpqMzDqjQqBmBXko":{"path":"xUTox","id":"moduleResolvers,0,resolverInfosection","sectionsHidden":[],"options":{"name":"Resolver Parameters","listName":"parameters"},"cellsHidden":false},"moduleCreatorIdesCFVjInMNCvQgbcNnws":{"path":"dnYoO","id":"moduleResolvers,0,resolverInfocell","sectionsHidden":[],"options":{"name":"parameters"},"cellsHidden":false}},"resolver":[{"request":{"url":"","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":false,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */  function Resolver ( request, extra, javascriptConfig, output ) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest ( url, method, headers, httpBody ) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra ( commands, extraInfo ) { this.commands = commands; this.extraInfo = extraInfo;}function Commands ( commandName, params ) { this.commandName = commandName; this.params = params;}function JavascriptConfig ( removeJavascript, loadInWebView, javaScript ) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue ( key, value ) { this.key = key; this.value = value;}function Output ( video ) { this.video = video;}function Video ( videoQuality, videoLink ) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getNext ( match, array ) { for ( var x = 0; x < array.length; x++ ) { let mMatch = array[ x ]; if ( mMatch.includes( match ) ) { return array[ x + 1 ]; } }}var savedData = document.getElementById( 'ketsu-final-data' );var parsedJson = JSON.parse( savedData.innerHTML );var emptyKeyValue = [ new KeyValue( 'Referer', parsedJson.request.url ) ];var videos = [ ];let emptyExtra = new Extra( [ new Commands( '', emptyKeyValue ) ], emptyKeyValue );var chaptersObject = new Resolver( new ModuleRequest( '', '', emptyKeyValue, null ), emptyExtra, new JavascriptConfig( false, false, '' ), new Output( videos ) );var finalJson = JSON.stringify( chaptersObject );savedData.innerHTML = finalJson;  /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"output":{"moduleID":"","video":[{"videoQuality":"720","videoLink":{"url":"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null}}]},"moduleCreatorIdLFMomsYcVLXmiHwcjrhE":{"path":"jPhKB","id":"moduleResolvers,0,resolver,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIddDYDUNIhBlqDEWbtisuS":{"path":"XOMnJ","id":"moduleResolvers,0section","sectionsHidden":[],"options":{"name":"Resolver"},"cellsHidden":false},"moduleCreatorIdOzDfjLqTcIOHYwciCwVK":{"path":"resolver","id":"moduleResolvers,0,resolversection","sectionsHidden":[],"options":{"name":"Resolver Request","listName":"Request"},"cellsHidden":false}}],"responseCodeFunctions":[{"code":0,"msgTitle":"","msgBody":"","type":"normal","functions":[{"request":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */    /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"moduleCreatorIdkZuLceAYwYnZsFmQPBZI":{"path":"ywuYM","id":"responseCodeFunctions,0,functions,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIdqtQwTaQLRqesxzNtksbw":{"path":"bdKfl","id":"responseCodeFunctions,0section","sectionsHidden":[],"options":{"name":"Function"},"cellsHidden":false},"moduleCreatorIdidtUxJqHJIByBECejiMx":{"path":"NYHYc","id":"responseCodeFunctions,0,section","sectionsHidden":[],"options":{"name":"Function Parameters","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdKmhyBcnptfdaZdbFfDzI":{"path":"czUwF","id":"responseCodeFunctions,0,cell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false},"moduleCreatorIdxjMgoEBAqMBKsJCOvkLY":{"path":"functions","id":"responseCodeFunctions,0,functionssection","sectionsHidden":[],"options":{"name":"Function Requests","listName":"Request"},"cellsHidden":false}}],"helperFunctions":[{"functionName":"example","msgTitle":"","msgBody":"","type":"normal","functions":[{"request":{"url":"empty","method":"get","headers":[{"key":"key","value":"value"}],"httpBody":null},"extra":{"commands":[{"commandName":"","params":[{"key":"","value":""}]}],"extraInfo":[{"key":"","value":""}]},"javascriptConfig":{"removeJavascript":true,"loadInWebView":false,"javaScript":"\n        try {\n\n            /* JAVASCRIPT STARTS */    /* JAVASCRIPT ENDS */\n\n        } catch (e) {\n            console.error(e.message);\n\n            if (typeof KETSU_ASYNC !== 'undefined') {\n                window.webkit.messageHandlers.EXECUTE_KETSU_ASYNC.postMessage('');\n            }\n\n        }\n        \n        "},"moduleCreatorIdxptYwQkNRBBECCgKXAWl":{"path":"UKCem","id":"helperFunctions,0,functions,0cell","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false}}],"moduleCreatorIdrQGxfAtMZvQzHleAXVtt":{"path":"MnLDR","id":"helperFunctions,0section","sectionsHidden":[],"options":{"name":"Request"},"cellsHidden":false},"moduleCreatorIdnuUaFAkDKtLAgUuKDjwZ":{"path":"ooICr","id":"helperFunctions,0,section","sectionsHidden":[],"options":{"name":"Function Parameters","listName":"Parameters"},"cellsHidden":false},"moduleCreatorIdTumFFGJHgOYwZEGyjQoG":{"path":"sXNGu","id":"helperFunctions,0,cell","sectionsHidden":[],"options":{"name":"Parameters"},"cellsHidden":false},"moduleCreatorIdJmmOepLOsDdOqMpPfiJG":{"path":"functions","id":"helperFunctions,0,functionssection","sectionsHidden":[],"options":{"name":"Function Requests","listName":"Request"},"cellsHidden":false}}],"moduleCreatorGlobalOptions":{"selected":"moduleCreatorIdtVvUvfDOnWQQYCkdsaMq","notesData":{"openedNotes":["oFwjzvDpdfxlaKQrGUwc"],"activeNote":"oFwjzvDpdfxlaKQrGUwc","notes":{}},"hideViews":[],"id":"wRUZkrhrkcfdRcc","projectName":"New Project"},"moduleCreatorIdAFSnUBrRTJBewVjxsvwv":{"path":"mainPage","id":"mainPagesection","sectionsHidden":[],"options":{"name":"Main Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIduHHZLZvduDIFYGrCcpGP":{"path":"search","id":"searchsection","sectionsHidden":[],"options":{"name":"Search Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIdwPgSZOIkeKnlVekrtcas":{"path":"info","id":"infosection","sectionsHidden":[],"options":{"name":"Info Page","listName":"Request"},"cellsHidden":false},"moduleCreatorIdonVnjvhoWmdLBQAiYFLi":{"path":"chapters","id":"chapterssection","sectionsHidden":[],"options":{"name":"Chapters","listName":"Request"},"cellsHidden":false},"moduleCreatorIdfyAynGvdQAalLdBlAWHc":{"path":"moduleResolvers","id":"moduleResolverssection","sectionsHidden":[],"options":{"name":"Resolvers","listName":"Resolver"},"cellsHidden":false},"moduleCreatorIdNKQKrOolXAQLNtverEle":{"path":"responseCodeFunctions","id":"responseCodeFunctionssection","sectionsHidden":[],"options":{"name":"Response Code Funtions","listName":"Function"},"cellsHidden":false},"moduleCreatorIddMLjGBcTSOAOBCSbrhhQ":{"path":"helperFunctions","id":"helperFunctionssection","sectionsHidden":[],"options":{"name":"Helper Functions","listName":"Request"},"cellsHidden":false}}
';